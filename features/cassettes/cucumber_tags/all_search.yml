---
http_interactions:
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 18 Jul 2019 12:44:42 GMT
      Last-Modified:
      - Thu, 18 Jul 2019 12:44:20 GMT
      Etag:
      - '"NWI4NjdhMDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr8.library.cornell.edu
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {"responseHeader":{"zkConnected":true,"status":0,"QTime":1708,"params":{"f.subject_content_facet.facet.limit":"6","f.author_facet.facet.limit":"6","facet.field":["online","format","author_facet","pub_date_facet","workid_facet","language_facet","fast_topic_facet","fast_geo_facet","fast_era_facet","fast_genre_facet","subject_content_facet","lc_alpha_facet","location","hierarchy_facet","authortitle_facet","lc_callnum_facet","collection"],"qt":"search","f.fast_geo_facet.facet.limit":"6","f.lc_alpha_facet.facet.limit":"6","f.lc_callnum_facet.facet.limit":"-1","sort":"score desc, pub_date_sort desc, title_sort asc","f.location.facet.sort":"index","rows":"20","f.online.facet.limit":"3","facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]","acquired_dt:[NOW-30DAY TO NOW-7DAY ]","acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],"f.location.facet.limit":"101","defType":"edismax","f.fast_era_facet.facet.limit":"6","f.lc_callnum_facet.facet.sort":"count","stats":"true","f.fast_topic_facet.facet.limit":"6","f.fast_genre_facet.facet.limit":"6","facet":"true","wt":"json","f.format.facet.limit":"11","f.language_facet.facet.limit":"6","stats.field":"pub_date_facet"}},"response":{"numFound":7988414,"start":0,"maxScore":1.5185139,"docs":[{"author_display":"Silberstein, Fanchon","title_display":"Art Insight: Understanding Art and Why It Matters","fulltitle_display":"Art Insight: Understanding Art and Why It Matters","subtitle_display":"","pub_info_display":["Intellect (UK) 2020"],"pub_date_display":["2020"],"language_display":["English."],"id":"10975998","holdings_record_display":["{\"id\":\"11256806\",\"modified_date\":\"20190717110046\",\"copy_number\":null,\"callnos\":[],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"fine\",\"number\":31,\"name\":\"Fine Arts Library (B56 Sibley Hall)\",\"library\":\"Fine Arts Library\"}]}"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Fine Arts Library (B56 Sibley Hall)\":\"In pre-order processing as of 7/17/19\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Pomeroy, Sarah B., author","title_display":"A brief history of Ancient Greece","fulltitle_display":"A brief history of Ancient Greece : politics, society, and culture","subtitle_display":"politics, society, and culture","pub_info_display":["New York : Oxford University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10868113","edition_display":["Fourth edition."],"acquired_dt":"2019-06-12T00:00:00Z","holdings_record_display":["{\"id\":\"11162986\",\"modified_date\":\"20190613084457\",\"copy_number\":null,\"callnos\":[\"DF77 .P65 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"oclc_id_display":["1057731222"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin Library\":\"DF77 .P65 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Coogan, Michael David, author","title_display":"A brief introduction to the Old Testament","fulltitle_display":"A brief introduction to the Old Testament : the Hebrew Bible in its context","subtitle_display":"the Hebrew Bible in its context","pub_info_display":["New York : Oxford University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10890583","edition_display":["Fourth edition."],"acquired_dt":"2019-07-10T00:00:00Z","holdings_record_display":["{\"id\":\"11171537\",\"modified_date\":\"20190710162410\",\"copy_number\":null,\"callnos\":[\"BS1197 .C56 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10693563\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11171537\",\"recalls_placed\":\"0\",\"create_date\":\"2019-07-10 16:24:10.0\",\"item_barcode\":\"31924126648272\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1107680159"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin Library\":\"BS1197 .C56 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"title_display":"The Cambridge history of French thought","fulltitle_display":"The Cambridge history of French thought","subtitle_display":"","pub_info_display":["Cambridge ; New York, NY : Cambridge University Press, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10912099","url_access_display":["http://proxy.library.cornell.edu/login?url=https://doi.org/10.1017/9781316681572|Full text available from Cambridge Histories Connect to text."],"url_access_json":["{\"providercode\":\"PRVAEN\",\"dbcode\":\"MKH\",\"description\":\"Full text available from Cambridge Histories Connect to text.\",\"ssid\":\"ssib035623330\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://doi.org/10.1017/9781316681572\"}"],"acquired_dt":"2019-07-12T00:00:00Z","holdings_record_display":["{\"id\":\"11192976\",\"modified_date\":\"20190712131032\",\"copy_number\":null,\"callnos\":null,\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"serv,remo\",\"number\":128,\"name\":\"*Networked Resource\",\"library\":null}]}"],"availability_json":"{\"online\":true}","pub_date_facet":2020,"format":["Book"],"online":["Online"],"score":1.5185139},{"title_display":"Career development interventions for social justice","fulltitle_display":"Career development interventions for social justice : addressing needs across the lifespan in educational, community, and employment contexts","subtitle_display":"addressing needs across the lifespan in educational, community, and employment contexts","pub_info_display":["Lanham, Maryland : Rowman & Littlefield, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10677357","acquired_dt":"2019-02-21T00:00:00Z","holdings_record_display":["{\"id\":\"10974409\",\"modified_date\":\"20190221073850\",\"copy_number\":null,\"callnos\":[\"HF5381 .C26557 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10630024\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"10974409\",\"recalls_placed\":\"0\",\"create_date\":\"2019-02-21 07:38:50.0\",\"item_barcode\":\"31924126184609\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1057237891"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin Library\":\"HF5381 .C26557 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Vaughan, Elaine","title_display":"Community and Identity in Teacher Professional Talk: Applying Corpus Methodologies","fulltitle_display":"Community and Identity in Teacher Professional Talk: Applying Corpus Methodologies","subtitle_display":"","pub_info_display":["London Routledge 2020"],"pub_date_display":["2020"],"language_display":["English."],"id":"10429314","acquired_dt":"2018-07-26T00:00:00Z","holdings_record_display":["{\"id\":\"10731588\",\"modified_date\":\"20180726085224\",\"copy_number\":null,\"callnos\":[\"Available for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1046544858"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Kovoor-Misrar, Sarah, author","title_display":"Crisis management","fulltitle_display":"Crisis management : resilience and change","subtitle_display":"resilience and change","pub_info_display":["Los Angeles : SAGE, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10761968","acquired_dt":"2019-04-10T00:00:00Z","holdings_record_display":["{\"id\":\"11058387\",\"modified_date\":\"20190410121310\",\"copy_number\":null,\"callnos\":[\"HD42 .K69 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10651865\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11058387\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-10 12:13:10.0\",\"item_barcode\":\"31924126213267\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}}"],"oclc_id_display":["1096343586"],"availability_json":"{\"available\":false,\"unavailAt\":{\"ILR Library (Ives Hall)\":\"HD42 .K69 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Pilcher, Jeremy","title_display":"Culture","fulltitle_display":"Culture","subtitle_display":"","pub_info_display":["Intellect 2020"],"pub_date_display":["2020"],"language_display":["English."],"id":"10975997","holdings_record_display":["{\"id\":\"11256800\",\"modified_date\":\"20190717105617\",\"copy_number\":null,\"callnos\":[],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"fine\",\"number\":31,\"name\":\"Fine Arts Library (B56 Sibley Hall)\",\"library\":\"Fine Arts Library\"}]}"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Fine Arts Library (B56 Sibley Hall)\":\"In pre-order processing as of 7/17/19\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Yin, Kun., author","title_display":"Design of Novel Biosensors for Optical Sensing and Their Applications in Environmental Analysis","fulltitle_display":"Design of Novel Biosensors for Optical Sensing and Their Applications in Environmental Analysis","subtitle_display":"","pub_info_display":["Singapore : Springer Singapore : Imprint: Springer, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10832037","url_access_display":["http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-981-13-6488-4|Full text available from SpringerLink ebooks - Earth and Environmental Science (Contemporary) Connect to text."],"url_access_json":["{\"providercode\":\"PRVAVX\",\"dbcode\":\"0D8\",\"description\":\"Full text available from SpringerLink ebooks - Earth and Environmental Science (Contemporary) Connect to text.\",\"ssid\":\"ssj0002135574\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-981-13-6488-4\"}"],"acquired_dt":"2019-05-14T00:00:00Z","holdings_record_display":["{\"id\":\"11127410\",\"modified_date\":\"20190514145312\",\"copy_number\":null,\"callnos\":null,\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"serv,remo\",\"number\":128,\"name\":\"*Networked Resource\",\"library\":null}]}"],"oclc_id_display":["1089754186"],"availability_json":"{\"online\":true}","pub_date_facet":2020,"format":["Book"],"online":["Online"],"score":1.5185139},{"author_display":"Newnan, Donald G., author","title_display":"Engineering economic analysis","fulltitle_display":"Engineering economic analysis","subtitle_display":"","pub_info_display":["New York : Oxford University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10825474","edition_display":["Fourteenth Edition."],"acquired_dt":"2019-05-03T00:00:00Z","holdings_record_display":["{\"id\":\"11121156\",\"modified_date\":\"20190503145827\",\"copy_number\":null,\"callnos\":[\"Available for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1080553809"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"WARD, IAN.","title_display":"ENGLISH LEGAL HISTORIES","fulltitle_display":"ENGLISH LEGAL HISTORIES","subtitle_display":"","pub_info_display":["[S.l.] : HART PUBLISHING, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10883995","holdings_record_display":["{\"id\":\"11165585\",\"modified_date\":\"20190620125730\",\"copy_number\":null,\"callnos\":[\"On order\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"law\",\"number\":63,\"name\":\"Law Library (Myron Taylor Hall)\",\"library\":\"Law Library\"}]}"],"oclc_id_display":["1097578655"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Law Library (Myron Taylor Hall)\":\"On order as of 6/20/19\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"title_display":"Environmental sociology","fulltitle_display":"Environmental sociology : from analysis to action","subtitle_display":"from analysis to action","pub_info_display":["Lanham, Maryland : Rowman & Littlefield, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10821643","edition_display":["Fourth Edition."],"acquired_dt":"2019-04-24T00:00:00Z","holdings_record_display":["{\"id\":\"11117629\",\"modified_date\":\"20190425075254\",\"copy_number\":null,\"callnos\":[\"GE195 .E588 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann\",\"number\":69,\"name\":\"Mann Library\",\"library\":\"Mann Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10666459\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11117629\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-25 07:53:08.0\",\"item_barcode\":\"31924126215866\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mann\",\"number\":69,\"name\":\"Mann Library\",\"library\":\"Mann Library\"}}"],"oclc_id_display":["1073033878"],"availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"GE195 .E588 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Ross, Stephen A., author","title_display":"Essentials of corporate finance","fulltitle_display":"Essentials of corporate finance","subtitle_display":"","pub_info_display":["New York, NY : McGraw-Hill Education, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10743639","edition_display":["Tenth edition."],"acquired_dt":"2019-03-13T00:00:00Z","holdings_record_display":["{\"id\":\"11040151\",\"modified_date\":\"20190313093141\",\"copy_number\":null,\"callnos\":[\"HG4026 .R676 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}"],"oclc_id_display":["1078971152"],"availability_json":"{\"available\":true,\"availAt\":{\"ILR Library (Ives Hall)\":\"HG4026 .R676 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Faddis, Toni, author","title_display":"The ethical line","fulltitle_display":"The ethical line : 10 leadership strategies for effective decision making","subtitle_display":"10 leadership strategies for effective decision making","pub_info_display":["Thousand Oaks, California : Corwin, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10884307","acquired_dt":"2019-06-21T00:00:00Z","holdings_record_display":["{\"id\":\"11165861\",\"modified_date\":\"20190621101544\",\"copy_number\":null,\"callnos\":[\"Available for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1100428270"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Peterson, Martin, 1975- author","title_display":"Ethics for engineers","fulltitle_display":"Ethics for engineers","subtitle_display":"","pub_info_display":["New York : Oxford University Press, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10828041","acquired_dt":"2019-05-10T00:00:00Z","holdings_record_display":["{\"id\":\"11123519\",\"modified_date\":\"20190510171027\",\"copy_number\":null,\"callnos\":[\"Available for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1101013521"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Fricke, Carola., author","title_display":"European Dimension of Metropolitan Policies","fulltitle_display":"European Dimension of Metropolitan Policies : Policy Learning and Reframing of Metropolitan Regions","subtitle_display":"Policy Learning and Reframing of Metropolitan Regions","pub_info_display":["Cham : Springer International Publishing : Imprint: Springer, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10833363","url_access_display":["http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-3-030-14614-6|Full text available from SpringerLink ebooks - Earth and Environmental Science (Contemporary) Connect to text."],"url_access_json":["{\"providercode\":\"PRVAVX\",\"dbcode\":\"0D8\",\"description\":\"Full text available from SpringerLink ebooks - Earth and Environmental Science (Contemporary) Connect to text.\",\"ssid\":\"ssj0002135576\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-3-030-14614-6\"}"],"acquired_dt":"2019-05-14T00:00:00Z","holdings_record_display":["{\"id\":\"11128736\",\"modified_date\":\"20190514145800\",\"copy_number\":null,\"callnos\":null,\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"serv,remo\",\"number\":128,\"name\":\"*Networked Resource\",\"library\":null}]}"],"oclc_id_display":["1090799330"],"availability_json":"{\"online\":true}","pub_date_facet":2020,"format":["Book"],"online":["Online"],"score":1.5185139},{"author_display":"Libby, Robert, author","title_display":"Financial accounting","fulltitle_display":"Financial accounting","subtitle_display":"","pub_info_display":["New York, NY : McGraw-Hill Education, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10828018","edition_display":["Tenth edition."],"acquired_dt":"2019-05-13T00:00:00Z","holdings_record_display":["{\"id\":\"11123500\",\"modified_date\":\"20190513124305\",\"copy_number\":null,\"callnos\":[\"HF5635 .L684 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}","{\"id\":\"11123502\",\"modified_date\":\"20190513124507\",\"copy_number\":\"2\",\"callnos\":[\"HF5635 .L684 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}","{\"id\":\"11123504\",\"modified_date\":\"20190513124719\",\"copy_number\":\"3\",\"callnos\":[\"HF5635 .L684 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}","{\"id\":\"11123505\",\"modified_date\":\"20190515122342\",\"copy_number\":\"4\",\"callnos\":[\"HF5635 .L684 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}","{\"id\":\"11123506\",\"modified_date\":\"20190517130906\",\"copy_number\":\"5\",\"callnos\":[\"HF5635 .L684 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10673324\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11123500\",\"recalls_placed\":\"0\",\"create_date\":\"2019-05-13 12:43:52.0\",\"item_barcode\":\"31924126479934\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}}","{\"copy_number\":\"2\",\"item_type_name\":\"book\",\"item_id\":\"10673326\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11123502\",\"recalls_placed\":\"0\",\"create_date\":\"2019-05-13 12:45:53.0\",\"item_barcode\":\"31924126479926\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}}","{\"copy_number\":\"3\",\"item_type_name\":\"book\",\"item_id\":\"10673327\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11123504\",\"recalls_placed\":\"0\",\"create_date\":\"2019-05-13 12:48:04.0\",\"item_barcode\":\"31924126479918\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}}","{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10674236\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11123505\",\"recalls_placed\":\"0\",\"create_date\":\"2019-05-15 12:25:27.0\",\"item_barcode\":\"31924126480403\",\"modify_date\":\"2019-05-15 12:25:30.0\",\"perm_location\":{\"code\":\"jgsm\",\"number\":59,\"name\":\"ILR Library (Ives Hall)\",\"library\":\"ILR Library\"}}"],"oclc_id_display":["1056201013"],"availability_json":"{\"available\":true,\"availAt\":{\"Sage Hall Management Library Reserve\":\"HF5635 .L684 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Thompson, Katharine.","title_display":"Food law","fulltitle_display":"Food law","subtitle_display":"","pub_info_display":["[Place of publication not identified] : Bloomsbury Professional, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"9844267","edition_display":["Fourth ed."],"holdings_record_display":["{\"id\":\"10164325\",\"modified_date\":\"20181024092715\",\"copy_number\":null,\"callnos\":[\"On order\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"law\",\"number\":63,\"name\":\"Law Library (Myron Taylor Hall)\",\"library\":\"Law Library\"}]}"],"oclc_id_display":["892432404"],"availability_json":"{\"available\":true,\"availAt\":{\"Law Library (Myron Taylor Hall)\":\"On order\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Wen, Eric, 1953- author","title_display":"Graphic music analysis","fulltitle_display":"Graphic music analysis","subtitle_display":"","pub_info_display":["Lanham : Rowman & Littlefield Publishers, Inc., [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10762019","acquired_dt":"2019-04-10T00:00:00Z","holdings_record_display":["{\"id\":\"11058439\",\"modified_date\":\"20190410121336\",\"copy_number\":null,\"callnos\":[\"MT6 .W3337 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mus\",\"number\":88,\"name\":\"Cox Library of Music (Lincoln Hall)\",\"library\":\"Music Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10651918\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11058439\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-10 12:13:36.0\",\"item_barcode\":\"31924126208028\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mus\",\"number\":88,\"name\":\"Cox Library of Music (Lincoln Hall)\",\"library\":\"Music Library\"}}"],"oclc_id_display":["1037884442"],"availability_json":"{\"available\":true,\"availAt\":{\"Cox Library of Music (Lincoln Hall)\":\"MT6 .W3337 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139},{"author_display":"Rhodes, Matthew (Matthew G.), author","title_display":"A guide to effective studying and learning","fulltitle_display":"A guide to effective studying and learning : practical strategies from the science of learning","subtitle_display":"practical strategies from the science of learning","pub_info_display":["New York, NY : Oxford University Press, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10717393","acquired_dt":"2019-03-11T00:00:00Z","holdings_record_display":["{\"id\":\"11014097\",\"modified_date\":\"20190311111752\",\"copy_number\":null,\"callnos\":[\"LB2395 .R54 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10637725\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11014097\",\"recalls_placed\":\"0\",\"create_date\":\"2019-03-11 11:18:53.0\",\"item_barcode\":\"31924126365513\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1075530432"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Olin Library\":\"LB2395 .R54 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At the Library"],"score":1.5185139}]},"facet_counts":{"facet_queries":{"acquired_dt:[NOW-14DAY TO NOW-7DAY ]":11915,"acquired_dt:[NOW-30DAY TO NOW-7DAY ]":16196,"acquired_dt:[NOW-1YEAR TO NOW-7DAY]":381376},"facet_fields":{"online":["At the Library",5960238,"Online",2179542],"format":["Book",7007434,"Journal/Periodical",403709,"Microform",355708,"Musical Recording",234707,"Thesis",202392,"Video",106062,"Musical Score",101881,"Map",64973,"Manuscript/Archive",17127,"Non-musical Recording",10366,"Website",6755],"author_facet":["Naxos Digital Services US",130806,"SpringerLink (Online service)",88180,"ebrary, Inc.",87535,"Fiske Icelandic Collection",34776,"Geological Survey (U.S.)",33708,"National Bureau of Economic Research",27775],"pub_date_facet":["2000",139676,"2010",139643,"2003",122999,"2007",120736,"2004",119363,"2002",119079,"2006",118057,"2005",117328,"2008",116391,"2001",114990],"workid_facet":["2770653",1057,"114791",802,"501110234",714,"327434",503,"8882390",266,"1276170",264,"53218",257,"308890207",253,"1011484946",247,"2287046099",227],"language_facet":["English",4870697,"German",548839,"French",345584,"Spanish",294436,"Chinese",272751,"Russian",187669],"fast_topic_facet":["Political science",219333,"Economic history",96609,"Travel",69993,"Diplomatic relations",64985,"Manners and customs",53520,"Social history",52561],"fast_geo_facet":["United States",642639,"Great Britain",175628,"China",130327,"France",92642,"Indonesia",74823,"Germany",71886],"fast_era_facet":["1900 - 1999",167223,"1800 - 1899",43252,"1900-1999",29542,"1939 - 1945",29489,"1700 - 1799",29040,"1600 - 1699",26089],"fast_genre_facet":["History",673778,"Criticism, interpretation, etc.",292069,"Periodicals",219294,"Conference papers and proceedings",217545,"Biography",198017,"Early works",189611],"subject_content_facet":["Non-Fiction (books)",5926430,"Fiction (books)",323759],"lc_alpha_facet":[],"location":["Adelson Library",9878,"Adelson Library > Macaulay Library",364,"Adelson Library > Main Collection",9022,"Adelson Library > Museum of Vertebrates",895,"Adelson Library > Reference",193,"Africana Library",24837,"Africana Library > Main Collection",23788,"Africana Library > New Books Shelf",306,"Africana Library > Reference",716,"Africana Library > Reserve",44,"Bailey Hortorium",15854,"Bailey Hortorium > Main Collection",11553,"Bailey Hortorium > Reference",4333,"CISER Data Archive",2432,"Fine Arts Library",4884,"Fine Arts Library > Artists' Books",55,"Fine Arts Library > Main Collection",3453,"Fine Arts Library > Reference",491,"Fine Arts Library > Reserve",906,"ILR Library",111291,"ILR Library > Labor Law Reference",95,"ILR Library > Main Collection",109793,"ILR Library > Reference",1461,"ILR Library > Reserve",256,"ILR Library Kheel Center",23326,"ILR Library Kheel Center > Main Collection",22982,"ILR Library Kheel Center > Reference",360,"Kroch Library Asia",627845,"Kroch Library Asia > Main Collection",623241,"Kroch Library Asia > Reference",5085,"Kroch Library Asia > Reserve",4,"Kroch Library Rare & Manuscripts",513157,"Kroch Library Rare & Manuscripts > Main Collection",262858,"Kroch Library Rare & Manuscripts > Reference",866,"Kroch Library Rare & Manuscripts > Request in Advance",255267,"Law Library",202251,"Law Library > Legal Aid Clinic",3,"Law Library > Main Collection",197358,"Law Library > Rare Books",1170,"Law Library > Reference",782,"Law Library > Request in Advance",1743,"Law Library > Reserve",1566,"Library Annex",2431626,"Mann Library",167125,"Mann Library > Circulation",3,"Mann Library > Collection Development",18,"Mann Library > Curriculum Materials Collection",513,"Mann Library > Ellis Collection",755,"Mann Library > Main Collection",154193,"Mann Library > New Book Shelf",387,"Mann Library > Reference",679,"Mann Library > Reserve",55,"Mann Library > Special Collections",11002,"Mathematics Library",52770,"Mathematics Library > Circulation Desk",242,"Mathematics Library > Locked Press",1,"Mathematics Library > Main Collection",52405,"Mathematics Library > Reference",297,"Mathematics Library > Reserve",28,"Music Library",203027,"Music Library > A/V",64635,"Music Library > Circulation",3,"Music Library > Main Collection",128403,"Music Library > Reference",12389,"Music Library > Reserve",205,"Nestle Library",11,"Nestle Library > Reserve",11,"Olin Library",1718008,"Olin Library > Circulation Desk",28,"Olin Library > DCAPS (106G Olin)",3,"Olin Library > Graduate Study Room 501",3022,"Olin Library > Main Collection",1660379,"Olin Library > Map Storage",8221,"Olin Library > Maps",38165,"Olin Library > New & Noteworthy Books Shelf",914,"Olin Library > Preservation Department",568,"Olin Library > Reference",6888,"Olin Library > Reserve",89,"Olin Library > Room 305",1,"Olin Library > Room 404",2,"Olin Library > Room 604-605",1546,"Sage Hall Management Library",302,"Sage Hall Management Library > Reference",54,"Sage Hall Management Library > Reserve",248,"Space Sciences Building",2007,"Uris Library",152383,"Uris Library > Asia A/V",9309,"Uris Library > Asia A/V > China",2005,"Uris Library > Asia A/V > Japan",769,"Uris Library > Asia A/V > Korea",747,"Uris Library > Asia A/V > South Asia",1768,"Uris Library > Asia A/V > Southeast Asia",3203,"Uris Library > Circulation",8,"Uris Library > Main Collection",141852,"Uris Library > Reference",696,"Uris Library > Reserve",607,"Uris Library > Reserve Willis Room ",4,"Veterinary Library",8838,"Veterinary Library > Main Collection",8797,"Veterinary Library > Rare Books",2,"Veterinary Library > Reference",15],"hierarchy_facet":[],"authortitle_facet":["United States. Congress. Senate. | S. hrg",24127,"United States. Congress. House. | Report",9153,"Inter Documentation Company. | Indonesia microfiches editions",5972,"United States. Congress. Senate. | Report",4127,"United States. | Treaties, etc. (Treaties and other international acts series)",1568,"England and Wales. | Laws, etc.",1027,"New York State College of Agriculture. Department of Agricultural Economics. | A.E.",915,"United States. Federal Aviation Administration. | Advisory circular",761,"France. | Laws, etc.",760,"Sampson, Aaron, | Microsoft SQL Server 2016",556],"lc_callnum_facet":["P - Language & Literature",1320912,"H - Social Sciences",960270,"D - World History",662407,"Q - Science",508869,"B - Philosophy, Psychology, Religion",460580,"K - Law",400813,"T - Technology",292145,"H - Social Sciences:HD - Industries, Land use, Labor",281163,"D - World History:DS - Asia",279807,"D - World History:DA-DR - Europe",277637,"E-F - History of the Americas",259748,"N - Fine Arts",237114,"Z - Bibliography, Library Science, Information Resources",221508,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources",220610,"A - General",220395,"K - Law:KF-KFZ - The United States",219648,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature",218995,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania",218516,"K - Law:KF-KFZ - The United States:KF - Federal law.  Common and collective state law",196106,"J - Political Science",184541,"A - General:AC - Collections, Series, Collected works",179622,"P - Language & Literature:PR - English Literature",179257,"G - Geography, Anthropology, Recreation",177146,"A - General:AC - Collections, Series, Collected works:AC1-195 - Collections of monographs, essays, etc.",176618,"M - Music",169196,"Q - Science:QA - Mathematics",163097,"S - Agriculture",156925,"R - Medicine",156546,"A - General:AC - Collections, Series, Collected works:AC1-195 - Collections of monographs, essays, etc.:AC1-8 - American and English",141260,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography",130164,"P - Language & Literature:PN - Literature (General)",128793,"H - Social Sciences:HC - Economic History & Conditions",123009,"P - Language & Literature:PS - Americal Literature",121509,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class",118465,"L - Education",118009,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature",111622,"H - Social Sciences:HC - Economic History & Conditions:HC94-1085 - By region or country",105445,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors",94337,"P - Language & Literature:PT - Germanic & Scandinavian Literature",92908,"E-F - History of the Americas:E151-909 - United States",91627,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature",87060,"H - Social Sciences:HF - Commerce",86779,"M - Music:M - Music",86190,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature",86150,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic",85039,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America",80311,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z2000-2959 - Europe",79658,"Q - Science:QA - Mathematics:QA71-90 - Instruments and machines",78097,"Q - Science:QA - Mathematics:QA71-90 - Instruments and machines:QA75-76.95 - Calculating machines",77456,"Q - Science:QA - Mathematics:QA71-90 - Instruments and machines:QA75-76.95 - Calculating machines:QA75.5-76.95 - Electronic computers.  Computer science",77210,"B - Philosophy, Psychology, Religion:B - Philosophy (General)",74926,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature",74916,"G - Geography, Anthropology, Recreation:G - Geography (General)",74829,"M - Music:ML - Literature on music",73887,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology",73181,"H - Social Sciences:HB - Economic Theory, Demography",73087,"H - Social Sciences:HQ - The Family, Marriage, Women",71724,"D - World History:DS - Asia:DS701-799.9 - China",71468,"B - Philosophy, Psychology, Religion:BX - Christian Denominations",69896,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature",69536,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature",68530,"N - Fine Arts:N - Visual arts",67759,"P - Language & Literature:PK - Indo-Iranian Philology and Literature",66892,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period",66612,"D - World History:D - History (General)",66559,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL2250-3208 - Chinese literature",66089,"N - Fine Arts:NA - Architecture",65457,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ7000-8929 - Provincial, local, colonial, etc.",60640,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ7000-8929 - Provincial, local, colonial, etc.:PQ7081-8560 - Spanish America",60095,"H - Social Sciences:HG - Finance",59258,"D - World History:DA-DR - Europe:DA - Great Britain",58934,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama",58434,"E-F - History of the Americas:F1-975 - United States - Regional",55703,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages",55591,"Q - Science:QL - Zoology",55284,"Q - Science:QC - Physics",54640,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades",54518,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering",53363,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works",52829,"L - Education:LB - Theory & Practice of Education",52694,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages",52626,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects",52417,"M - Music:ML - Literature on music:ML159-3785 - History and criticism",51910,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature",51109,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America",50808,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business",50555,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism",49993,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature",49739,"S - Agriculture:SB - Plant Culture",48860,"Q - Science:QH - Natural History, Biology",48093,"T - Technology:TA - Engineering (General), Civil Engineering",47275,"R - Medicine:RC - Internal Medicine",47224,"D - World History:DA-DR - Europe:DC - France",47177,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps",46996,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics",46482,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country",46187,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England",46151,"M - Music:M - Music:M5-1480 - Instrumental music",45567,"B - Philosophy, Psychology, Religion:BF - Psychology",45521,"P - Language & Literature:PA - Greek & Latin Language & Literature",45147,"C - Historical Sciences (Archaeology, Genealogy)",44890,"P - Language & Literature:P - Philology & Linguistics",44859,"N - Fine Arts:ND - Painting",44759,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern",44703,"P - Language & Literature:PJ - Oriental Philology and Literature",44624,"S - Agriculture:S - Agriculture (General)",44432,"P - Language & Literature:PZ - Fiction and Juvenile Belles Lettres",43973,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America",43710,"N - Fine Arts:N - Visual arts:N5300-7418 - History",42736,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature",41805,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America:Z1215-1363 - United States",41053,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors:PS3550-3576 - 1961-2000",40376,"S - Agriculture:SF - Animal Culture",40224,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence",40206,"Q - Science:Q - Science (General)",40185,"U - Military Science",40163,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works",39963,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management",39307,"R - Medicine:RA - Public Aspects of Medicine",38766,"B - Philosophy, Psychology, Religion:BS - The Bible",38288,"D - World History:DS - Asia:DS701-799.9 - China:DS733-779.32 - History",37535,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL2250-3208 - Chinese literature:PL2661-2979 - Individual authors and works",37534,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors:PS3500-3549 - 1900-1960",37483,"P - Language & Literature:PR - English Literature:PR3991-5990 - 19th century, 1770/1800-1890/1900",37476,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform",37228,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church",37192,"K - Law:KM-KPW - Asia",36549,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern:B850-5739 - By region or country",36177,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z5051-7999 - Subject bibliography",35374,"A - General:AC - Collections, Series, Collected works:AC1-195 - Collections of monographs, essays, etc.:AC9-195 - Other languages",35360,"Q - Science:QK - Botany",35325,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia",34790,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions",34734,"Q - Science:Q - Science (General):Q1-295 - General",33764,"K - Law:KJ-KKZ - Europe",33652,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-",33258,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History",33131,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period",33131,"M - Music:M - Music:M1495-2199 - Vocal music",33106,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History",32907,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform:HN50-995 - By region or country",32256,"B - Philosophy, Psychology, Religion:BR - Christianity",32165,"D - World History:DA-DR - Europe:DD - Germany",32094,"D - World History:DT - Africa",32007,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature",31848,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania",31834,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages",31802,"T - Technology:TX - Home Economics",31733,"K - Law:KD-KDK - The United Kingdom and Ireland",31643,"Q - Science:QD - Chemistry",31438,"Q - Science:QP - Physiology",31095,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.",30871,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General)",30819,"P - Language & Literature:PZ - Fiction and Juvenile Belles Lettres:PZ1-4 - Fiction in English",30742,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere",30336,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews",30254,"Q - Science:QE - Geology",29770,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures",29677,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home",29468,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam",29294,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America",29255,"D - World History:DA-DR - Europe:DG - Italy",28578,"B - Philosophy, Psychology, Religion:BQ - Buddhism",28510,"H - Social Sciences:HT - Communities, Classes, Races",28458,"H - Social Sciences:HE - Transportation & Communications",28368,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental",28248,"P - Language & Literature:PR - English Literature:PR6000-6049 - 1900-1960",28176,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism",28030,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures",28012,"K - Law:KD-KDK - The United Kingdom and Ireland:KD51-9500 - England and Wales",27952,"L - Education:LC - Special Aspects of Education",27637,"N - Fine Arts:ND - Painting:ND49-813 - History",27602,"D - World History:DS - Asia:DS401-486.8 - India (Bharat)",27589,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL700-889 - Japanese literature",27520,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages",27441,"G - Geography, Anthropology, Recreation:GN - Anthropology",27289,"H - Social Sciences:HM - Sociology",27232,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4301-4470 - Mon-Khmer (Mon-Anam) languages",27190,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL5051-5497 - Malayan (Indonesian) languages",27187,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period",27173,"N - Fine Arts:NA - Architecture:NA190-1555.5 - History",27098,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G3700-4384 - United States",26993,"R - Medicine:R - Medicine (General)",26744,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia",26559,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML385-429 - Biography",26335,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies)",26212,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.)",25990,"D - World History:D - History (General):D731-838 - World War II (1939-1945)",25958,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music",25813,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture",25710,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK5101-6720 - Telecommunication (incl telegraphy, telephone, radio, radar, television)",25603,"J - Political Science:JN - Political Institutions (Europe)",25588,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ1101-2030.7 - Women.  Feminism",25329,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries",25124,"J - Political Science:JC - Political Theory",25118,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law",25032,"H - Social Sciences:H - Social sciences (General)",24930,"E-F - History of the Americas:E11-143 - America",24837,"J - Political Science:JX - International Law (obsolete classification)",24810,"H - Social Sciences:HJ - Public Finance",24548,"P - Language & Literature:PR - English Literature:PR8309-9680 - English literature (Provincial, local, etc.)",24428,"B - Philosophy, Psychology, Religion:BV - Practical Theology",24152,"J - Political Science:JK - Political Institutions (United States)",24102,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-",24033,"N - Fine Arts:NK - Decorative Arts",23946,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates",23037,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure",22947,"A - General:AS - Academies & Learned Societies",22851,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia",22734,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States",22670,"Q - Science:QA - Mathematics:QA1-43 - General",22632,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic",22518,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar",22311,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature",21744,"T - Technology:TP - Chemical Technology",21592,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9000-9495 - Agricultural industries",21512,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry",21387,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology",21377,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings",21351,"L - Education:LA - History of education",21147,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use",21005,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina",20983,"T - Technology:TD - Environmental Technology, Sanitary Engineering",20880,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology",20778,"D - World History:DS - Asia:DS801-897 - Japan",20771,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC139-249 - Revolutionary and Napoleonic period, 1789-1815",20745,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater",20638,"T - Technology:T - Technology (General)",20631,"H - Social Sciences:HX - Socialism, Communism, Anarchism",20490,"B - Philosophy, Psychology, Religion:BM - Judaism",20264,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology",19859,"Q - Science:QA - Mathematics:QA299.6-433 - Analysis",19840,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ2600-2651 - 1900-1960",19740,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine",19740,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History",19349,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT2600-2653 - 1860/70-1960",19250,"M - Music:M - Music:M5-1480 - Instrumental music:M177-990 - Two or more solo instruments",19075,"P - Language & Literature:PC - Romance Languages",18893,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration",18775,"E-F - History of the Americas:E11-143 - America:E75-99 - Indians of North America",18715,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ7501-8517 - Arabic literature",18613,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry",18537,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD8045-8943 - By region or country",18527,"E-F - History of the Americas:E151-909 - United States:E184-185.98 - Elements in the population",18388,"T - Technology:TJ - Mechanical Engineering and Machinery",17988,"Q - Science:QL - Zoology:QL360-599.82 - Invertebrates",17928,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD5701-6000.9 - Labor market.  Labor supply.  Labor demand",17718,"Q - Science:QH - Natural History, Biology:QH1-278.5 - Natural history (General)",17539,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9400-9999 - Provincial, local, colonial, etc.",17333,"D - World History:DS - Asia:DS701-799.9 - China:DS781-796 - Local history and description",17316,"Q - Science:QK - Botany:QK1-474.5 - General (incl geographical distribution)",17249,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors:PS991-3390 - 19th century",17134,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature",17092,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT2660-2688 - 1961-2000",17027,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4601-4890 - Dravidian languages",17002,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations",16858,"T - Technology:TL - Motor Vehicles, Aeronautics, Astronautics",16829,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description",16822,"P - Language & Literature:PR - English Literature:PR6050-6076 - 1961-2000",16796,"P - Language & Literature:PR - English Literature:PR3291-3785 - 17th and 18th centuries (1640-1770)",16772,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4301-4470 - Mon-Khmer (Mon-Anam) languages:PL4371-4379 - Vietnamese.  Annamese",16711,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK7800-8360 - Electronics",16687,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9400-9999 - Provincial, local, colonial, etc.:PQ9500-9698.436 - Brazil",16619,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature",16582,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS133-151 - Jews outside of Palestine",16499,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure",16429,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B108-708 - Ancient",16349,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL700-889 - Japanese literature:PL784-866 - Individual authors and works",16233,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew",16181,"Q - Science:QH - Natural History, Biology:QH1-278.5 - Natural history (General):QH1-199.5 - General (incl nature conservation, geographical distribution)",16171,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History",16148,"H - Social Sciences:HA - Statistics",15918,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK2030-2142 - Hindi, Hindustani literatures",15869,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2219.3-3030 - Special regions or countries",15787,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861",15783,"G - Geography, Anthropology, Recreation:GR - Folklore",15743,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament",15568,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History",15513,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature",15358,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6350-6940.7 - Trade unions.  Labor unions.  Workers' associations",15163,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade",15057,"Q - Science:QE - Geology:QE1-350.62 - General (incl geographical divisions)",15038,"P - Language & Literature:PE - English Languages",14959,"Q - Science:QA - Mathematics:QA71-90 - Instruments and machines:QA75-76.95 - Calculating machines:QA75.5-76.95 - Electronic computers.  Computer science:QA76.75-76.765 - Computer software",14945,"H - Social Sciences:HB - Economic Theory, Demography:HB848-3697 - Demography.  Population.  Vital events",14936,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865",14932,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation)",14893,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G5670-8904 - Eastern Hemisphere.  Eurasia, Africa, etc.",14779,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS556-559.93 - Vietnam.  Annam",14764,"B - Philosophy, Psychology, Religion:BJ - Ethics",14756,"H - Social Sciences:HM - Sociology:HM1-299 - These are obsolete numbers no longer used by the Library of Congress",14653,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries",14650,"P - Language & Literature:PR - English Literature:PR2199-3195 - English renaissance (1500-1640)",14563,"Q - Science:QA - Mathematics:QA150-272.5 - Algebra",14532,"Q - Science:QB - Astronomy",14386,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ7501-8517 - Arabic literature:PJ7695.8-7976 - Individual authors or works",14363,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.",14350,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6251-6773.55 - Crimes and offenses",14302,"K - Law:KE-KEZ - Canada",14071,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature",14027,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4265-4556 - Individual authors and works to 1400",14015,"L - Education:LA - History of education:LA410-2284 - Other regions or countries",13893,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL2250-3208 - Chinese literature:PL2450-2659 - Collections",13768,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life",13742,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking",13704,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3477-3490 - 1961-2000",13600,"T - Technology:TR - Photography",13584,"D - World History:DA-DR - Europe:DR - Balkan Peninsula",13326,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation",13304,"P - Language & Literature:PZ - Fiction and Juvenile Belles Lettres:PZ5-90 - Juvenile belles lettres",13256,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1799-2592 - 1700-ca. 1860/70",13200,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine",13188,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3475-3476 - 1917-1960",13142,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA21-885 - By region or country",13114,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography",13112,"Q - Science:QL - Zoology:QL360-599.82 - Invertebrates:QL461-599.82 - Insects",13074,"Q - Science:QP - Physiology:QP1-345 - General (incl influence of the environment)",12987,"D - World History:DS - Asia:DS561-589 - Thailand (Siam)",12779,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology",12692,"D - World History:DA-DR - Europe:DP - Iberian Peninsula",12652,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief",12501,"T - Technology:TS - Manufactures",12463,"K - Law:KE-KEZ - Canada:KE1-9450 - Federal law.  Common and collective provincial law",12431,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine",12405,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry",12387,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates:QL671-699 - Birds",12335,"M - Music:M - Music:M5-1480 - Instrumental music:M6-175.5 - One solo instrument",12313,"J - Political Science:JS - Local & Municipal Government",12248,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament",12167,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy",12160,"T - Technology:TX - Home Economics:TX642-840 - Cooking",12154,"T - Technology:TA - Engineering (General), Civil Engineering:TA401-492 - Materials of engineering and construction.  Mechanics of materials",11888,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA4170-7020 - Public buildings",11837,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865:E461-655 - The Civil War, 1861-1865",11802,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5549-5549.5 - Personnel management.  Employment management",11789,"H - Social Sciences:HA - Statistics:HA154-4737 - Statistical data",11783,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism",11756,"G - Geography, Anthropology, Recreation:GR - Folklore:GR99.6-390 - By region or country",11745,"T - Technology:TN - Mining Engineering, Metallurgy",11701,"Q - Science:QA - Mathematics:QA273-280 - Probabilities.  Mathematical statistics",11657,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases",11600,"N - Fine Arts:NB - Sculpture",11577,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors",11573,"K - Law:KZ - Law of nations",11498,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6050-6305 - Classes of labor",11471,"S - Agriculture:SD - Forestry",11470,"E-F - History of the Americas:E151-909 - United States:E184-185.98 - Elements in the population:E184.5-185.98 - Afro-Americans",11411,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors",11379,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History",11369,"D - World History:DS - Asia:DS401-486.8 - India (Bharat):DS433-481 - History",11367,"P - Language & Literature:P - Philology & Linguistics:P1-85 - General",11311,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS1200-1830 - Special parts of the Old Testament",11288,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN4840-5648 - By region or country",11216,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ2149-2551 - 19th century",11201,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2501-2659 - Brazil",11199,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration",11187,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country",11177,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1201-1392 - Mexico",11146,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain",11110,"J - Political Science:JZ - International relations",11094,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description",11037,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1651-1799 - Bengali",10888,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL2250-3208 - Chinese literature:PL2250-2443 - History and criticism",10872,"P - Language & Literature:PE - English Languages:PE1001-1693 - Modern English",10828,"N - Fine Arts:NC - Drawing, Design, Illustration",10803,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization",10792,"G - Geography, Anthropology, Recreation:GT - Manners & Customs",10715,"Q - Science:QA - Mathematics:QA440-699 - Geometry.  Trigonometry.  Topology",10628,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia",10441,"Q - Science:QP - Physiology:QP501-801 - Animal biochemistry",10372,"M - Music:MT - Instruction and study",10342,"U - Military Science:U - Military Science (General)",10313,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ5001-5060 - Literature",10312,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV8301-9920.7 - Penology.  Prisons.  Corrections",10293,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state",10291,"Q - Science:QC - Physics:QC1-75 - General",10281,"T - Technology:TL - Motor Vehicles, Aeronautics, Astronautics:TL500-777 - Aeronautics.  Aeronautical engineering",10190,"H - Social Sciences:HB - Economic Theory, Demography:HB71-74 - Economics as a science.  Relation to other subjects",10135,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9506-9624 - Mineral industries.  Metal trade",10053,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports",10045,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history",10040,"G - Geography, Anthropology, Recreation:GB - Physical Geography",10037,"P - Language & Literature:PN - Literature (General):PN45-57 - Theory.  Philosophy.  Esthetics",9954,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD7088-7252 - Social insurance.  Social security.  Pension",9849,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA670-690 - Local history and description",9765,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT210-3150 - National biography",9716,"P - Language & Literature:PS - Americal Literature:PS3600-3626 - 2001-",9715,"D - World History:DS - Asia:DS801-897 - Japan:DS833-891.5 - History",9713,"Q - Science:QC - Physics:QC170-197 - Atomic physics.  Constitution and properties of matter",9700,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK2151-2212 - Urdu literature",9672,"J - Political Science:JA - Political Science (General)",9656,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes",9647,"V - Naval Science",9601,"D - World History:D - History (General):D1-24.5 - General",9557,"N - Fine Arts:NB - Sculpture:NB60-1115 - History (incl collective biography)",9545,"Q - Science:QR - Microbiology",9532,"M - Music:M - Music:M5-1480 - Instrumental music:M1000-1075 - Orchestra",9492,"E-F - History of the Americas:F1-975 - United States - Regional:F116-130 - New York",9443,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration",9421,"H - Social Sciences:HF - Commerce:HF3000-4055 - By region or country",9418,"L - Education:LB - Theory & Practice of Education:LB1025-1050.75 - Teaching (Principles and practice)",9386,"J - Political Science:JX - International Law (obsolete classification):JX1901-1995 - International arbitration, organization, etc.",9285,"D - World History:DS - Asia:DS401-486.8 - India (Bharat):DS483-486.8 - Local history and description",9243,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX940-1745 - History (incl lives of popes)",9242,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR500-1510 - By region or country",9176,"Q - Science:QC - Physics:QC851-999 - Meteorology.  Climatology",9162,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E171-180 - General",9148,"S - Agriculture:SB - Plant Culture:SB183-317 - Field crops",9142,"J - Political Science:JC - Political Theory:JC571-605 - Purpose, functions, and relations of the state",9084,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1627-1853 - Folk, national and ethnic music",9059,"Q - Science:QL - Zoology:QL1-355 - General (incl geographical distribution)",9052,"Q - Science:QD - Chemistry:QD450-801 - Physical and theoretical chemistry",8941,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education",8914,"T - Technology:TX - Home Economics:TX341-641 - Nutrition.  Foods and food supply",8906,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD7260-7780.8 - Industrial hygiene. Industrial welfare",8903,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.)",8895,"T - Technology:TH - Building Construction",8893,"D - World History:DA-DR - Europe:DF - Greece",8855,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible",8826,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL1001-1960 - Chinese language",8808,"D - World History:D - History (General):D501-680 - World War I (1914-1918)",8764,"Q - Science:QD - Chemistry:QD241-441 - Organic chemistry",8713,"P - Language & Literature:PF - West Germanic Languages",8685,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education",8660,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ5001-5060 - Literature:PJ5050-5055.51 - Individual authors and works",8647,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476",8624,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK510-651 - Russia (Federation).  Russian S.F.S.R.",8557,"S - Agriculture:S - Agriculture (General):S21-400.5 - Documents and other collections",8554,"D - World History:DU - Oceania (South Seas)",8538,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-",8496,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4650-4705 - Biography and portraits",8412,"K - Law:KHA-KHW - South America",8376,"H - Social Sciences:HG - Finance:HG3810-4000 - Foreign exchange.  International finance.",8364,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons",8349,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-",8336,"H - Social Sciences:HG - Finance:HG201-1496 - Money",8266,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature",8262,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA7100-7884 - Domestic architecture.  Houses.  Dwellings",8242,"R - Medicine:RM - Therapeutics, Pharmacology",8239,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences",8232,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2547-2970 - Special parts of the New Testament",8231,"K - Law:KJ-KKZ - Europe:KK-KKC - Germany",8190,"P - Language & Literature:P - Philology & Linguistics:P87-96 - Communication.  Mass media",8182,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6600-6647 - Individual authors, 1868-1960",8172,"S - Agriculture:SH - Aquaculture, Fisheries, Angling",8159,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS114-128.2 - History",8156,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG1201-1749 - Serbo-Croatian",8136,"T - Technology:TR - Photography:TR624-835 - Applied photography",8136,"N - Fine Arts:NX - Arts in General",8126,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5410-5417.5 - Marketing.  Distribution of products",8071,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature",8044,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS556-559.93 - Vietnam.  Annam:DS557-559.9 - Vietnamese Conflict",7998,"T - Technology:TA - Engineering (General), Civil Engineering:TA1501-1820 - Applied optics.  Photonics",7985,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia",7947,"J - Political Science:JF - Political Institutions (General)",7888,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ2660-2686 - 1961-2000",7878,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science",7861,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ1499-1749 - East Asia (incl China, Japan, Korea)",7838,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E441-453 - Slavery in the United States.  Antislavery movements",7837,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures:PN1997-1997.85 - Plays, scenarios, etc.",7803,"D - World History:D - History (General):D204-475 - Modern history, 1453-",7783,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization",7745,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue",7708,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD201-500 - Water supply for domestic and industrial purposes",7673,"B - Philosophy, Psychology, Religion:BF - Psychology:BF309-499 - Consciousness.  Cognition",7663,"E-F - History of the Americas:F1001-1145.2 - British America - Canada",7660,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries",7659,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century",7654,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F3401-3619 - Peru",7653,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN700-890 - Prehistoric archaeology",7612,"R - Medicine:RJ - Pediatrics",7609,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1500-1527.8 - Dramatic music",7592,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870",7539,"K - Law:KJ-KKZ - Europe:KK-KKC - Germany:KK - Germany and West Germany",7534,"R - Medicine:RD - Surgery",7491,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism",7486,"D - World History:DS - Asia:DS901-937 - Korea",7485,"T - Technology:TC - Hydraulic engineering",7467,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4650-4705 - Biography and portraits:BX4700-4705 - Individual",7442,"E-F - History of the Americas:E11-143 - America:E75-99 - Indians of North America:E99 - Indian tribes and cultures",7430,"A - General:AP - Periodicals",7429,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG2397-3550 - By region or country",7421,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G5670-8904 - Eastern Hemisphere.  Eurasia, Africa, etc.:G7400-8198.54 - Asia",7417,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism",7374,"D - World History:DT - Africa:DT43-154 - Egypt",7345,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5601-5689 - Accounting.  Bookkeeping",7324,"T - Technology:TX - Home Economics:TX901-946.5 - Hospitality industry.  Hotels, clubs, restaurants, etc.  Food service",7319,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z8001-8999 - Personal bibliography",7318,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4800-4851 - Individual authors, 1900-1960",7301,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German",7275,"D - World History:DA-DR - Europe:DC - France:DC600-801 - Local history and description",7266,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism",7245,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9720-9975 - Manufacturing industries",7241,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature",7235,"Q - Science:QP - Physiology:QP351-495 - Neurophysiology and neuropsychology",7228,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL700-889 - Japanese literature:PL700-751.5 - History and criticism",7216,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNW - Indonesia",7181,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.",7116,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2801-3021 - Argentina",7115,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD3611-4730.9 - Industrial policy.  The state and industrial organization",7073,"Q - Science:QD - Chemistry:QD1-65 - General (incl alchemy)",7051,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music",7038,"N - Fine Arts:N - Visual arts:N7560-8266 - Special subjects of art",7038,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland",6999,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature",6964,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants",6961,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages",6948,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration",6937,"R - Medicine:R - Medicine (General):R131-687 - History of medicine.  Medical expeditions",6915,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS633-644.46 - History",6911,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages:PL3551-4001 - Tibeto-Burman languages",6907,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England",6874,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG6001-7446 - Polish",6837,"N - Fine Arts:NE - Print Media",6812,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL950-998 - Korean literature",6803,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern:B808-849 - Special topics and schools of philosophy",6744,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases",6744,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH540-549.5 - Ecology",6741,"S - Agriculture:S - Agriculture (General):S590-599.9 - Soils.  Soil science",6724,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions",6715,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9680-9714 - Mechanical industries",6676,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2709-2930.7 - Corporations",6674,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP1-68 - General",6603,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1119-1151 - By period",6578,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK112.8-264.8 - House of Romanov, 1613-1917",6553,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K1-36.5 - Periodicals",6550,"D - World History:DS - Asia:DS561-589 - Thailand (Siam):DS570.95-586 - History",6549,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature",6521,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History",6521,"G - Geography, Anthropology, Recreation:G - Geography (General):G149-180 - Travel.  Voyages and travels (General)",6520,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period",6498,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary",6471,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature",6454,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT165.5-169.9 - City planning",6415,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD4909-5100.9 - Wages",6381,"Q - Science:Q - Science (General):Q300-390 - Cybernetics",6370,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements",6368,"H - Social Sciences:HC - Economic History & Conditions:HC79 - Special topics",6316,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNQ - China (People's Republic, 1949-    )",6286,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4860-4886 - Individual authors, 1961-2000",6258,"D - World History:DS - Asia:DS651-689 - Philippines",6253,"H - Social Sciences:HE - Transportation & Communications:HE1001-5600 - Railroads.  Rapid transit systems",6228,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books",6204,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2400-4563 - Monasticism.  Religious orders",6178,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire",6166,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD7795-8027 - Labor policy.  Labor and the state",6166,"G - Geography, Anthropology, Recreation:GE - Environmental Sciences",6118,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC501-721 - Electricity",6081,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR160-481 - By period",6030,"Q - Science:QC - Physics:QC770-798 - Nuclear and particle physics.  Atomic energy.  Radioactivity",6028,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV85-525 - By region or country",6024,"C - Historical Sciences (Archaeology, Genealogy):CS - Genealogy",5990,"P - Language & Literature:PD - Germanic Languages",5986,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1401-1419 - Latin America (General)",5961,"J - Political Science:JX - International Law (obsolete classification):JX2001-6650 - International law",5941,"H - Social Sciences:HD - Industries, Land use, Labor:HD72-88 - Economic growth, development, planning",5931,"D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East",5921,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography",5917,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2001-2826 - Russian language",5910,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6650-6676 - Individual authors, 1961-2000",5909,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN5001-6199 - New York",5907,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life",5904,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece",5875,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics",5852,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period",5810,"T - Technology:TT - Handicrafts",5759,"S - Agriculture:SF - Animal Culture:SF521-539.8 - Bee culture",5756,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam",5713,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country",5700,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ767.8-792.2 - Children.  Child development",5692,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science",5691,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4900-5993 - By region or country",5653,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z3001-3496 - Asia",5643,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.)",5635,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law",5614,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French",5606,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ75-76.8 - Homosexuality.  Lesbianism",5604,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water",5598,"H - Social Sciences:HB - Economic Theory, Demography:HB75-130 - History of economics.  History of economic theory",5587,"Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams",5569,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages:PL3551-4001 - Tibeto-Burman languages:PL3851-4001 - Assam and Burma",5558,"M - Music:ML - Literature on music:ML112.8-158.8 - Bibliography",5555,"R - Medicine:RG - Gynecology & Obstetrics",5554,"R - Medicine:RC - Internal Medicine:RC254-282 - Neoplasms.  Tumors.  Oncology",5553,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN537-674 - Ethnic groups and races",5551,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA430-463 - Later Stuarts",5547,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK266-292 - Soviet regime, 1918-1991",5541,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL1790-1975 - China",5538,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ3800-3999 - Provincial, local, colonial, etc.",5492,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes",5489,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G5670-8904 - Eastern Hemisphere.  Eurasia, Africa, etc.:G5700-7342 - Europe",5488,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E183.7-183.9 - Diplomatic history.  Foreign and general relations.",5483,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1611-1624.8 - One solo voice",5478,"Q - Science:QB - Astronomy:QB1-139 - General",5476,"Q - Science:QK - Botany:QK504-638 - Cryptogams",5432,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals",5413,"U - Military Science:UB - Military administration",5389,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD233-257.4 - Revolution and Republic, 1918-",5386,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P201-299 - Comparative grammar",5355,"S - Agriculture:S - Agriculture (General):S419-482 - History",5350,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7500-7511 - Individual authors or works",5329,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates:QL700-739.8 - Mammals",5324,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1580-1799.4 - Dancing",5300,"J - Political Science:JC - Political Theory:JC348-497 - Forms of the state",5291,"P - Language & Literature:PR - English Literature:PR161-488 - By period",5257,"E-F - History of the Americas:E151-909 - United States:E151-169.12 - General",5243,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN537-674 - Ethnic groups and races:GN550-674 - By region or country",5237,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering",5226,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1241-1273 - Drama",5222,"Q - Science:QE - Geology:QE500-639.5 - Dynamic and structural geology",5209,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML198-360.6 - By region or country",5199,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast",5198,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-",5193,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z278-549 - Bookselling and publishing",5185,"D - World History:DS - Asia:DS901-937 - Korea:DS904.8-922.4642 - History",5181,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML1400-3275 - Vocal music",5175,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.):JL1850-3899 - South America",5154,"P - Language & Literature:PR - English Literature:PR6100-6126 - 2001-",5122,"D - World History:DS - Asia:DS501-518.9 - East Asia.  The Far East",5093,"D - World History:DS - Asia:DS801-897 - Japan:DS894.215-897 - Local history and description",5078,"B - Philosophy, Psychology, Religion:BR - Christianity:BR60-67 - Early Christian literature.  Fathers of the Church, etc.",5059,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education",5052,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000",5043,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG451-1496 - By region or country",5043,"Q - Science:QB - Astronomy:QB495-903 - Descriptive astronomy",5042,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC512-569.5 - Psychopathology",5026,"E-F - History of the Americas:E151-909 - United States:E184-185.98 - Elements in the population:E184.5-185.98 - Afro-Americans:E185.2-185.89 - Status and development since emancipation",5022,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages",4986,"S - Agriculture:SF - Animal Culture:SF481-507 - Poultry.  Eggs",4966,"N - Fine Arts:NA - Architecture:NA9000-9428 - Aesthetics of cities.  City planning and beautifying",4956,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States",4946,"G - Geography, Anthropology, Recreation:G - Geography (General):G149-180 - Travel.  Voyages and travels (General):G154.9-155.8 - Travel and state.  Tourism",4946,"R - Medicine:R - Medicine (General):R5-130.5 - General works",4944,"R - Medicine:RB - Pathology",4943,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description:DD801 - States, provinces, regions, etc., A-Z",4938,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books",4934,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK3700-4695 - Ceramics",4932,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD300-450 - Ontology",4919,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ1947-2147 - 18th century",4919,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5546-5548.6 - Office management",4914,"L - Education:LD - Individual Educational Institutions (U.S.)",4904,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH426-470 - Genetics",4882,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History",4880,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z729-875 - Library reports.  History.  Statistics",4860,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA4170-7020 - Public buildings:NA4590-5621 - Religious architecture",4827,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA643-645 - Disease (Communicable and noninfectious) and public health",4819,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-",4815,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description:DD901 - Other cities, towns, etc., A-Z",4810,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture",4793,"K - Law:KQ-KTZ - Africa",4778,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6271-6498 - Individual authors and works to 1700",4765,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation",4686,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNS - India",4679,"L - Education:LD - Individual Educational Institutions (U.S.):LD13-7251 - Universities.  Colleges",4639,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions:BV2750-3695 - Missions in individual countries",4636,"K - Law:KG-KGZ - Latin and Central America & the Caribbean",4634,"J - Political Science:JK - Political Institutions (United States):JK2403-9593 - State government",4622,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E171-180 - General:E173 - Sources and documents",4619,"K - Law:KJ-KKZ - Europe:KJE - Regional organization and integration.  Comparative law",4596,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML459-1380 - Instruments and instrumental music",4592,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP1-68 - General:BP50-68 - History",4591,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology",4577,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism",4569,"M - Music:M - Music:M2-2.3 - Musical sources",4561,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ793-799.2 - Youth.  Adolescents.  Teenagers",4554,"Q - Science:QA - Mathematics:QA801-939 - Analytic mechanics",4554,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF951-997.5 - Diseases of special classes of animals",4548,"C - Historical Sciences (Archaeology, Genealogy):CS - Genealogy:CS42-2209 - By region or country",4504,"J - Political Science:JN - Political Institutions (Europe):JN101-1371 - Great Britain",4503,"R - Medicine:RS - Pharmacy & Materia Medica",4503,"E-F - History of the Americas:E151-909 - United States:E201-298 - The Revolution, 1775-1783",4501,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2251-2299 - Colombia",4501,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD58 - Location of industry",4499,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology",4495,"L - Education:L - Education (General)",4488,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B720-765 - Medieval",4482,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance",4478,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD921-4280 - Archives",4463,"D - World History:DA-DR - Europe:DG - Italy:DG975 - Other cities (non-metropolitan), provinces, etc., A-Z",4460,"N - Fine Arts:N - Visual arts:N400-3990 - Art museums, galleries, etc.",4456,"Q - Science:QC - Physics:QC350-467 - Optics.  Light",4425,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian)",4423,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL51-65 - Philosophy & Psychology of Religion.",4412,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD8039 - By industry or trade",4400,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD8039 - By industry or trade:HD8038 - Professions (General).  Professional employees",4400,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles",4379,"J - Political Science:JS - Local & Municipal Government:JS6950-7520 - Asia",4376,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia",4362,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.",4353,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA670-690 - Local history and description:DA670 - Counties, regions, etc., A-Z",4343,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL501-699 - Japanese language",4341,"T - Technology:TA - Engineering (General), Civil Engineering:TA630-695 - Structural engineering (General)",4326,"J - Political Science:JC - Political Theory:JC131-273 - Modern state",4319,"N - Fine Arts:NX - Arts in General:NX440-632 - History of the arts",4297,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT390-395 - Regional planning",4294,"Q - Science:QK - Botany:QK710-899 - Plant physiology",4294,"R - Medicine:RA - Public Aspects of Medicine:RA960-1000.5 - Medical centers.  Hospitals.  Dispensaries.  Clinics",4273,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1990-1992.92 - Broadcasting",4270,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children",4267,"K - Law:KJ-KKZ - Europe:KJC - Regional comparative and uniform law",4260,"T - Technology:TP - Chemical Technology:TP500-660 - Fermentation industries.  Beverages.  Alcohol",4239,"H - Social Sciences:HJ - Public Finance:HJ241-1620 - By region or country",4225,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK3591-4485 - Sanskrit",4215,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period",4210,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA400-429 - Civil War and Commonwealth, 1642-1660",4207,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General",4201,"Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams:QK495 - Angiosperms",4188,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern",4178,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period",4175,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK501-868 - Executive branch",4158,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government",4153,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism",4152,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH573-671 - Cytology",4149,"Q - Science:QM - Human anatomy",4137,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4675-4734 - Individual authors, 1701-1900",4129,"J - Political Science:JZ - International relations:JZ1305-2060 - Scope of international relations. Political theory. Diplomacy",4112,"E-F - History of the Americas:E151-909 - United States:E184-185.98 - Elements in the population:E184.5-185.98 - Afro-Americans:E185.96-185.98 - Biography.  Genealogy",4108,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ8000-9800 - Special modifications, sects, etc.",4093,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV5800-5840 - Drug habits.  Drug abuse",4091,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD921-4280 - Archives:CD995-4280 - History and statistics",4066,"S - Agriculture:SF - Animal Culture:SF191-275 - Cattle",4065,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland",4056,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ5061-5192 - Other languages used by Jews",4054,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3450-3470 - 1870-1917",4053,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland",4049,"T - Technology:TS - Manufactures:TS155-194 - Production management.  Operations management",4042,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography",4042,"A - General:AY - Yearbooks, Almanacs, Directories",4040,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS351-929 - Freemasons",4040,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD921-4280 - Archives:CD995-4280 - History and statistics:CD1000-4280 - By region or country",4035,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6700-6790 - Comic books, strips, etc.",4030,"B - Philosophy, Psychology, Religion:BF - Psychology:BF712-724.85 - Developmental psychology",4020,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law",4016,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian",4004,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education",3998,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA2001-2915 - Latin philology and language",3987,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR160-481 - By period:BR290-481 - Modern period",3983,"B - Philosophy, Psychology, Religion:BM - Judaism:BM1-449 - General",3981,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA1-199 - Classical philology",3974,"J - Political Science:JN - Political Institutions (Europe):JN1-97 - General",3964,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ5061-5192 - Other languages used by Jews:PJ5111-5192 - Yiddish",3954,"J - Political Science:JN - Political Institutions (Europe):JN3201-4944 - Germany",3942,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV861-1017 - Ball games (Baseball, football, golf, etc.)",3941,"R - Medicine:RJ - Pediatrics:RJ370-550 - Diseases of children and adolescents",3930,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9502-9502.5 - Energy industries.  Energy policy.  Fuel trade",3929,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT198-590 - Christology",3926,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography",3924,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ200-620 - India",3921,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2301-2349 - Venezuela",3913,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG4001-5146 - Czech",3905,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F3301-3359 - Bolivia",3904,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL1790-1975 - China:BL1899-1942.85 - Taoism",3897,"P - Language & Literature:PH - Uralic & Basque Languages",3891,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL700-889 - Japanese literature:PL752-783 - Collections",3889,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4061-4570 - Doctrinal and systematic Buddhism",3871,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ760-767.7 - Family size",3860,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections",3855,"G - Geography, Anthropology, Recreation:GC - Oceanography",3854,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages",3846,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries",3840,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History",3831,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1201-1392 - Mexico:F1218.5-1221 - Antiquities. Indians",3830,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania)",3830,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P121-149 - Science of language (Linguistics)",3830,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1001-1035 - General",3823,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS1110-1199 - Works about the Old Testament",3818,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions",3816,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1518-1697 - Individual ethics.  Character.  Virtue",3808,"A - General:AY - Yearbooks, Almanacs, Directories:AY30-1730 - Almanacs",3803,"B - Philosophy, Psychology, Religion:BC - Logic",3801,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages",3799,"D - World History:DT - Africa:DT365-469 - Eastern Africa",3789,"D - World History:D - History (General):D839-860 - Post-war history (1945-    )",3788,"N - Fine Arts:NC - Drawing, Design, Illustration:NC50-266 - History of drawing",3776,"T - Technology:TL - Motor Vehicles, Aeronautics, Astronautics:TL787-4050 - Astronautics.  Space travel",3735,"E-F - History of the Americas:F1-975 - United States - Regional:F856-870 - California",3730,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD69 - Other (incl business consultants, capacity, size of industries, etc.)",3723,"K - Law:KJ-KKZ - Europe:KJV-KJW - France",3723,"L - Education:LA - History of education:LA201-398 - United States",3722,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3469-3541 - Popular music",3721,"S - Agriculture:SB - Plant Culture:SB450.9-467.8 - Gardens and gardening",3699,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-",3692,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL689-980 - European.  Occidental",3686,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT2400-3390.5 - Customs relative to private life",3675,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA909-965 - History",3672,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA909-965 - History:DA930-965 - By period",3672,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB101-879 - Local history and description",3670,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century",3670,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPV - Vietnam",3668,"K - Law:KJ-KKZ - Europe:KJV-KJW - France:KJV - National laws",3666,"J - Political Science:JX - International Law (obsolete classification):JX1305-1598 - Foreign relations",3661,"T - Technology:TN - Mining Engineering, Metallurgy:TN799.5-948 - Nonmetallic minerals",3659,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ71-1185 - History and general works",3628,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism",3627,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry",3618,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ1100-3340 - Tripiaka (Canonical literature)",3610,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC346-429 - Neurology.  Diseases of the nervous system",3610,"E-F - History of the Americas:F1-975 - United States - Regional:F61-75 - Massachusetts",3597,"N - Fine Arts:NA - Architecture:NA2500-2599 - General works",3595,"L - Education:LB - Theory & Practice of Education:LB5-45 - General",3591,"P - Language & Literature:PN - Literature (General):PN3311-3503 - Prose.  Prose fiction",3575,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare",3559,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3544-3776 - Folk, national, and ethnic music",3557,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology",3556,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators",3546,"J - Political Science:JF - Political Institutions (General):JF1338-2112 - Public administration",3545,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2400-4563 - Monasticism.  Religious orders:BX2890-4192 - Religious orders of men",3542,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language",3538,"L - Education:LB - Theory & Practice of Education:LB1555-1602 - Elementary or public school education",3529,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1111-1143.2 - Sacred books.  Sources",3524,"Q - Science:QD - Chemistry:QD71-142 - Analytical chemistry",3523,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865:E456-459 - Lincoln's administrations, 1861-April 15, 1865",3516,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1990-1992.92 - Broadcasting:PN1992-1992.92 - Television broadcasts",3515,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church",3505,"T - Technology:TP - Chemical Technology:TP200-248 - Chemicals (Manufacture, use, etc.)",3491,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD143-237 - Epistemology.  Theory of knowledge",3483,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2201-2239 - General",3469,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics",3467,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change",3466,"H - Social Sciences:HJ - Public Finance:HJ9-99.8 - Periodicals.  Serials.  By region or country",3464,"N - Fine Arts:N - Visual arts:N7420-7525.8 - General works",3464,"D - World History:DS - Asia:DS67-79.9 - Iraq (Assyria, Babylonia, Mesopotamia)",3461,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature",3445,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ1710-1935 - 17th century",3440,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving",3439,"J - Political Science:JN - Political Institutions (Europe):JN6500-6598 - Soviet Union.  Russia.  Former Soviet Republics",3430,"R - Medicine:RC - Internal Medicine:RC109-216 - Infectious and parasitic diseases",3430,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History",3427,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6146.5-6231 - Wit and humor",3421,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL950-998 - Korean literature:PL986-993 - Individual authors and works",3397,"P - Language & Literature:PR - English Literature:PR750-890 - Prose",3392,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia",3390,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP188-190 - Islamic religious life",3389,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature",3389,"H - Social Sciences:HM - Sociology:HM1001-1281 - Social psychology",3377,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL5501-6135 - Philippine languages",3377,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2020-2101.5 - Choruses",3368,"H - Social Sciences:HE - Transportation & Communications:HE6000-7500 - Postal service.  Stamps.  Philately",3366,"B - Philosophy, Psychology, Religion:BH - Aesthetics",3365,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP285-402 - Local history and description",3361,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA8001-8595 - Medieval and modern Latin literature",3356,"D - World History:DS - Asia:DS651-689 - Philippines:DS667-686.62 - History",3355,"M - Music:M - Music:M3-3.3 - Collected works of individual composers",3352,"B - Philosophy, Psychology, Religion:BF - Psychology:BF636-637 - Applied psychology",3345,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F3051-3285 - Chile",3340,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law",3334,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8130-8280.7 - By region or country",3329,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT500-2370 - Costume.  Dress.  Fashion",3321,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania)",3316,"H - Social Sciences:HF - Commerce:HF1701-2701 - Tariff.  Free trade.  Protectionism",3313,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2280-2545 - Works about the New Testament",3311,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1170-1228 - Poetry",3276,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK3591-4485 - Sanskrit:PK3791-3799 - Individual authors and works",3272,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1811-2351 - Special classes of banks and financial institutions",3271,"J - Political Science:JA - Political Science (General):JA71-80 - Theory.  Relations to other subjects",3255,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV8301-9920.7 - Penology.  Prisons.  Corrections:HV9441-9920.7 - By region or country",3245,"D - World History:DS - Asia:DS701-799.9 - China:DS798.92-799.9 - Taiwan",3244,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA670-690 - Local history and description:DA690 - Other cities, towns, etc., A-Z",3241,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters",3237,"D - World History:DA-DR - Europe:DC - France:DC600-801 - Local history and description:DC611 - Regions, provinces, departments, etc., A-Z",3236,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature",3234,"P - Language & Literature:PN - Literature (General):PN101-245 - Authorship",3233,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS527-530.9 - Burma",3232,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ1-4625 - Coins",3228,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB305-430 - By period",3218,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1799-2592 - 1700-ca. 1860/70:PT1891-2239 - Goethe",3216,"D - World History:D - History (General):D111-203 - Medieval history",3213,"T - Technology:TA - Engineering (General), Civil Engineering:TA349-359 - Mechanics of engineering.  Applied mechanics",3205,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA566-592 - 20th century",3202,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland)",3201,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.",3200,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature:PT236-405 - Modern",3200,"K - Law:KB-KBU - Religious Law",3199,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE561-971 - Shipping",3191,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1501-1542 - Agricultural classes",3186,"M - Music:ML - Literature on music:ML55-89 - Aspects of the field of music as a whole",3182,"J - Political Science:JS - Local & Municipal Government:JS300-1583 - United States",3169,"H - Social Sciences:HG - Finance:HG4001-4285 - Finance management.  Business finance. Corporation finance",3154,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC189-214.53 - Educational sociology",3148,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC361-424 - 20th century",3147,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA129-260 - Early and medieval to 1485",3138,"P - Language & Literature:PN - Literature (General):PN80-99 - Criticism",3138,"S - Agriculture:SK - Hunting Sports",3136,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ251-799 - History",3128,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia",3127,"Q - Science:QC - Physics:QC851-999 - Meteorology.  Climatology:QC980-999 - Climatology and weather",3125,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH359-425 - Evolution",3118,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV1551-3024 - People with disabilities",3109,"P - Language & Literature:PC - Romance Languages:PC4001-4977 - Spanish",3105,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1300-1595 - Old French literature",3100,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5381-5386 - Vocational guidance.  Career devlopment",3088,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey",3076,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ1060-1064 - Aged.  Gerontology (Social aspects). Retirement",3072,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1100-1297 - Collections",3053,"L - Education:LB - Theory & Practice of Education:LB1101-1139 - Child study",3052,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP70-80 - Biography",3048,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2340.8-2346.5 - Small and medium-sized businesses, artisans, handicrafts, trades",3042,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC666-701 - Diseases of the circulatory (Cardiovascular) system",3041,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7601-7795 - Friends.  Society of Friends.  Quakers",3033,"P - Language & Literature:PR - English Literature:PR750-890 - Prose:PR821-890 - Prose fiction.  The novel",3024,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description",2995,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates:QL614-639.8 - Fishes",2991,"B - Philosophy, Psychology, Religion:BF - Psychology:BF511-593 - Affection.  Feeling.  Emotion",2990,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7500-7511 - Individual authors or works:PT7510-7511 - 19th-20th centuries",2989,"K - Law:KLA-KLW - Eurasia",2988,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK7800-8360 - Electronics:TK7885-7895 - Computer engineering.  Computer hardware",2988,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions",2985,"Q - Science:QL - Zoology:QL750-795 - Animal behavior",2982,"R - Medicine:RM - Therapeutics, Pharmacology:RM300-666 - Drugs and their actions",2979,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D410-475 - 20th century",2975,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages:PL21-396 - Turkic languages",2970,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2951-3575 - Cooperation.  Cooperative societies",2969,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period",2963,"D - World History:DA-DR - Europe:DQ - Switzerland",2954,"L - Education:LB - Theory & Practice of Education:LB51-885 - Systems of individual educators and writers",2953,"D - World History:DU - Oceania (South Seas):DU520-950 - Smaller island groups",2950,"J - Political Science:J - General Legislative & Executive Papers",2949,"T - Technology:TS - Manufactures:TS200-770 - Metal manufactures.  Metalworking",2948,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT851-1445 - Slavery",2936,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ840-999 - Biography",2935,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2591-2610 - Pahari",2932,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3001-3026 - Special periods",2925,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB3011-3095 - School management and discipline",2911,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics",2898,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private)",2894,"S - Agriculture:SD - Forestry:SD131-247.5 - History of forestry.  Forest conditions",2887,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG51-70 - Local history and description",2869,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1635-1702 - Utilization and culture of special classes of lands",2855,"R - Medicine:RA - Public Aspects of Medicine:RA1190-1270 - Toxicology.  Poisons",2853,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2801-2891 - Sinhalese (Singhalese)",2842,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-",2840,"M - Music:ML - Literature on music:ML47-54.8 - Librettos. Texts. Scenarios",2840,"N - Fine Arts:N - Visual arts:N61-72 - Theory.  Philosophy.  Aesthetics of the visual arts",2837,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works",2832,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4650-4705 - Biography and portraits:BX4700-4705 - Individual:BX4700 - Saints",2796,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ840-999 - Biography:BQ860-999 - Individual",2795,"D - World History:DT - Africa:DT43-154 - Egypt:DT74-107.87 - History",2788,"Q - Science:QM - Human anatomy:QM1-511 - General",2781,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA773-788 - Personal health and hygiene",2771,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP171-173 - Relation of Islam to other religions",2764,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB101-879 - Local history and description:DB101-785 - Provinces, regions, etc.",2749,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ210.2-211.47 - Mechanical devices and figures.  Automata.  Ingenious mechanisms. Robots (General)",2737,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3224-3278 - Individual and state",2736,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT3400-5090 - Customs relative to public and social life",2732,"B - Philosophy, Psychology, Religion:BF - Psychology:BF173-175.5 - Psychoanalysis",2724,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1001-3208 - Chinese language and literature:PL2250-3208 - Chinese literature:PL3030-3208 - Provincial, local, colonial, etc.",2722,"Q - Science:QB - Astronomy:QB495-903 - Descriptive astronomy:QB500.5-785 - Solar system",2716,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK265-265.95 - Revolution, 1917-1921",2712,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2361-3192.7 - By region or country",2711,"D - World History:D - History (General):D1050-2027 - History",2705,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS360-380 - Prose",2698,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica",2695,"Q - Science:QR - Microbiology:QR1-74.5 - General",2689,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements",2683,"J - Political Science:JK - Political Institutions (United States):JK1717-2217 - Political rights.  Practical politics",2682,"B - Philosophy, Psychology, Religion:BM - Judaism:BM1-449 - General:BM150-449 - History",2681,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature",2680,"D - World History:DA-DR - Europe:DG - Italy:DG691-817.3 - Central Italy",2674,"H - Social Sciences:HB - Economic Theory, Demography:HB131-147 - Methodology",2671,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900",2670,"T - Technology:TL - Motor Vehicles, Aeronautics, Astronautics:TL1-484 - Motor vehicles.  Cycles",2669,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3950-4806.5 - Exceptional children and youth.  Special education",2668,"D - World History:DS - Asia:DS376-392.2 - Pakistan",2663,"D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East:DS61-66 - History",2661,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4561-4664 - Individual authors, 1400-1700",2653,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK6400-8459 - Metalwork",2651,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC120.8-130 - 1589-1715.  Henri IV, Louis XIII, Louis XIV",2650,"J - Political Science:JN - Political Institutions (Europe):JN2301-3007 - France",2649,"J - Political Science:JS - Local & Municipal Government:JS3000-6949.89 - Europe",2648,"E-F - History of the Americas:E11-143 - America:E51-73 - Pre-Columbian America.  The Indians",2647,"R - Medicine:R - Medicine (General):R856-857 - Biomedical engineering.  Electronics.  Instrumentation",2645,"L - Education:LB - Theory & Practice of Education:LB1050.9-1091 - Educational psychology",2627,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE400-773 - History of printmaking",2627,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6958.5-6976 - Industrial relations",2626,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature",2622,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2547-2970 - Special parts of the New Testament:BS2640-2765.6 - Epistles of Paul",2614,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects",2611,"D - World History:DS - Asia:DS67-79.9 - Iraq (Assyria, Babylonia, Mesopotamia):DS70.82-79.9 - History",2610,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works",2609,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F3701-3799 - Ecuador",2600,"M - Music:MT - Instruction and study:MT90-146 - Analysis and appreciation of musical works",2595,"N - Fine Arts:N - Visual arts:N1-58 - General",2595,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques",2592,"D - World History:D - History (General):D1050-2027 - History:D900-2009 - Europe (General)",2586,"T - Technology:TF - Railroad Engineering & Operation",2582,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books:BP100-134 - Koran",2577,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1501-1695 - Middle High German, ca. 1050-1450/1500",2577,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5801-6182 - Advertising",2573,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK1001-1841 - Production of electric energy or power.  Powerplants.  Central stations",2573,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature",2569,"Q - Science:QE - Geology:QE701-760 - Paleontology",2566,"J - Political Science:JX - International Law (obsolete classification):JX220-1195 - Collections, cases, etc.  By country",2565,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA40-89.6 - Political, military, naval, and Air Force history. Foreign relations",2561,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History",2561,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature",2559,"T - Technology:T - Technology (General):T351-385 - Mechanical drawing.  Engineering graphics",2550,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT98-180 - God",2529,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1530-1609 - Choruses",2525,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements:DS595.8-597.215 - History",2522,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education",2514,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.1-646.15 - Sumatra",2513,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB950-990.5 - Pest control and treatment of diseases.  Plant protection",2513,"T - Technology:TS - Manufactures:TS1300-1865 - Textile industries",2508,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG2900-2998 - General",2497,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD62 - Standardization.  Simplification.  Waste",2494,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA8001-8595 - Medieval and modern Latin literature:PA8200-8595 - Individual authors",2492,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN695-779 - Modern",2491,"H - Social Sciences:HB - Economic Theory, Demography:HB131-147 - Methodology:HB135-147 - Mathematical economics.  Quantitative methods",2490,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization",2490,"P - Language & Literature:PR - English Literature:PR1803-2165 - Anglo-Norman period.  Early English.  Middle",2485,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6774-7220.5 - Crimes and criminal classes",2482,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865:E461-655 - The Civil War, 1861-1865:E491-586 - Armies.  Troops",2477,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS360-380 - Prose:PS370-380 - Prose fiction",2470,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary",2458,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8035-8844 - Special languages (alphabetically)",2458,"P - Language & Literature:PC - Romance Languages:PC1-400 - General",2456,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4200-4317 - Preaching.  Homiletics",2454,"R - Medicine:R - Medicine (General):R735-854 - Medical education.  Medical schools.  Research",2454,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9261 - Individual authors, 1701-1960",2451,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography",2440,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ212-225 - Control engineering systems.  Automatic machinery (General)",2439,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD58 - Location of industry:HD58.7-58.95 - Organizational behavior, change and effectiveness.  Corporate culture",2436,"R - Medicine:RJ - Pediatrics:RJ370-550 - Diseases of children and adolescents:RJ499-507 - Mental disorders.  Child psychiatry",2434,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK501-868 - Executive branch:JK631-868 - Civil Service.  Departments and agencies",2432,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology",2419,"D - World History:DS - Asia:DS561-589 - Thailand (Siam):DS588-589 - Local history and description",2413,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education",2409,"E-F - History of the Americas:F1-975 - United States - Regional:F146-160 - Pennsylvania",2403,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology",2396,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH501-531 - Life",2396,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain",2395,"H - Social Sciences:HE - Transportation & Communications:HE331-380 - Traffic engineering.  Roads and highways. Streets",2392,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD878-894 - Special types of environment",2390,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections",2385,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law",2384,"H - Social Sciences:HB - Economic Theory, Demography:HB3711-3840 - Business cycles.  Economic fluctuations",2376,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere",2374,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT695-749 - Creation",2372,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD5306-5474 - Labor disputes.  Strikes and lockouts",2372,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ226-317 - Modern",2372,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845",2366,"K - Law:KD-KDK - The United Kingdom and Ireland:KDC - Scotland",2366,"P - Language & Literature:PR - English Literature:PR500-614 - Poetry",2364,"D - World History:DS - Asia:DS251-326 - Iran (Persia)",2361,"E-F - History of the Americas:F1-975 - United States - Regional:F381-395 - Texas",2357,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1421-1440 - Central America",2357,"H - Social Sciences:HX - Socialism, Communism, Anarchism:HX519-550 - Communism/socialism in relation to special topics",2357,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB409-413 - Culture of individual plants",2356,"Q - Science:QD - Chemistry:QD146-197 - Inorganic chemistry",2353,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB608 - Individual or types of plants or trees",2353,"K - Law:KJ-KKZ - Europe:KKH - Italy",2352,"T - Technology:TP - Chemical Technology:TP368-456 - Food processing and manufacture",2351,"J - Political Science:JA - Political Science (General):JA81-84 - History",2346,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ1870-3981 - Africa",2343,"E-F - History of the Americas:E11-143 - America:E101-135 - Discovery of America and early explorations",2340,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA90-125 - Antiquities.  Social life and customs.  Ethnography",2338,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA20-27.5 - General",2337,"T - Technology:TN - Mining Engineering, Metallurgy:TN600-799 - Metallurgy",2328,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG555-575 - 1871-1947.  United Italy (Monarchy)",2316,"G - Geography, Anthropology, Recreation:G - Geography (General):G575-890 - Arctic and Antarctic regions",2310,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK8800-9505.5 - Textiles",2305,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering",2297,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC475-489 - Therapeutics.  Psychotherapy",2292,"N - Fine Arts:NA - Architecture:NA1-60 - General",2286,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB421-439.8 - Classes of plants",2284,"D - World History:DS - Asia:DS401-486.8 - India (Bharat):DS430-432 - Ethnography.  Sects",2283,"D - World History:DS - Asia:DS201-248 - Arabian Peninsula.  Saudi Arabia",2281,"G - Geography, Anthropology, Recreation:G - Geography (General):G369-503 - Special voyages and travels",2281,"A - General:AM - Museums, Collectors & Collecting",2279,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV8301-9920.7 - Penology.  Prisons.  Corrections:HV9051-9230.7 - The juvenile offender.  Juvenile delinquency. Reform schools, etc.",2276,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6400-6525 - Proverbs",2274,"T - Technology:TT - Handicrafts:TT490-695 - Clothing manufacture.  Dressmaking.  Tailoring",2273,"D - World History:DT - Africa:DT17-39 - History",2267,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC71-120.4 - Education and the state",2267,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL689-980 - European.  Occidental:BL700-820 - Classical (Etruscan, Greek, Roman)",2261,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ7530-7950 - Tibetan Buddhism (Lamaism)",2257,"N - Fine Arts:NC - Drawing, Design, Illustration:NC1300-1766 - Pictorial humor, caricature, etc.",2257,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB621-795 - Plant pathology",2257,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church",2256,"B - Philosophy, Psychology, Religion:BR - Christianity:BR115 - Christianity in relation to special subjects",2253,"Q - Science:QC - Physics:QC770-798 - Nuclear and particle physics.  Atomic energy.  Radioactivity:QC793-793.5 - Elementary particle physics",2252,"H - Social Sciences:HA - Statistics:HA154-4737 - Statistical data:HA175-473 - By region or country",2251,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship",2250,"P - Language & Literature:PC - Romance Languages:PC3801-3976 - Catalan",2249,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG3801-3987 - Ukrainian",2249,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA670-690 - Local history and description:DA675-689 - London",2237,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries",2237,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL301-398 - Iceland",2236,"P - Language & Literature:PC - Romance Languages:PC1001-1977 - Italian",2236,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6146.5-6231 - Wit and humor:PN6157-6222 - By region or country",2227,"P - Language & Literature:PN - Literature (General):PN4001-4355 - Oratory.  Elocution, etc.",2224,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History",2221,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB818-945 - Economic entomology",2221,"N - Fine Arts:NA - Architecture:NA2695-2793 - Architectural drawing and design",2218,"H - Social Sciences:HJ - Public Finance:HJ2005-2216 - Income and expenditure.  Budget",2211,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML162-197 - By period",2211,"R - Medicine:R - Medicine (General):R723-726 - Medical philosophy.  Medical ethics",2204,"N - Fine Arts:NK - Decorative Arts:NK1160-1590 - Decoration and ornament.  Design",2199,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC131-138 - 1715-1789.  18th century.  Louis XV, Louis XVI",2196,"S - Agriculture:SB - Plant Culture:SB469-476.4 - Landscape gardening.  Landscape architecture",2196,"D - World History:DS - Asia:DS488-490 - Sri Lanka",2194,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1188-1295 - Religious ethics",2187,"Q - Science:QR - Microbiology:QR180-189.5 - Immunology",2176,"E-F - History of the Americas:F1-975 - United States - Regional:F590.3-596.3 - The West.  Trans-Mississippi Region.  Great Plains",2173,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books:BP100-134 - Koran:BP130-134 - Works about the Koran",2170,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z675 - Classes of libraries",2163,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP160-165 - General works on Islam",2162,"K - Law:KHA-KHW - South America:KHD - Brazil",2160,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC2700-3708 - Dialects.  Provincialisms",2159,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works",2158,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh",2157,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1751-1854.9 - Cuba",2156,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL1-50 - Religion (General)",2144,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z881-977 - Library catalogs and bulletins",2138,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ755.7-759.92 - Parents.  Parenthood",2137,"S - Agriculture:SB - Plant Culture:SB320-353.5 - Vegetables",2132,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK508-508.95 - Ukraine",2131,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1300-1595 - Old French literature:PQ1411-1545 - To 1350/1400",2130,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS631-632 - Ethnography",2124,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates:QL640-669.3 - Reptiles and amphibians",2124,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology",2123,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT198-590 - Christology:BT296-500 - Life of Christ",2119,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD5650-5660 - Employee participation in management. Employee ownership.  Industrial democracy. Works councils",2116,"R - Medicine:RD - Surgery:RD520-599.5 - Surgery by region, system, or organ",2116,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV7590-8339.7 - Europe",2110,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP285-402 - Local history and description:DP302 - Provinces, regions, ets., A-Z",2107,"M - Music:M - Music:M5-1480 - Instrumental music:M1100-1160 - String orchestra",2107,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ840-999 - Biography:BQ860-999 - Individual:BQ940-999 - Other",2105,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy",2099,"T - Technology:TT - Handicrafts:TT697-927 - Home arts.  Homecrafts",2099,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1100-1141 - General",2098,"D - World History:DS - Asia:DS36-39.2 - Arab countries",2096,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure",2093,"T - Technology:TA - Engineering (General), Civil Engineering:TA329-348 - Engineering mathematics.  Engineering analysis",2090,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements:DS597.22-599 - Local history and description",2089,"H - Social Sciences:HB - Economic Theory, Demography:HB522-715 - Income.  Factor shares",2088,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC72-81 - Philosophy.  Theory",2085,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ8000-9800 - Special modifications, sects, etc.:BQ9250-9519 - Zen Buddhism",2084,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK9001-9401 - Nuclear engineering.  Atomic power",2083,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3950-4806.5 - Exceptional children and youth.  Special education:LC4001-4806.5 - Children and youth with disabilities.  Learning disabled children and youth",2081,"D - World History:DT - Africa:DT43-154 - Egypt:DT56.8-69.5 - Antiquities",2080,"D - World History:DA-DR - Europe:DD - Germany:DD258-262 - West Germany",2073,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ1600-1709 - 16th century",2072,"N - Fine Arts:NX - Arts in General:NX1-260 - General",2071,"Q - Science:QK - Botany:QK900-989 - Plant ecology",2070,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America",2059,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering",2047,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC512-569.5 - Psychopathology:RC554-569.5 - Personality disorders.  Behavior problems",2041,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions",2039,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR160-481 - By period:BR160-275 - Early and medieval",2037,"H - Social Sciences:HM - Sociology:HM831-901 - Social change",2036,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2561-2579.5 - Oriya",2036,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1-80 - Literary history and criticism",2032,"D - World History:DA-DR - Europe:DE - The Greco-Roman World",2027,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law",2027,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving",2025,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK1931-1970 - Hindi language",2025,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK751-781 - Siberia",2024,"T - Technology:TP - Chemical Technology:TP155-156 - Chemical engineering",2024,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period",2022,"Q - Science:QC - Physics:QC251-338.5 - Heat",2022,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ101-440.7 - Prostitution",2019,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL2195-2228 - Japan",2018,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania",2013,"Q - Science:QC - Physics:QC81-114 - Weights and measures",2013,"D - World History:DA-DR - Europe:DC - France:DC600-801 - Local history and description:DC801 - Other cities, towns, etc., A-Z",2010,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA201-899 - Greek philology and language",2007,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4018-4209 - Homer",2007,"V - Naval Science:V - Naval Science (General)",2000,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections",1996,"T - Technology:TE - Highway Engineering, Roads & Pavements",1993,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4800-4861 - General",1988,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography",1988,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK2901-2979 - General",1988,"K - Law:KJ-KKZ - Europe:KJA - Roman law",1979,"T - Technology:TG - Bridge engineering",1979,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV640-645 - Refugee problems",1977,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA909-965 - History:DA930-965 - By period:DA949.7-965 - 19th-20th centuries.  Irish question",1962,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPL - Pakistan",1960,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG269.5-365 - Empire, 27 B.C. - 476 A.D.",1959,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature",1959,"H - Social Sciences:HA - Statistics:HA29-32 - Theory and method of social science statistics",1955,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV551.2-639 - Emergency management",1954,"P - Language & Literature:PC - Romance Languages:PC601-872 - Romanian",1952,"V - Naval Science:VK - Navigation, Merchant Marine",1952,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1562.5-1584 - Witchcraft",1945,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z124-228 - History",1945,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1865-1988 - Special types",1939,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7263-7296 - Individual sagas and historical works",1932,"D - World History:DA-DR - Europe:DC - France:DC30-34.5 - Antiquities.  Social life and customs.  Ethnography",1931,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4061-4570 - Doctrinal and systematic Buddhism:BQ4180-4565 - Special doctrines",1926,"L - Education:LA - History of education:LA2301-2396 - Biography",1925,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement",1921,"J - Political Science:JK - Political Institutions (United States):JK2255-2391 - Political parties",1919,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z231-234 - Printers and printing establishments",1918,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z242.9-264.5 - Practical printing",1918,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6500-6576 - Individual authors, 1700-ca. 1868",1917,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD62 - Standardization.  Simplification.  Waste:HD62.2-62.8 - Management of special enterprises",1916,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFC1-1199 - California",1915,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4001-4063 - General",1912,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT3701-3971 - Provincial, local, colonial, etc.",1908,"T - Technology:TA - Engineering (General), Civil Engineering:TA703-712 - Engineering geology.  Rock mechanics.  Soil mechanics.",1908,"N - Fine Arts:NK - Decorative Arts:NK1700-2195 - Interior decoration.  House decoration",1902,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL950-998 - Korean literature:PL950.2-969.5 - History and criticism",1901,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ1-150 - General",1899,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T57-57.97 - Applied mathematics.  Quantitative methods",1898,"Q - Science:QE - Geology:QE420-499 - Petrology",1895,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy",1892,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG1-499 - Slavic philology and languages (General)",1892,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period",1889,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ6300-6388 - Monasteries.  Temples.  Shrines.  Sites",1884,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden",1877,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ210.2-211.47 - Mechanical devices and figures.  Automata.  Ingenious mechanisms. Robots (General):TJ181-210 - Mechanical movements",1877,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3051-3285 - Literary history",1871,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period",1870,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515",1870,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry",1868,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History",1866,"H - Social Sciences:HB - Economic Theory, Demography:HB221-236 - Price",1862,"K - Law:KU-KUN - Australia",1862,"H - Social Sciences:HE - Transportation & Communications:HE8689-8700.95 - Radio and television broadcasting",1861,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4200-4317 - Preaching.  Homiletics:BV4239-4317 - Sermons",1859,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia",1858,"E-F - History of the Americas:F1-975 - United States - Regional:F221-235 - Virginia",1856,"H - Social Sciences:HE - Transportation & Communications:HE8689-8700.95 - Radio and television broadcasting:HE7601-8700.9 - Telecommunication industry.  Telegraph",1856,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6090-6110 - German",1853,"T - Technology:TC - Hydraulic engineering:TC401-506 - River, lake, and water-supply engineering (General)",1853,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPM - Philippines",1850,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses",1850,"P - Language & Literature:PD - Germanic Languages:PD1-780 - General",1849,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG6001-6051 - Speculation",1848,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History",1846,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA129-260 - Early and medieval to 1485:DA140-199 - Celts.  Romans.  Saxons.  Danes.  Normans",1842,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA990-995 - Local history and description",1841,"N - Fine Arts:ND - Painting:ND2889-3416 - Illuminating of manuscripts and books",1838,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK401-976 - Sanskrit",1837,"Q - Science:QE - Geology:QE500-639.5 - Dynamic and structural geology:QE521-545 - Volcanoes and earthquakes",1837,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G5670-8904 - Eastern Hemisphere.  Eurasia, Africa, etc.:G8200-8904 - Africa",1830,"N - Fine Arts:NA - Architecture:NA2835-4050 - Details and decoration",1829,"P - Language & Literature:PH - Uralic & Basque Languages:PH2001-3445 - Hungarian",1827,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1111-1143.2 - Sacred books.  Sources:BL1112.2-1137.5 - Vedic texts",1822,"H - Social Sciences:HJ - Public Finance:HJ9103-9695 - Local finance.  Municipal finance",1821,"H - Social Sciences:HJ - Public Finance:HJ8001-8899 - Public debts",1818,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control",1814,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD493-701 - Cosmology",1813,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA385-398 - Early Stuarts, 1603-1642",1813,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD511-780 - Sewage collection and disposal systems.  Sewerage",1813,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets",1810,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF799-1177 - Political rights.  Political participation",1806,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV5001-5720.5 - Alcoholism.  Intemperance.  Temperance reform",1801,"R - Medicine:RT - Nursing",1797,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH219-321 - By region or country",1797,"H - Social Sciences:HG - Finance:HG3691-3769 - Credit.  Debt.  Loans",1794,"J - Political Science:JN - Political Institutions (Europe):JN5201-5690 - Italy",1788,"V - Naval Science:VA - Navies (Organization, Distribution, Naval Situation)",1787,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1746-1755 - Theology.  Doctrine.  Dogmatics",1782,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC72-81 - Philosophy.  Theory:CC73-81 - Methodology",1782,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian",1782,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections",1780,"D - World History:DS - Asia:DS701-799.9 - China:DS730-731 - Ethnography",1777,"Q - Science:QE - Geology:QE760.8-899.2 - Paleozoology",1775,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1200-1534.24 - United States",1774,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH401-691 - Angling",1774,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX460-605 - Russian Church",1773,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing",1773,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA310-360 - Tudors, 1485-1603",1772,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK1012-1432 - Congress.  Legislative branch",1767,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC799-869 - Diseases of the digestive system.  Gastroenterology",1767,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF756.5-769.5 - Special preclinical sciences",1763,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ1758-1852 - Middle East (incl Turkey, Iran, Israel, Arabian Peninsula)",1760,"P - Language & Literature:PR - English Literature:PR621-744 - Drama",1760,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1225.2-1243.58 - Religious life",1759,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8901-9225 - Presbyterianism.  Calvinistic Methodism",1756,"Q - Science:QB - Astronomy:QB495-903 - Descriptive astronomy:QB799-903 - Stars",1753,"D - World History:DS - Asia:DS493-495.8 - Nepal",1743,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1041-1048 - Vocational education (General)",1741,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV6403-7127 - United States",1740,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K625-709 - Persons",1727,"B - Philosophy, Psychology, Religion:BM - Judaism:BM750-755 - Biography",1726,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP166-166.94 - Theology (Kalam)",1724,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject",1723,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period",1719,"M - Music:ML - Literature on music:ML1-5 - Periodicals. Serials",1719,"P - Language & Literature:PE - English Languages:PE1700-3602 - Dialects.  Provincialisms, etc.",1719,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD5106-5267 - Hours of labor",1716,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA410-410.9 - Medical economics.  Economics of medical care.  Employment",1715,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.3-646.34 - Borneo.  Kalimantan, Indonesia",1711,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF251-289 - Local history and description",1707,"Q - Science:QD - Chemistry:QD241-441 - Organic chemistry:QD415-436 - Biochemistry",1707,"S - Agriculture:SD - Forestry:SD11-115 - Documents",1706,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD233-257.4 - Revolution and Republic, 1918-:DD256 - Period of World War II, 1939-1945",1702,"J - Political Science:JZ - International relations:JZ1305-2060 - Scope of international relations. Political theory. Diplomacy:JZ1464-2060 - Scope of international relations with regard to countries, territories, regions, etc.",1702,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G2200-2444.84 - Asia",1701,"Q - Science:QL - Zoology:QL801-950.9 - Anatomy",1701,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM520-523.7 - Halacha",1700,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5800-5880 - 1800-1960",1700,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT271-299 - Algeria",1699,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa",1698,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T57-57.97 - Applied mathematics.  Quantitative methods:T57.6-57.97 - Operations research.  Systems analysis",1698,"Q - Science:QE - Geology:QE351-399.2 - Mineralogy",1696,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9401-9640 - Reformed or Calvinistic Churches",1694,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD194-195 - Environmental effects of industries and plants",1692,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE561-971 - Shipping:HE730-943 - Merchant marine.  Ocean shipping.  Coastwise shipping",1691,"D - World History:DS - Asia:DS31-35.2 - History",1690,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training",1690,"N - Fine Arts:NK - Decorative Arts:NK1700-2195 - Interior decoration.  House decoration:NK1700-2138 - General.  History, etc. (incl special rooms)",1686,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD233-257.4 - Revolution and Republic, 1918-:DD256 - Period of World War II, 1939-1945:DD253-256.8 - Hitler, 1933-1945.  National socialism",1685,"D - World History:DA-DR - Europe:DC - France:DC600-801 - Local history and description:DC701-790 - Paris",1683,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861",1682,"K - Law:KLA-KLW - Eurasia:KLA - Russia.  Soviet Union",1682,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works",1679,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS554-554.98 - Cambodia",1678,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1100-1297 - Collections:PQ1211-1241 - Drama",1677,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1799-2592 - 1700-ca. 1860/70:PT1891-2239 - Goethe:PT2044-2239 - Biography and criticism",1677,"H - Social Sciences:HB - Economic Theory, Demography:HB501 - Capital.  Capitalism",1674,"H - Social Sciences:HM - Sociology:HM711-806 - Groups and organizations",1673,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN661-694 - Medieval (to 1500)",1670,"L - Education:L - Education (General):L111-791 - Official documents, reports, etc.",1667,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC512-569.5 - Psychopathology:RC530-552 - Neuroses",1667,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3340-3359 - Pushkin",1655,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories",1652,"R - Medicine:RM - Therapeutics, Pharmacology:RM214-258 - Diet therapy.  Dietary cookbooks",1652,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations",1651,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS580-619 - Poetry",1650,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3491.2-3493.96 - 2001-",1647,"E-F - History of the Americas:F1-975 - United States - Regional:F536-550 - Illinois",1646,"L - Education:L - Education (General):L7-97 - Periodicals.  Societies",1643,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America:Z1411-1939 - Mexico.  Central America.  West Indies.  South America",1638,"D - World History:DA-DR - Europe:DG - Italy:DG819-875 - Southern Italy",1636,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM5001-7356 - Languages of South America and the West Indies",1629,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ19-30.7 - Sexual behavior and attitudes.  Sexuality",1628,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP191-253 - Branches, sects, etc.",1619,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL2000-2032 - India",1618,"Q - Science:QC - Physics:QC120-168.85 - Descriptive and experimental mechanics",1617,"P - Language & Literature:PR - English Literature:PR500-614 - Poetry:PR521-614 - By period",1616,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ4543-4937 - Language (Biblical and modern)",1615,"D - World History:DA-DR - Europe:DD - Germany:DD51-78 - Antiquities.  Social life and customs.  Ethnography",1614,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA565-600 - Environmental health",1613,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB195-281 - Civilization and race",1607,"G - Geography, Anthropology, Recreation:G - Geography (General):G70-70.6 - Philosophy.  Relation to other topics.  Methodology",1604,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ807-830 - Renewable energy sources",1604,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6977-7080 - Cost and standard of living",1597,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ4629-4830 - Income tax",1596,"Q - Science:QE - Geology:QE640-699 - Stratigraphy",1594,"H - Social Sciences:HM - Sociology:HM1001-1281 - Social psychology:HM1176-1281 - Social influence.  Social pressure",1592,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization:JV500-5397 - Colonizing nations",1588,"D - World History:D - History (General):D900-2009 - Europe (General)",1586,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG801-1146 - Bulgarian",1585,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ5587-6009 - International security.  Disarmament.  Global survival",1584,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D351-400 - 19th century.  1801-1914/1920",1582,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV40-69 - Social service.  Social work.  Charity organization and practice",1582,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History",1581,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC870-923 - Diseases of the genitourinary system.  Urology",1572,"S - Agriculture:SD - Forestry:SD411-428 - Conservation and protection",1568,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture",1568,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3300-3516 - Collections",1567,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8174-8175 - 1900-1960",1567,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece",1565,"T - Technology:TP - Chemical Technology:TP315-360 - Fuel",1565,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT750-811 - Salvation.  Soteriology",1563,"H - Social Sciences:HJ - Public Finance:HJ8001-8899 - Public debts:HJ8101-8899 - By region or country",1562,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG75-190 - Antiquities.  Civilization.  Culture.  Ethnography",1561,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1651-1729 - Astrology",1556,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8201-8495 - Methodism",1555,"S - Agriculture:SD - Forestry:SD391-410.9 - Sylviculture",1554,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal",1548,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD169-171.8 - Environmental protection",1547,"H - Social Sciences:HE - Transportation & Communications:HE5601-5725 - Automotive transportation",1542,"R - Medicine:RE - Ophthalmology",1541,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV551.2-639 - Emergency management:HV553-639 - Relief in case of disasters",1540,"Q - Science:QD - Chemistry:QD901-999 - Crystallography",1540,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ301-851 - Local history and description",1538,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium",1537,"G - Geography, Anthropology, Recreation:GE - Environmental Sciences:GE170-190 - Environmental policy",1537,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ31-64 - Sex instruction and sexual ethics",1535,"A - General:AC - Collections, Series, Collected works:AC801-895 - Inaugural and program dissertations",1533,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia",1533,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1401-1578 - Intellectual property",1530,"S - Agriculture:S - Agriculture (General):S631-667 - Fertilizers and improvement of the soil",1527,"D - World History:D - History (General):D900-2009 - Europe (General):D901-980 - Description and travel",1526,"D - World History:DS - Asia:DS350-375 - Afghanistan",1524,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books:BP135-136.9 - Hadith literature.  Traditions.  Sunna",1523,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General)",1523,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE380.8-560 - Waterways",1521,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS185-231 - By period",1519,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6090-6110 - German:PN6099-6110 - Poetry",1514,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1690-1725 - Biography",1509,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K321-474 - Schools of legal theory",1507,"M - Music:M - Music:M5-1480 - Instrumental music:M1350-1366 - Other ensembles",1507,"T - Technology:TR - Photography:TR845-899 - Cinematography.  Motion pictures",1506,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL2500-2592 - American (for American Indians, see E-F)",1505,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP233-272.4 - 20th century.  1886-",1503,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1031-1049 - Theory, philosophy, relations, etc.",1502,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF5000-5951 - Dialects.  Provincialism, etc.",1500,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E302 - Collected works of American statemen",1498,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E302 - Collected works of American statemen:E300-302.6 - General",1498,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC581-607 - Immunologic diseases.  Allergy",1498,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8001-8080 - Lutheran churches",1496,"S - Agriculture:S - Agriculture (General):S671-760.5 - Farm machinery and farm engineering",1493,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB2832-2844.1 - Teaching personnel",1492,"T - Technology:TP - Chemical Technology:TP200-248 - Chemicals (Manufacture, use, etc.):TP248.13-248.65 - Biotechnology",1492,"M - Music:ML - Literature on music:ML100-109 - Dictionaries. Encyclopedias",1491,"D - World History:DS - Asia:DS701-799.9 - China:DS781-796 - Local history and description:DS785-786 - Tibet",1489,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z105-115.5 - Manuscripts.  Paleography",1487,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD201-500 - Water supply for domestic and industrial purposes:TD419-428 - Water pollution",1481,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ1-4625 - Coins:CJ201-1397 - Ancient",1478,"H - Social Sciences:HM - Sociology:HM621-656 - Culture",1476,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members",1475,"D - World History:DS - Asia:DS92-99 - Syria",1472,"P - Language & Literature:PR - English Literature:PR621-744 - Drama:PR641-744 - By period",1472,"A - General:AC - Collections, Series, Collected works:AC901-995 - Pamphlet collections",1471,"U - Military Science:UC - Maintenance & Transportation",1468,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT361-384 - Urbanization.  City and country",1466,"D - World History:DS - Asia:DS376-392.2 - Pakistan:DS381-389.22 - History",1464,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P302-302.87 - Discourse analysis",1464,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL901-949 - Korean language",1462,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature",1459,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations",1453,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject",1451,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6110.5-6120 - Drama",1450,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG550.5-564 - 19th century",1447,"Q - Science:QC - Physics:QC350-467 - Optics.  Light:QC450-467 - Spectroscopy",1447,"D - World History:DA-DR - Europe:DG - Italy:DG691-817.3 - Central Italy:DG731-759.3 - Tuscany.  Florence",1445,"B - Philosophy, Psychology, Religion:BF - Psychology:BF38-64 - Philosophy.  Relation to other topics",1444,"S - Agriculture:SB - Plant Culture:SB119-124 - Propagation (incl breeding, selection, grafting, air layering)",1442,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP188-190 - Islamic religious life:BP188.45-189.65 - Sufism.  Mysticism.  Dervishes",1441,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453",1435,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA5000-5660 - Byzantine and modern Greek literature",1435,"S - Agriculture:S - Agriculture (General):S560-571.5 - Farm economics.  Farm management.  Agricultural mathematics",1433,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture:SB387-399 - Grape culture.  Viticulture",1433,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark",1432,"S - Agriculture:SB - Plant Culture:SB481-486 - Parks and public reservations",1430,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ1-4625 - Coins:CJ1509-4625 - Medieval and modern",1428,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG51-70 - Local history and description:DG70 - Other cities, towns, etc., A-Z",1427,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1216-1225 - Hindu pantheon.  Deities",1426,"L - Education:LB - Theory & Practice of Education:LB1603-1696.6 - Secondary education.  High schools",1425,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB950-990.5 - Pest control and treatment of diseases.  Plant protection:SB950.9-970.4 - Pesticides",1425,"Q - Science:QK - Botany:QK640-707 - Plant anatomy",1424,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P306-310 - Translating and interpreting",1421,"T - Technology:T - Technology (General):T61-173 - Technical education.  Technical schools",1420,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P118-118.75 - Language acquisition",1419,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA407-409.5 - Health status indicators.  Medical statistics and surveys",1417,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA550-565 - Victorian era, 1837-1901",1416,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period",1413,"J - Political Science:JC - Political Theory:JC51-93 - Ancient state",1413,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1970-2175 - Liturgy and ritual",1412,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD217-231 - New Empire, 1871-1918",1411,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM660-679 - Liturgy and ritual",1404,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E747-748 - Biography",1401,"D - World History:DA-DR - Europe:DD - Germany:DD1-21 - General",1400,"Q - Science:QL - Zoology:QL951-991 - Embryology",1388,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX800-839 - Periodicals.  Societies, councils, congresses, etc.",1382,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations:JZ4850-5490 - Intergovernmental organizations.  IGOs",1382,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1001-1989 - Egyptology",1382,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL239-265 - Religion and science",1381,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF500-900 - By region or country",1380,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4429-4442 - 1945-1989.  People's Republic",1378,"N - Fine Arts:NK - Decorative Arts:NK2200-2750 - Furniture",1376,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6801-6961 - Vergilius Maro, Publius (Virgil)",1372,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1421-1440 - Central America:F1435-1435.3 - Mayas",1371,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS541-553.7 - History",1370,"J - Political Science:J - General Legislative & Executive Papers:J100-981 - Other regions and countries",1370,"Q - Science:QH - Natural History, Biology:QH1-278.5 - Natural history (General):QH201-278.5 - Microscopy",1370,"K - Law:KJ-KKZ - Europe:KKT - Spain",1369,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS642-659.5 - Prose (General)",1366,"A - General:AZ - History of Scholarship & Learning, The Humanities",1364,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E756-760 - Theodore Roosevelt's administrations, September 14, 1901-1909",1363,"S - Agriculture:S - Agriculture (General):S604.8-621.5 - Melioration (Improvement, reclamation, fertilization, irrigation, etc., of lands)",1358,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA600-667 - Description and travel.  Guidebooks",1357,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC1401-2572 - Women.  Girls",1357,"H - Social Sciences:HE - Transportation & Communications:HE7601-8700.9 - Telecommunication industry.  Telegraph",1356,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT93-206 - General collective biography",1355,"D - World History:DU - Oceania (South Seas):DU520-950 - Smaller island groups:DU739-747 - New Guinea",1352,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-",1347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-:DP161-272.4 - Modern Spain, 1479/1516-",1347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period",1347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History",1347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP250-269.9 - Second Republic, 1931-1939",1347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP233-272.4 - 20th century.  1886-:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP250-269.9 - Second Republic, 1931-1939:DP269-269.9 - Civil War, 1936-1939",1347,"K - Law:KJ-KKZ - Europe:KKW - Switzerland",1347,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA505-522 - George III, 1760-1820",1346,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL2700-2790 - Rationalism",1344,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM101-2711 - American languages (Aboriginal)",1343,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-",1341,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM2401-2999 - Massachusetts",1335,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1932-2125 - Serbia",1332,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF14-1257 - Great Britain",1330,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA411-415 - Provisions for personal medical care.  Medical care plans",1329,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period",1323,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4430-4675 - Public finance",1323,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure:K5015.4-5350 - Criminal law",1323,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC4812-5160.3 - Other special classes",1323,"N - Fine Arts:ND - Painting:ND1700-2495 - Watercolor painting",1323,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN500-519 - Collections",1323,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life",1320,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2830-2847 - Belarusian",1320,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8601-8695 - Mormons.  Church of Jesus Christ of Latter-Day Saints",1316,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1900-1941 - Haiti (Island).  Hispaniola",1316,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR451-469 - 19th century",1316,"B - Philosophy, Psychology, Religion:BF - Psychology:BF698-698.9 - Personality",1310,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century",1309,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3845-3877 - Aesthetics",1308,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC361-424 - 20th century:DC411-424 - Fifth Republic, 1958-",1307,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages:PL3551-4001 - Tibeto-Burman languages:PL3561-3801 - Tibeto-Himalayan languages",1306,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6278-6370 - Cicero, Marcus Tullius",1304,"S - Agriculture:S - Agriculture (General):S900-972 - Conservation of natural resources (incl land conservation)",1303,"D - World History:DS - Asia:DS393-396.9 - Bangladesh.  East Pakistan",1302,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD172-193.5 - Environmental pollution",1301,"D - World History:DS - Asia:DS251-326 - Iran (Persia):DS270-318.85 - History",1299,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2661-2699 - Paraguay",1298,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG633-635 - By region or country",1298,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5437-5444 - Purchasing.  Selling.  Sales personnel.  Sales executives",1297,"U - Military Science:U - Military Science (General):U400-714 - Military education and training",1296,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX200-395 - General",1295,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli",1295,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT170-178 - Urban renewal.  Urban redevelopment",1294,"C - Historical Sciences (Archaeology, Genealogy):CS - Genealogy:CS2300-3090 - Personal and family names",1293,"N - Fine Arts:N - Visual arts:N81-390 - Study and teaching.  Research",1293,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1-489 - General",1293,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ268-740 - Steam engineering",1293,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF75-136 - Antiquities.  Civilization.  Culture.  Ethnography",1292,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7220-7262.5 - Collections",1292,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB3011-3095 - School management and discipline:LB3050-3060.87 - Educational tests, measurements, evaluations and examinations",1290,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD783-812.5 - Municipal refuse.  Solid wastes",1286,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History",1282,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel",1278,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P325-325.5 - Semantics",1278,"R - Medicine:RB - Pathology:RB151-214 - Theories of disease.  Etiology.  Pathogenesis",1277,"R - Medicine:RB - Pathology:RB127-150 - Manifestations of disease",1276,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA790-790.95 - Mental health.  Mental illness prevention",1275,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1361-1395.5 - Real estate business",1273,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z699-699.5 - Machine methods of information and retrieval.  Mechanized bibliographic control",1273,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1-431 - Modern languages",1272,"U - Military Science:UH - Other Military Services",1272,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1491-1491.5 - Cooperative agriculture",1271,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E744-744.5 - Diplomatic history.  Foreign and general relations",1270,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD60-60.5 - Social responsibility of business",1270,"S - Agriculture:SF - Animal Culture:SF191-275 - Cattle:SF221-250 - Dairying",1268,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775)",1266,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ6009-6299 - Pacific settlement of international disputes and conflict resolution",1266,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK3001-3521 - Distribution or transmission of electric power",1266,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3000-3049 - Classical literature",1264,"Q - Science:QA - Mathematics:QA101-145 - Elementary mathematics.  Arithmetic",1263,"S - Agriculture:SK - Hunting Sports:SK351-579 - Wildlife management.  Game protection",1263,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B770-785 - Renaissance",1262,"H - Social Sciences:HB - Economic Theory, Demography:HB522-715 - Income.  Factor shares:HB615-715 - Entrepreneurship.  Risk and uncertainty. Property",1262,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1799-2592 - 1700-ca. 1860/70:PT1891-2239 - Goethe:PT1891-2017 - Works",1261,"Q - Science:QC - Physics:QC801-809 - Geophysics.  Cosmic physics",1261,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5428-5429.6 - Retail trade",1260,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN4775-4784 - Technique.  Practical journalism",1260,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z662-664 - Collections",1259,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6035-6197 - Criminal anthropology",1258,"M - Music:MT - Instruction and study:MT40-67 - Composition. Elements and techniques of music",1257,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK33-35.5 - Ethnography",1252,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ601-771 - Prose and prose fiction",1251,"D - World History:D - History (General):D51-90 - Ancient history",1249,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period",1249,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1801-1831.95 - Bihari",1247,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education",1246,"J - Political Science:JX - International Law (obsolete classification):JX63-191 - Collections.  Documents.  Cases",1243,"K - Law:KHA-KHW - South America:KHA - Argentina",1243,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5133 - Sermons.  Tracts.  Addresses.  Essays",1240,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9999 - Miscellaneous industries and trades",1240,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB1201-1449 - Irish",1239,"K - Law:KHA-KHW - South America:KHC - Bolivia",1238,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGF - Mexico",1237,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5133 - Sermons.  Tracts.  Addresses.  Essays:BX5130-5132 - General",1236,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2701-2799 - Uruguay",1233,"R - Medicine:RA - Public Aspects of Medicine:RA1001-1171 - Forensic medicine.  Medical jurisprudence.  Legal medicine",1231,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS1110-1199 - Works about the Old Testament:BS1160-1191.5 - Criticism and interpretation",1229,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3365-3417 - Tolstoi",1228,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6001-6056 - General",1225,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5140.5-5147 - Liturgy and ritual",1224,"H - Social Sciences:HE - Transportation & Communications:HE9761-9900 - Air transportation.  Airlines",1224,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9262-9288 - Individual authors, 1961-2000",1224,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria",1223,"N - Fine Arts:NK - Decorative Arts:NK1160-1590 - Decoration and ornament.  Design:NK1175-1498 - History",1223,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3325-3328 - Dostoyevsky",1223,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPT - Thailand",1221,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes",1217,"Q - Science:QR - Microbiology:QR100-130 - Microbial ecology",1217,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z693-695.83 - Cataloging",1216,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1271.2-1295 - Modifications.  Sects",1215,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E660-664 - General",1215,"B - Philosophy, Psychology, Religion:BM - Judaism:BM534-538 - Relation of Judaism to special subject fields",1213,"U - Military Science:UF - Artillery",1212,"E-F - History of the Americas:F1-975 - United States - Regional:F16-30 - Maine",1210,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G1791-2196 - Europe",1210,"Q - Science:QC - Physics:QC474-496.9 - Radiation physics (General)",1209,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation",1208,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9715-9717.5 - Construction industry",1208,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5717-5734.7 - Business communication",1207,"Q - Science:QR - Microbiology:QR75-99.5 - Bacteria",1207,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC330-354.9 - Later 19th century",1206,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL74-99 - Religions of the world",1203,"D - World History:DA-DR - Europe:DD - Germany:DD301-454 - Prussia",1203,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium",1199,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8031-8080 - Police duty.  Methods of protection",1197,"P - Language & Literature:PN - Literature (General):PN3311-3503 - Prose.  Prose fiction:PN3427-3448 - Special kinds of fiction.  Fiction genres",1195,"K - Law:KD-KDK - The United Kingdom and Ireland:KDK - Ireland (Eire)",1191,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB1201-1598 - Rivers.  Stream measurements",1190,"P - Language & Literature:PN - Literature (General):PN101-245 - Authorship:PN172-239 - Technique.  Literary composition, etc.",1190,"R - Medicine:RD - Surgery:RD701-811 - Orthopedic surgery",1189,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1332-1333.5 - Land reform.  Agrarian reform",1188,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT241-269 - Tunisia (Tunis)",1186,"T - Technology:TC - Hydraulic engineering:TC801-978 - Irrigation engineering.  Reclamation of wasteland.  Drainage",1186,"T - Technology:TH - Building Construction:TH4021-4977 - Buildings (Construction with reference to use)",1184,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ255-265 - Heat engines",1184,"B - Philosophy, Psychology, Religion:BC - Logic:BC171-199 - Special topics",1182,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFP - Pennsylvania",1181,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T58.5-58.64 - Information technology",1180,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6001-6097 - Literary history",1179,"U - Military Science:UB - Military administration:UB356-369.5 - Provision for veterans",1179,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1760-1779.5 - Controversial works",1178,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy:CN120-740 - Ancient inscriptions",1178,"J - Political Science:JA - Political Science (General):JA1-26 - Periodicals",1178,"R - Medicine:RK - Dentistry",1178,"D - World History:DS - Asia:DS36-39.2 - Arab countries:DS37-39.2 - History",1177,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD5481-5630.7 - Industrial arbitration.  Mediation  and conciliation",1177,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA418-418.5 - Medicine and society.  Social medicine.  Medical sociology",1177,"E-F - History of the Americas:F1-975 - United States - Regional:F206-220 - The South.  South Atlantic States",1174,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC750-766 - Magnetism",1173,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL301-398 - Iceland:DL301-334 - General.  Description and travel, etc.",1169,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNX - Japan",1168,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ1-30 - General",1167,"D - World History:DS - Asia:DS561-589 - Thailand (Siam):DS569-570 - Ethnography",1165,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.):JL1-500 - Canada",1165,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ1075-1075.5 - Sex role",1164,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1259-1321 - By period",1162,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance",1162,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD895-899 - Industrial and factory sanitation",1162,"R - Medicine:RM - Therapeutics, Pharmacology:RM695-893 - Physical medicine.  Physical therapy",1158,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4061-4570 - Doctrinal and systematic Buddhism:BQ4570 - Special topics and relations to special subjects",1157,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC648-665 - Diseases of the endocrine glands.  Clinical endocrinology",1155,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History",1151,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children:HV873-887 - Destitute, neglected, and abandoned children.  Street children",1149,"D - World History:DA-DR - Europe:DD - Germany:DD301-454 - Prussia:DD341-454 - History",1148,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD895-899 - Industrial and factory sanitation:TD896-899 - Industrial and factory wastes",1148,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1259-1321 - By period:DR1281-1321 - 1918-",1144,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E302 - Collected works of American statemen:E300-302.6 - General:E302.5-302.6 - Biography (Late eighteenth century)",1144,"M - Music:MT - Instruction and study:MT5.5-7 - Music theory",1140,"D - World History:DS - Asia:DS201-248 - Arabian Peninsula.  Saudi Arabia:DS247-248 - Local history and description",1135,"H - Social Sciences:HX - Socialism, Communism, Anarchism:HX821-970.9 - Anarchism",1134,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History",1132,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA880-890 - Local history and description",1130,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions:BV2123-2595 - Special churches",1125,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ3101-3971 - Assyriology.  Akkadian",1124,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E838-840.8 - General",1123,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS301-326 - Poetry",1123,"T - Technology:TH - Building Construction:TH7005-7699 - Heating and ventilation.  Air conditioning",1123,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2010-2017.6 - Choral services, etc.",1119,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1003-1003.5 - Choice of books.  Books and reading.  Book reviews",1119,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1585-1623 - Magic.  Hermetics.  Necromancy",1118,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B69-99 - General works",1116,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL2390-2490 - African",1116,"S - Agriculture:SF - Animal Culture:SF94.5-99 - Feeds and feeding.  Animal nutrition",1116,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1312-1469 - Board games.  Move games",1114,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1312-1469 - Board games.  Move games:GV1221-1469.63 - Indoor games and amusements",1114,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4430-4675 - Public finance:K4453-4640 - National revenue",1114,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV1450-1494 - Aged",1113,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT271-299 - Algeria:DT283.7-295.55 - History",1109,"S - Agriculture:SF - Animal Culture:SF191-275 - Cattle:SF250.5-275 - Dairy processing.  Dairy products",1107,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy:DG670-684.72 - Venice",1106,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB561-649 - Other natural landforms (Floodplains, caves, deserts, dunes, etc.)",1106,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV8301-9920.7 - Penology.  Prisons.  Corrections:HV9261-9430.7 - Reformation and reclamation of adult prisoners",1104,"D - World History:DA-DR - Europe:DD - Germany:DD280-289.5 - East Germany",1102,"T - Technology:T - Technology (General):T173.2-174.5 - Technological change",1101,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ6009-6299 - Pacific settlement of international disputes and conflict resolution:KZ6115-6299 - Arbitration and adjudication",1098,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9715-9717.5 - Construction industry:HD9680-9714 - Mechanical industries",1097,"J - Political Science:JK - Political Institutions (United States):JK1717-2217 - Political rights.  Practical politics:JK1965-2217 - Electoral system",1096,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest",1095,"P - Language & Literature:PC - Romance Languages:PC5001-5498 - Portuguese",1094,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3515-3550 - Outside the Russian Federation",1094,"J - Political Science:JC - Political Theory:JC311-314 - Nationalism.  Nation state",1091,"P - Language & Literature:P - Philology & Linguistics:P99-99.4 - Semiotics.  Signs and symbols",1088,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS524-526.7 - History",1085,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws",1085,"U - Military Science:U - Military Science (General):U21-22.3 - War.  Philosophy.  Military sociology",1085,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description:DD851-900 - Berlin",1083,"N - Fine Arts:N - Visual arts:N5198-5299 - Private collections and collectors",1080,"H - Social Sciences:HA - Statistics:HA36-37 - Statistical services.  Statistical bureaus",1079,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KG1-999 - Latin America (General)",1079,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNT-KNU - States, cities, etc.",1077,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF14-1257 - Great Britain:LF14-797 - England",1076,"H - Social Sciences:HT - Communities, Classes, Races:HT401-485 - Rural groups.  Rural sociology",1075,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR160-481 - By period:BR290-481 - Modern period:BR323.5-334.2 - Luther, Martin",1074,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP285-402 - Local history and description:DP402 - Other cities, towns, etc., A-Z",1071,"D - World History:DS - Asia:DS80-90 - Lebanon (Phenicia)",1070,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works",1070,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4077-4088 - Modern",1069,"T - Technology:TN - Mining Engineering, Metallurgy:TN400-580 - Ore deposits and mining of particular metals",1068,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV5070-5095 - Mysticism",1067,"H - Social Sciences:HM - Sociology:HM1001-1281 - Social psychology:HM1106-1171 - Interpersonal relations.  Social behavior",1066,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand",1065,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education:S539.5-542.3 - Research.  Experimentation",1065,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT819-891 - Eschatology.  Last things",1064,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4800-4897 - Works of meditation and devotion",1063,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF811-909 - Veterinary medicine of special organs, regions, and systems",1063,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG550.5-564 - 19th century:DG552-554.5 - 1848-1871.  Risorgimento",1061,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7101-7260 - Congregationalism",1060,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB1001-1199.8 - Groundwater.  Hydrogeology",1060,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2351-2418 - Marathi",1059,"R - Medicine:RD - Surgery:RD1-31.7 - General works",1059,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5800-5995 - Protestant Episcopal Church in the United States of America",1057,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB80-99.2 - 19th-20th centuries",1054,"D - World History:DT - Africa:DT1701-2405 - South Africa",1054,"D - World History:DA-DR - Europe:DC - France:DC1-20.5 - General",1053,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC512-569.5 - Psychopathology:RC512-528 - Psychoses",1052,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists",1051,"T - Technology:TH - Building Construction:TH1000-1725 - Systems of building construction",1049,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1100-1150.9 - Fighting sports (Bullfighting, boxing, fencing, etc.)",1048,"D - World History:DA-DR - Europe:DE - The Greco-Roman World:DE1-15.5 - General",1047,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA5000-5660 - Byzantine and modern Greek literature:PA5301-5638.36 - Individual authors",1044,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.17-646.29 - Java",1043,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS569-580 - Men, women, and children of the Bible",1042,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT2700-2728 - 2001-",1040,"D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East:DS51-54.95 - Local history and description",1038,"K - Law:KHA-KHW - South America:KHH - Colombia",1038,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G5200-5667 - South America",1035,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6100-6140 - Collections",1035,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1019-1033 - Special classes of books",1034,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ301-851 - Local history and description:DQ301-800.35 - Cantons (and cantonal capitals)",1033,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA129-260 - Early and medieval to 1485:DA200-260 - 1154-1485.  Angevins.  Plantagenets.  Lancaster-York",1029,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL2195-2228 - Japan:BL2216-2227.8 - Shinto",1028,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD7255-7256 - Vocational rehabilitation.  Employment of people with disabilities",1027,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS500-534.8 - Criticism and interpretation",1026,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM3001-4566 - Languages of Mexico and Central America",1026,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM101-2711 - American languages (Aboriginal):PM549-2711 - Special languages of the United States and Canada (alphabetically)",1024,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1461-1477 - Guatemala",1023,"P - Language & Literature:PR - English Literature:PR1-56 - Literary history and criticism",1023,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG1100-1435 - Equipment and supplies",1023,"V - Naval Science:VA - Navies (Organization, Distribution, Naval Situation):VA400-750 - Other regions or countries",1020,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5548.7-5548.85 - Industrial psychology",1019,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC149-161 - Literacy.  Illiteracy",1017,"Q - Science:QB - Astronomy:QB460-466 - Astrophysics",1017,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA800-814.5 - 1603-1707/1745",1015,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8031-8080 - Police duty.  Methods of protection:HV8073-8079.35 - Investigation of crimes.  Examination and identification of prisoners",1014,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT1313-1480 - History of specific doctrines and movements.  Heresies and schisms",1011,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK70-112.42 - Early to 1613",1010,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3450-3470 - 1870-1917:PG3452 - Andreev",1010,"D - World History:DS - Asia:DS608-610.9 - Singapore",1009,"H - Social Sciences:HT - Communities, Classes, Races:HT1501-1595 - Races",1007,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1310-1326.5 - Japanese prints",1007,"E-F - History of the Americas:E11-143 - America:E101-135 - Discovery of America and early explorations:E121-135 - Post-Columbian period.  El Dorado",1006,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT641-665 - Zaire.  Congo (Democratic Republic).  Belgian Congo",1005,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles",1005,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature:PT711-871 - Prose",1005,"U - Military Science:UB - Military administration:UB250-271 - Intelligence",1003,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG275-309.3 - Constitutional Empire, 27 B.C. - 284 A.D.",1002,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1001-1046 - World atlases.  Atlases of the Earth",1002,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPG1-6999 - Malaysia",1001,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD99-120 - Military, naval, and political history.  Foreign relations",998,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture:SH151-179 - Fish culture",997,"U - Military Science:U - Military Science (General):U27-43 - History of military science",997,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4625-4780 - Moral theology",996,"K - Law:KZA - Law of the Sea",995,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law",994,"T - Technology:TP - Chemical Technology:TP785-869 - Clay industries.  Ceramics.  Glass",993,"K - Law:KF-KFZ - The United States:KFX - Individual cities, A-Z",992,"T - Technology:TA - Engineering (General), Civil Engineering:TA174 - Engineering design",991,"E-F - History of the Americas:F1-975 - United States - Regional:F191-205 - District of Columbia.  Washington",990,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History",989,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1-489 - General:PJ1-195 - Languages",987,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4650-4705 - Biography and portraits:BX4650-4698 - Collective",982,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR4501-6305 - Chivalry and knighthood (Orders, decorations, etc.)",981,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.):JL1200-1299 - Mexico",978,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA909-965 - History",977,"N - Fine Arts:NC - Drawing, Design, Illustration:NC950-996 - Illustration",977,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG576-583.8 - 1948-    .  Republic",976,"D - World History:DS - Asia:DS701-799.9 - China:DS781-796 - Local history and description:DS781-784.2 - Manchuria",976,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1745-1779 - Oracles.  Sibyls.  Divinations",975,"J - Political Science:JX - International Law (obsolete classification):JX1621-1896 - Diplomacy",975,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E171-180 - General:E176-176.8 - Biography",972,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1701-1797 - 1500-ca. 1700",972,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z997-997.2 - Private libraries",972,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK5100-5440 - Glass",971,"R - Medicine:R - Medicine (General):R728-733 - Practice of medicine.  Medical practice economics",971,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2347-2377 - Practical religion.  Christian life",970,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV4023-4470.7 - Poor in cities.  Slums",970,"R - Medicine:R - Medicine (General):R895-920 - Medical physics.  Medical radiology.  Nuclear medicine",970,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages",969,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN478-491.7 - Social organization",969,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History",965,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB610-615 - Weeds, parasitic plants, etc.",963,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General)",962,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF225-619 - Organs and functions of government",962,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G3400-3612 - Canada",961,"C - Historical Sciences (Archaeology, Genealogy):CE - Technical Chronology, Calendar",960,"L - Education:LE - Individual Educational Institutions (America (except U.S.))",960,"P - Language & Literature:PF - West Germanic Languages:PF1-979 - Dutch",959,"R - Medicine:RB - Pathology:RB37-56.5 - Clinical pathology.  Laboratory technique",959,"R - Medicine:RL - Dermatology",958,"D - World History:DS - Asia:DS488-490 - Sri Lanka:DS489.5-489.86 - History",957,"P - Language & Literature:PN - Literature (General):PN1-9 - Periodicals",957,"B - Philosophy, Psychology, Religion:BM - Judaism:BM600-645 - Dogmatic Judaism",955,"T - Technology:TP - Chemical Technology:TP1080-1185 - Polymers and polymer manufacture",953,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2699-2913 - Blacks.  African Americans",952,"N - Fine Arts:NA - Architecture:NA100-130 - Architecture and the state",952,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV301-530 - Hymnology",950,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9725-9850 - 19th century",950,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4538 - Foreign investments",949,"D - World History:DS - Asia:DS651-689 - Philippines:DS688-689 - Local history and description",948,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1521-1537 - Nicaragua",948,"G - Geography, Anthropology, Recreation:GE - Environmental Sciences:GE195-199 - Environmentalism.  Green movement",946,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA28-35 - General",944,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1051-1055 - Quebec",944,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets:SF421-440.2 - Dogs.  Dog racing",943,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV800-873 - Sacraments.  Ordinances",942,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z987-996.3 - Book collecting",942,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC963-969 - Industrial medicine.  Industrial hygiene",941,"S - Agriculture:SD - Forestry:SD430-559 - Exploitation and utilization",939,"E-F - History of the Americas:F1-975 - United States - Regional:F91-105 - Connecticut",938,"Q - Science:QC - Physics:QC251-338.5 - Heat:QC310.15-319 - Thermodynamics",938,"B - Philosophy, Psychology, Religion:BM - Judaism:BM545-582 - Principles of Judaism (General)",936,"P - Language & Literature:P - Philology & Linguistics:P501-769 - Indo-European (Indo-Germanic) philology",936,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6951-6957 - Industrial sociology.  Social conditions of labor",935,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK30-51 - History",934,"E-F - History of the Americas:F1-975 - United States - Regional:F366-380 - Louisiana",934,"T - Technology:TC - Hydraulic engineering:TC160-181 - Technical hydraulics",934,"T - Technology:TP - Chemical Technology:TP670-699 - Oils, fats, and waxes",933,"Q - Science:QE - Geology:QE901-996.5 - Paleobotany",932,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History:DB2080-2247 - By period",928,"D - World History:DA-DR - Europe:DG - Italy:DG691-817.3 - Central Italy:DG803-817.3 - Rome (Modern city)",928,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6393-6444 - Horace",928,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism",928,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature:PT175-230 - Medieval",927,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1300-1380 - Jainism",924,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL300-325 - The myth.  Comparative mythology",923,"E-F - History of the Americas:E11-143 - America:E75-99 - Indians of North America:E81-83 - Indian wars",923,"S - Agriculture:S - Agriculture (General):S622-627 - Soil conservation and protection",923,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources",923,"A - General:AE - Encyclopedias",922,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E341-370 - Madison's administrations, 1809-1817",921,"D - World History:DT - Africa:DT43-154 - Egypt:DT73 - Local antiquities",919,"E-F - History of the Americas:F1-975 - United States - Regional:F131-145 - New Jersey",919,"E-F - History of the Americas:F1-975 - United States - Regional:F486-500 - Ohio",916,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2631-2659 - Panjabi",916,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG555-575 - 1871-1947.  United Italy (Monarchy):DG571-572 - 1919-1945.  Fascism",914,"D - World History:DS - Asia:DS331-349.9 - Southern Asia.  Indian Ocean Region",914,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT301-330 - Morocco",914,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E311-320 - Washington's administrations, 1789-1797",912,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519",911,"E-F - History of the Americas:F1-975 - United States - Regional:F251-265 - North Carolina",910,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2326.4-2330 - Institutions of higher education",910,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3701-3740 - Immigrants or ethnic and linguistic minorities.  Bilingual schools and bilingual education",910,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA498-503 - 1714-1760",909,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK2000-2891 - Dynamoelectric machinery and auxiliaries",908,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K830-968 - Obligations",904,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS109-109.94 - Jerusalem",902,"K - Law:KLA-KLW - Eurasia:KLB - Russia (Federation, 1992-    )",902,"L - Education:LB - Theory & Practice of Education:LB1025-1050.75 - Teaching (Principles and practice):LB1049.9-1050.75 - Reading (General)",902,"D - World History:DS - Asia:DS13-28 - Ethnography",901,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1800-1920 - Government and organization",899,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD4861-4895 - Labor systems",899,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E841-843 - Kennedy's administration, 1961-November 22, 1963",898,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6201-6249 - Criminal classes",898,"T - Technology:TA - Engineering (General), Civil Engineering:TA501-625 - Surveying",898,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB1775-1785 - Professional aspects of teaching and school administrators. Vocational guidance",897,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4900-4926 - Individual authors, 2001-",894,"H - Social Sciences:HJ - Public Finance:HJ9701-9940 - Public accounting.  Auditing",888,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area",888,"P - Language & Literature:PR - English Literature:PR1490-1799 - Anglo-Saxon literature",888,"N - Fine Arts:NX - Arts in General:NX650-694 - Special subjects, characters, persons, religious arts, etc.",887,"Q - Science:QB - Astronomy:QB980-991 - Cosmogony.  Cosmology",885,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG201-215 - General",883,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN451-477.7 - Intellectual life",883,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects",879,"S - Agriculture:S - Agriculture (General):S604.8-621.5 - Melioration (Improvement, reclamation, fertilization, irrigation, etc., of lands):S606-621.5 - Special classes of lands and reclamation methods",879,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD84-96 - General",876,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA648.5-767 - Epidemics.  Epidemiology.  Quarantine.  Disinfection",875,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1801-2195 - Social usages.  Etiquette",874,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3581-3598 - Environmental law",874,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF2402-3197 - Germany",874,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2341-2341.95 - Supervision and administration.  Business management",873,"R - Medicine:RJ - Pediatrics:RJ206-235 - Nutrition and feeding of children and adolescents",868,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT19-37 - Doctrine and dogma",867,"E-F - History of the Americas:F1-975 - United States - Regional:F281-295 - Georgia",867,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1700-1973 - Social legislation",867,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6519-6553 - Ovid",865,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5150-5182.5 - Government.  Organization.  Discipline",864,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5387-5387.5 - Business ethics",863,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4000-4060 - General works",859,"A - General:AG - Dictionaries & Other General Reference",858,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT515-515.9 - Nigeria",858,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9650-9663 - Chemical industries",858,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8800-8942 - 19th century",858,"E-F - History of the Americas:F1-975 - United States - Regional:F791-805 - New Mexico",856,"B - Philosophy, Psychology, Religion:BH - Aesthetics:BH301 - Special topics",855,"B - Philosophy, Psychology, Religion:BM - Judaism:BM534-538 - Relation of Judaism to special subject fields:BM534-536 - Religions",854,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC35-41 - General",854,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT433.5-434 - Kenya",854,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4201-4204 - General",854,"D - World History:DA-DR - Europe:DA - Great Britain:DA700-745 - Wales",852,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1711-1741 - Irrigation",852,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E743-743.5 - Political history",851,"E-F - History of the Americas:F1-975 - United States - Regional:F306-320 - Florida",851,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA341-1776 - Maps.  By region or country",850,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z3501-3975 - Africa",848,"Q - Science:QB - Astronomy:QB275-343 - Geodesy",847,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations:JZ4850-5490 - Intergovernmental organizations.  IGOs:JZ4935-5160 - United Nations",845,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT675-690 - Classes arising from occupation",843,"N - Fine Arts:N - Visual arts:N4390-5098 - Exhibitions",843,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU108-117.2 - History",842,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1001-1989 - Egyptology:PJ1481-1989 - Literature.  Inscriptions",841,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1125-1345 - Machine shops and machine shop practice",839,"E-F - History of the Americas:F1-975 - United States - Regional:F786-790 - New Southwest.  Colorado River, Canyon, and Valley",838,"J - Political Science:JN - Political Institutions (Europe):JN6690-6699 - Russia (Federation)",838,"D - World History:DS - Asia:DS901-937 - Korea:DS904.8-922.4642 - History:DS918-921.8 - War and intervention, 1950-1953",837,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ3101-3971 - Assyriology.  Akkadian:PJ3601-3971 - Literature.  Inscriptions",837,"U - Military Science:U - Military Science (General):U161-163 - Strategy",836,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1300-1337 - Portraits",834,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL950-998 - Korean literature:PL969.8-985 - Collections",834,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB2001-3029 - Brittanic group",833,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT595-680 - Mary, Mother of Jesus Christ.  Mariology",832,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP44-53 - Antiquities.  Social life and customs.  Ethnography",832,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA3973-3992 - Euripedes",832,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature:BM499-504.7 - Babylonian Talmud",831,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP70-80 - Biography:BP75-77.75 - Muammad, Prophet, d. 632",830,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History",829,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS185-231 - By period:PS221-228 - 20th century",829,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z266-276 - Bookbinding.  Book decoration",829,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT1095-1255 - Apologetics.  Evidences of Christianity",828,"K - Law:KQ-KTZ - Africa:KTL - South Africa, Republic of",828,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB946-958.6 - 20th century",827,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E806-812 - Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",827,"S - Agriculture:SD - Forestry:SD561-669.5 - Administration.  Policy",827,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ163.13-163.25 - Power resources",827,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS113.2-113.8 - Ethnography.  Tribes of Israel",826,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ3995-6651 - Australia.  New Zealand.  Pacific Ocean islands",823,"L - Education:LB - Theory & Practice of Education:LB3201-3325 - School architecture and equipment.  School physical facilities. Campus planning",823,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM525-526 - Cabala",821,"D - World History:DS - Asia:DS393-396.9 - Bangladesh.  East Pakistan:DS394.5-395.7 - History",818,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK9001-9201 - Caucasian languages",818,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway",817,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG8001-9146 - Baltic",817,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform:HN30-39 - The church and social problems",815,"T - Technology:TH - Building Construction:TH9025-9745 - Protection of buildings",815,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF220-221 - Bronze Age, Minoan, and Mycenaean ages",814,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS125-198 - English",812,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG51-70 - Local history and description:DG51-55 - Regions in Italy, A-Z",811,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E337.8-340 - General",810,"E-F - History of the Americas:F1-975 - United States - Regional:F561-575 - Michigan",808,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1410-1460 - Other subjects",808,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC925-935 - Diseases of the musculoskeletal system",808,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS241-286 - Special regions, states, etc.",807,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1501-1562 - Demonology.  Satanism.  Possession",805,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period",805,"N - Fine Arts:NC - Drawing, Design, Illustration:NC997-1003 - Commercial art.  Advertising art",805,"R - Medicine:RG - Gynecology & Obstetrics:RG133-137.6 - Conception.  Artificial insemination.  Contraception",805,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3230-3238 - Poetry",804,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7220-7262.5 - Collections:PT7230-7252 - Poetry",804,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD66-66.2 - Work groups.  Team work in industry. Quality circles",803,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ4113-4601 - Property tax",803,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6061-6073 - Modern",803,"Q - Science:QR - Microbiology:QR355-502 - Virology",802,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL624-629.5 - Religious life",801,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS555-555.98 - Laos",799,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9870-9875 - 1900-1960",799,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E186-189 - General",797,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV7200-7539 - Canada, Latin America, etc.",797,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN281-289 - Human evolution",796,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education",795,"R - Medicine:RF - Otorhinolaryngology",793,"M - Music:ML - Literature on music:ML93-96.5 - Manuscript studies and manuscripts",792,"P - Language & Literature:PN - Literature (General):PN3311-3503 - Prose.  Prose fiction:PN3355-3383 - Technique.  Authorship",792,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education:S544-545.53 - Agricultural extension work",792,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD5001-5929 - Swedish",791,"T - Technology:T - Technology (General):T391-995 - Exhibitions.  Trade shows.  World's fairs",791,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches",789,"D - World History:DA-DR - Europe:DG - Italy:DG819-875 - Southern Italy:DG840-857.5 - Naples.  Kingdom of the Two Sicilies",789,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS160-167 - Pharmacognosy.  Pharmaceutical substances (Plant, animal, and inorganic)",789,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV4480-4630 - Mendicancy.  Vagabondism.  Tramps. Homelessness",788,"N - Fine Arts:N - Visual arts:N8600-8675 - Economics of art",788,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV7935-8025 - Administration and organization",787,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z4-8 - History of books and bookmaking",786,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD95-131 - Metaphysics",785,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology:BF1001-1045 - Psychic research.  Psychology of the conscious",784,"J - Political Science:J - General Legislative & Executive Papers:J80-87 - United States",784,"E-F - History of the Americas:F1-975 - United States - Regional:F266-280 - South Carolina",783,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2061-2071 - Art of acting",783,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG431-457 - Antiquities.  Social life and customs.  Ethnography",782,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5387-5387.5 - Business ethics:HF5381-5386 - Vocational guidance.  Career devlopment",781,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFI1201-1799 - Illinois",781,"D - World History:DA-DR - Europe:DA - Great Britain:DA20-690 - England:DA28-592 - History:DA129-592 - By period:DA300-592 - Modern, 1485-:DA310-360 - Tudors, 1485-1603:DA350-360 - Elizabeth I, 1558-1603.  Elizabethan age",780,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ221-1152 - By region or country",780,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P301-301.5 - Style.  Composition.  Rhetoric",780,"G - Geography, Anthropology, Recreation:G - Geography (General):G80-99 - History of geography",777,"K - Law:KJ-KKZ - Europe:KJJ - Austria",777,"U - Military Science:U - Military Science (General):U263-264.5 - Atomic warfare.  Atomic weapons",777,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC501-721 - Electricity:QC717.6-718.8 - Plasma physics.  Ionized gases",776,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ163.26-163.5 - Energy conservation",775,"M - Music:MT - Instruction and study:MT820-915 - Singing and vocal technique",774,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2200-2292 - Sacraments",773,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX880-891 - General collected works",773,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E341-370 - Madison's administrations, 1809-1817:E351.5-364.9 - War of 1812",770,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History",769,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages:PL3551-4001 - Tibeto-Burman languages:PL3561-3801 - Tibeto-Himalayan languages:PL3781-3801 - Himalayan languages",769,"T - Technology:TA - Engineering (General), Civil Engineering:TA715-787 - Earthwork.  Foundations",769,"B - Philosophy, Psychology, Religion:BH - Aesthetics:BH81-208 - History",767,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History",767,"A - General:AM - Museums, Collectors & Collecting:AM10-100 - By country",766,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E660-664 - General:E663-664 - Biography",766,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3450-3470 - 1870-1917:PG3455-3458 - Chekhov",765,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD201-500 - Water supply for domestic and industrial purposes:TD429.5-480.7 - Water purification.  Water treatment and conditioning.  Saline water conversion",763,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5197-5199 - Biography",759,"J - Political Science:JN - Political Institutions (Europe):JN8101-8399 - Spain",759,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2331.7-2335.8 - Teaching personnel",759,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN1008.2-1009.5 - Juvenile literature",759,"B - Philosophy, Psychology, Religion:BC - Logic:BC60-99 - General works",757,"T - Technology:T - Technology (General):T201-342 - Patents.  Trademarks",757,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4413-4434 - Sophocles",756,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period",755,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History",755,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476",755,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.",755,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.",755,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3041-3065 - Poetry",755,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9801-9869 - Unitarianism",754,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM723-729 - Jewish way of life.  Spiritual life.  Mysticism.  Personal religion.  Moral theology",752,"K - Law:KUQ - New Zealand",752,"L - Education:LA - History of education:LA31-135 - By period",749,"R - Medicine:R - Medicine (General):R858-859.7 - Computer applications to medicine.  Medical informatics",749,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1037-1039 - Books for special classes of persons, institutions, etc.",749,"G - Geography, Anthropology, Recreation:G - Geography (General):G521-539 - Adventures, shipwrecks, buried treasure, etc.",747,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts",746,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology:BF1228-1389 - Spiritualism",745,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period",745,"N - Fine Arts:N - Visual arts:N8700-9165 - Art and the state.  Public art",745,"P - Language & Literature:PN - Literature (General):PN3311-3503 - Prose.  Prose fiction:PN3451-3503 - History",743,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV680-696 - Free professional services",742,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1841-1870.95 - Gujarati",742,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1700-1973 - Social legislation:K1701-1841 - Labor law",739,"P - Language & Literature:P - Philology & Linguistics:P901-1091 - Extinct ancient or medieval languages",738,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL689-980 - European.  Occidental:BL900-980 - Other European",734,"E-F - History of the Americas:E151-909 - United States:E895-904 - Twenty-first century",734,"T - Technology:TN - Mining Engineering, Metallurgy:TN263-271 - Mineral deposits.  Metallic ore deposits.  Prospecting",734,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3916-3918 - Social and political aspects of music",733,"E-F - History of the Americas:E11-143 - America:E11-29 - General",732,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD45-45.2 - Technological innovations.  Automation",732,"S - Agriculture:SF - Animal Culture:SF371-379 - Sheep.  Wool",732,"G - Geography, Anthropology, Recreation:G - Geography (General):G200-336 - History of discoveries, explorations, and travel",731,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNN - China",731,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC705-779 - Diseases of the respiratory system",731,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1056-1059.7 - Ontario",730,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC901-915 - Islamic education",730,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3200-3202 - World.  Earth",729,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS569-580 - Men, women, and children of the Bible:BS580 - Individual Old Testament characters",728,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History",727,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU120-125 - Ethnography",727,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK2896-2985 - Production of electricity by direct energy conversion",727,"U - Military Science:UH - Other Military Services:UH201-515 - Medical and sanitary services",727,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM700-720 - Rites and customs",726,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ8000-9800 - Special modifications, sects, etc.:BQ8500-8769 - Pure Land Buddhism",726,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1900-1941 - Haiti (Island).  Hispaniola:F1912-1930 - Haiti (Republic)",726,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR251-369 - Medieval.  Middle English (1066-1500)",726,"B - Philosophy, Psychology, Religion:BM - Judaism:BM1-449 - General:BM150-449 - History:BM201-449 - By region or country",725,"H - Social Sciences:HM - Sociology:HM481-554 - Theory.  Method.  Relations to other subjects",725,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2400-4563 - Monasticism.  Religious orders:BX4200-4563 - Religious orders of women",722,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC64.7-94 - 476-1328.  Merovingians.  Carlovingians.  Capetians",722,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ151-221 - Medieval.  Old French",721,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG600-650 - The embryo and fetus",721,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5051-5110 - History.  Local divisions",720,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC95-109 - 1328-1515",720,"H - Social Sciences:HJ - Public Finance:HJ6603-7390 - Customs administration",719,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR441-449 - 18th century",719,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements:DS595-595.2 - Ethnography",718,"H - Social Sciences:HE - Transportation & Communications:HE305-311 - Urban transportation",717,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN406-442 - Technology.  Material culture",716,"E-F - History of the Americas:F1-975 - United States - Regional:F901-951 - Alaska",715,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT179-258 - Keyboard instruments",711,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K2100-2385 - Courts.  Procedure",710,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8100-8167 - 19th century",710,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ401-411 - Local history and description",709,"E-F - History of the Americas:F1-975 - United States - Regional:F176-190 - Maryland",708,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV712-725 - Athletic contests.  Sports events",708,"D - World History:DS - Asia:DS376-392.2 - Pakistan:DS392-392.2 - Local history and description",707,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC215-238.4 - Community and the school",707,"B - Philosophy, Psychology, Religion:BF - Psychology:BF697-697.5 - Differential psychology.  Individuality.  Self",704,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History:DB2080-2247 - By period:DB2185-2241 - Czechoslovak Republic, 1918-1992",703,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1212.32-1215 - Doctrines.  Theology",701,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G9095-9794 - Oceans (General)",700,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK5500-6060 - Glyptic arts",699,"T - Technology:TX - Home Economics:TX301-339 - The house",699,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK507-507.95 - Belarus.  Byelorussian S.S.R.  White Russia",698,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMK - Israel",697,"Q - Science:QM - Human anatomy:QM550-577.8 - Human and comparative histology",697,"E-F - History of the Americas:F1-975 - United States - Regional:F1-15 - New England",696,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1151-1241 - Poetry",696,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G5670-8904 - Eastern Hemisphere.  Eurasia, Africa, etc.:G5700-7342 - Europe:G7000-7342 - Former Soviet republics.  Union of Soviet Socialist Republics (U.S.S.R.).  Russia (Empire)",695,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject:CT3200-3830 - Biography of women (Collective)",694,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD56-57.5 - Industrial productivity",694,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean",693,"L - Education:LA - History of education:LA5-25 - General",693,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms",693,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6700-6726 - Individual authors, 2001-",693,"K - Law:KHA-KHW - South America:KHQ - Peru",692,"D - World History:DT - Africa:DT348-363.3 - Central Sub-Saharan Africa",691,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN851-884 - Comparative literature",691,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ840-999 - Biography:BQ860-999 - Individual:BQ860-939 - Gautama Buddha",690,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG181-184 - Indonesia",690,"R - Medicine:RA - Public Aspects of Medicine:RA791-954 - Medical geography.  Climatology.  Meteorology",690,"P - Language & Literature:PN - Literature (General):PN1560-1590 - The performing arts.  Show business",689,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR471-479 - 20th century",689,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML159-161 - General works",688,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP191-253 - Branches, sects, etc.:BP192-194.9 - Shiites",687,"N - Fine Arts:NK - Decorative Arts:NK1160-1590 - Decoration and ornament.  Design:NK1505-1535 - General works",687,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4091-4131 - Poetry",686,"Q - Science:QP - Physiology:QP901-981 - Experimental pharmacology",684,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History",683,"T - Technology:T - Technology (General):T10.5-11.9 - Communication of technical information",683,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML430-458 - Composition and performance",682,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3260-3299 - Prose",681,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z657-659 - Freedom of the press.  Censorship",681,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z719-723 - Libraries (General)",681,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP1-68 - General:BP42-48 - Study and teaching",680,"D - World History:DS - Asia:DS80-90 - Lebanon (Phenicia):DS80.7-87.6 - History",680,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR700-860 - Animals, plants, and minerals",680,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT713-725 - Caste system",680,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV8490-8758 - Asia",680,"V - Naval Science:VA - Navies (Organization, Distribution, Naval Situation):VA49-395 - United States",680,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC111-120 - 1515-1589.  16th century",679,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z711-711.95 - Public services.  Reference services",679,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint",678,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR4501-6305 - Chivalry and knighthood (Orders, decorations, etc.):CR4651-6305 - Orders, etc.",676,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z999-1000.5 - Booksellers' catalogs",676,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL550-619 - Worship.  Cultus",675,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV205-287 - Prayer",675,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2280-2545 - Works about the New Testament:BS2430-2520 - Men, women, and children of the New Testament",674,"B - Philosophy, Psychology, Religion:BF - Psychology:BF231-299 - Sensation.  Aesthesiology",673,"G - Geography, Anthropology, Recreation:G - Geography (General):G100.5-108.5 - Toponymy",673,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4600-4800 - Local history and description",672,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT371-390 - Ethiopia (Abyssinia)",672,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4551-4598 - Stock exchanges",672,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS2501-3371 - Clubs.  Clubs and societies for special classes",672,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9665-9675 - Pharmaceutical industry",671,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV4701-4890.9 - Protection of animals.  Animal rights.  Animal welfare",671,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6661-6693 - Seneca, Lucius Annaeus",670,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History",669,"S - Agriculture:SF - Animal Culture:SF461-473 - Birds.  Cage birds",669,"D - World History:D - History (General):D101-110.5 - Medieval and modern history, 476-",668,"J - Political Science:JF - Political Institutions (General):JF1338-2112 - Public administration:JF2011-2112 - Political parties",668,"K - Law:KZ - Law of nations:KZ24-38 - Societies, etc.",668,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1470-1476 - Size of farms",667,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3805-3817 - Physics and acoustics",667,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ400-491 - Poetry",667,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR32-48.5 - History.  Balkan War, 1912-1913",665,"E-F - History of the Americas:F1-975 - United States - Regional:F31-45 - New Hampshire",665,"G - Geography, Anthropology, Recreation:GE - Environmental Sciences:GE300-350 - Environmental management",665,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1110-1279 - History and criticism",665,"K - Law:KZ - Law of nations:KZ3092-3405 - 20th century",664,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC2700-3708 - Dialects.  Provincialisms:PC3201-3366 - Provencal (Old)",662,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3091-3099 - Prose",662,"T - Technology:TC - Hydraulic engineering:TC601-791 - Canals and inland navigation.  Waterways",661,"U - Military Science:UC - Maintenance & Transportation:UC260-267 - Supplies and stores",661,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period",659,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period",659,"P - Language & Literature:P - Philology & Linguistics:P98-98.5 - Computational linguistics.  Natural language processing",659,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1720-1861 - History",659,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8501-8745 - By region or country",658,"T - Technology:TS - Manufactures:TS1080-1268 - Paper manufacture and trade",658,"D - World History:DS - Asia:DS155-156 - Asia Minor",657,"P - Language & Literature:P - Philology & Linguistics:P87-96 - Communication.  Mass media:P95-95.6 - Oral communication.  Speech",657,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC1030-1160 - Transportation medicine",657,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF225-619 - Organs and functions of government:JF491-619 - Legislation.  Legislative process.  Law-making",656,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR421-429 - Elizabethan era (1550-1640)",656,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS400-431 - Pharmaceutical chemistry",656,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ751-805 - Miscellaneous motors and engines",656,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC281-326.5 - Franco-German or Franco-Prussian War, 1870-1871",655,"D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East:DS51-54.95 - Local history and description:DS54-54.95 - Cyprus",655,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1040-1119 - Machinery exclusive of prime movers",655,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809",652,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG401-421 - General",651,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV770.3-840 - Water sports (Canoeing, sailing, yachting, scuba diving, etc.)",651,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2280-2545 - Works about the New Testament:BS2350-2393 - Criticism and interpretation",649,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1030-1196.3 - History",649,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History",648,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K486-487 - Relation of law to other topics",648,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN4735-4748 - Relation to the state.  Government and the press.  Liberty of the press",648,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG51-53 - China",647,"D - World History:DA-DR - Europe:DG - Italy:DG819-875 - Southern Italy:DG861-875 - Sicily",646,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4625-4780 - Moral theology:BV4630-4647 - Virtues",645,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG443-449 - Attack and defense.  Siege warfare",645,"K - Law:KHA-KHW - South America:KHW - Venezuela",644,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS580-619 - Poetry:PS601-617 - By period",644,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF781-809 - Communicable diseases of animals (General)",644,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK70-112.42 - Early to 1613:DK70-99.7 - Rus'",643,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1301-1366 - Business associations",643,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2115-2146 - Hymnals. Hymn collections",643,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB2001-3029 - Brittanic group:PB2101-2499 - Welsh.  Cymric",643,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1502-1645 - Croatia",642,"P - Language & Literature:PN - Literature (General):PN3311-3503 - Prose.  Prose fiction:PN3329-3352 - Philosophy, theory, etc.",642,"D - World History:DS - Asia:DS201-248 - Arabian Peninsula.  Saudi Arabia:DS221-244.63 - History",641,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM510-518 - Midrash",640,"D - World History:DS - Asia:DS92-99 - Syria:DS99 - Provinces, regions, cities, etc.",640,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1600-2726 - Modern literature:PQ2700-2726 - 2001-",640,"D - World History:DA-DR - Europe:DA - Great Britain:DA10-18.2 - British Empire.  Commonwealth of Nations.  The Commonwealth",639,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1751-1854.9 - Cuba:F1788-1788.22 - Communist regime",639,"D - World History:D - History (General):D111-203 - Medieval history:D151-173 - Crusades",638,"E-F - History of the Americas:E11-143 - America:E101-135 - Discovery of America and early explorations:E111-120 - Columbus",638,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS163-173 - Treatment of special subjects, classes",637,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS537-574 - By region",637,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC633-647.5 - Diseases of the blood and blood-forming organs",637,"D - World History:DS - Asia:DS350-375 - Afghanistan:DS355-371.3 - History",636,"H - Social Sciences:HB - Economic Theory, Demography:HB801-843 - Consumption.  Demand",636,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC65-67.68 - Economic aspects of education",635,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature:PT500-597 - Poetry",634,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America",633,"T - Technology:T - Technology (General):T175-178 - Industrial research.  Research and development",632,"D - World History:DA-DR - Europe:DE - The Greco-Roman World:DE46-73.2 - Antiquities.  Civilization.  Culture.  Ethnography",630,"D - World History:DU - Oceania (South Seas):DU520-950 - Smaller island groups:DU620-629 - Hawaiian Islands.  Hawaii",630,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV6201-6347 - Immigration",630,"D - World History:DS - Asia:DS651-689 - Philippines:DS665-666 - Ethnography",629,"H - Social Sciences:HX - Socialism, Communism, Anarchism:HX806-811 - Utopias.  The ideal state",629,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1990-1992.92 - Broadcasting:PN1991-1991.9 - Radio broadcasts",627,"Q - Science:QC - Physics:QC221-246 - Acoustics.  Sound",627,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2033-2129 - Individual islands",626,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K4011-4343 - Transportation and communication",624,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC189-214.53 - Educational sociology:LC213-214.53 - Educational equalization.  Right to education",622,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD2201-2393 - Old Norse.  Old Icelandic and Old Norwegian",622,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1259-1321 - By period:DR1281-1321 - 1918-:DR1313-1313.8 - Yugoslav War, 1991-1995",620,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP600-610 - Other beliefs and movements",619,"S - Agriculture:SF - Animal Culture:SF391-397.83 - Swine",617,"B - Philosophy, Psychology, Religion:BM - Judaism:BM480-488.8 - Pre-Talmudic Jewish literature (non-Biblical)",613,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P375-381 - Linguistic geography",613,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period",612,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1-11 - General",612,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy:CN870-1355 - By region or country",611,"S - Agriculture:S - Agriculture (General):S583-587.73 - Agricultural chemistry.  Agricultural chemicals",610,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions:BV2123-2595 - Special churches:BV2350-2595 - Protestant churches",609,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR701-741 - Local history and description (European Turkey)",609,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1035-1035.9 - Best books",609,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4620-4905 - Buddhist pantheon",607,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD233-257.4 - Revolution and Republic, 1918-:DD257-257.4 - Period of Allied occupation, 1945-",607,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3830-3840 - Psychology",607,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8800-8942 - 19th century:PT8851-8900 - Ibsen, Henrik",607,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4207-4225 - Poetry",606,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology:BF1048-1108 - Hallucinations.  Sleep.  Dreaming.  Visions",605,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP170 - Works in defense of Islam.  Islamic apologetics",605,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG310-365 - 284-476.  Decline and fall",605,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519:DD126-155 - Medieval Empire, 481-1273",604,"K - Law:KZ - Law of nations:KZ3092-3405 - 20th century:KZ3110-3405 - Publicists.  Writers on public international law",604,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD2401-2446 - Modern Icelandic",604,"K - Law:KHA-KHW - South America:KHF - Chile",603,"K - Law:KQ-KTZ - Africa:KRM - Egypt",603,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9371-9399 - Health insurance",602,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5881-5881.36 - 1961-2000",602,"T - Technology:TC - Hydraulic engineering:TC540-558 - Dams.  Barrages",602,"U - Military Science:U - Military Science (General):U799-897 - History of arms and armor",602,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV1460-1615 - Religious education (General)",601,"S - Agriculture:SB - Plant Culture:SB113.2-118.46 - Seeds.  Seed technology",601,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5200-5207 - Dissent and nonconformity",600,"H - Social Sciences:HG - Finance:HG179 - Personal finance",600,"D - World History:DT - Africa:DT43-154 - Egypt:DT115-154 - Local history and description",599,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3820-3836 - Economic constitution, policy, planning, and development",599,"D - World History:DS - Asia:DS5.95-10 - Description and travel",598,"L - Education:LB - Theory & Practice of Education:LB1140-1140.5 - Preschool education.  Nursery schools",598,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC251-318 - Moral education.  Character building",598,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language:PJ6701-6901 - Modern Arabic dialects",597,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections:PQ6170-6174.9 - General",597,"R - Medicine:RC - Internal Medicine:RC86-88.9 - Medical emergencies.  Critical care.  Intensive care.  First aid",597,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training:GV460-555 - Gymnastics.  Gymnastic exercises",596,"R - Medicine:RC - Internal Medicine:RC71-78.7 - Examination.  Diagnosis",596,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL2000-2032 - India:BL2017-2018.7 - Sikhism",595,"D - World History:DX - Romanies",595,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life:BQ5595-5633 - Devotion.  Meditation.  Prayer",594,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z240-241.5 - Incunabula.  Block books",594,"D - World History:DS - Asia:DS901-937 - Korea:DS930-937 - Democratic People's Republic, 1948-",593,"P - Language & Literature:PE - English Languages:PE101-458 - Anglo-Saxon.  Old English",593,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject:CT3990 - Academicians.  Scholars. Savants",592,"H - Social Sciences:HF - Commerce:HF1040-1054 - Commodities.  Commercial products",592,"J - Political Science:JK - Political Institutions (United States):JK1717-2217 - Political rights.  Practical politics:JK1846-1929 - Suffrage",592,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K625-709 - Persons:K670-709 - Domestic relations.  Family law",592,"N - Fine Arts:NA - Architecture:NA2000-2320 - Study and teaching.  Research",592,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL689-980 - European.  Occidental:BL830-875 - Germanic and Norse",591,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD10-41 - General philosophical works",589,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1561-1577 - Panama",589,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z696-697 - Classification and notation",589,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4650-4705 - Biography and portraits:BX4650-4698 - Collective:BX4654-4662 - Saints and martyrs",588,"L - Education:LB - Theory & Practice of Education:LB3602-3640 - School life.  Student manners and customs",588,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK7800-8360 - Electronics:TK8300-8360 - Photoelectronic devices (General)",588,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century:D251-271 - Thirty Years' War, 1618-1648",587,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG395 - Other",587,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN451-497 - Biography",586,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV301-530 - Hymnology:BV467-510 - Hymns in languages other than English",585,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD5001-6471 - Seals",585,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period",585,"A - General:AI - Indexes",584,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM7801-7895 - Mixed languages",584,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC500-510 - Psychoanalysis",584,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K540-546 - Trials",583,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFT1201-1799 - Texas",583,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT83-873 - History of German literature:PT605-709 - Drama",583,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL301-398 - Iceland:DL335-380 - History",582,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA3825-3849 - Aeschylus",582,"A - General:AZ - History of Scholarship & Learning, The Humanities:AZ501-908 - By region or country",581,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT1772-1974 - History",581,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFO1-599 - Ohio",581,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1340-1367 - Landscape painting",581,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8949-8950 - 1900-1960",581,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2000-2007 - Dramatic music",580,"J - Political Science:JC - Political Theory:JC319-323 - Political geography",577,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K2400-2405 - Arbitration and award",577,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media",577,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPS - Sri Lanka",576,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E337.8-340 - General:E339-340 - Biography",575,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4850-5490 - Intergovernmental organizations.  IGOs",575,"L - Education:LB - Theory & Practice of Education:LB1101-1139 - Child study:LB1139.2-1139.5 - Early childhood education",575,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2102-2114.8 - One solo voice",574,"R - Medicine:RB - Pathology:RB1-17 - General works",574,"E-F - History of the Americas:F1-975 - United States - Regional:F771-785 - Colorado",573,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV9950-9960 - By region or country",573,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-",571,"D - World History:DS - Asia:DS161-195.5 - Armenia",571,"T - Technology:TL - Motor Vehicles, Aeronautics, Astronautics:TL780-785.8 - Rocket propulsion.  Rockets",571,"E-F - History of the Americas:F1-975 - United States - Regional:F871-885 - Oregon",569,"N - Fine Arts:NB - Sculpture:NB1910-1952 - Special subjects",569,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS185-231 - By period:PS201-217 - 19th century",569,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC627.5-632 - Metabolic diseases",569,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z43-45 - Calligraphy.  Penmanship",568,"B - Philosophy, Psychology, Religion:BD - Speculative Philosophy:BD240-260 - Methodology",567,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV697-700.7 - Families.  Mothers.  Widow's pensions",567,"T - Technology:TC - Hydraulic engineering:TC203-380 - Harbors and coast protective works.  Coastal engineering. Lighthouses",566,"E-F - History of the Americas:E11-143 - America:E101-135 - Discovery of America and early explorations:E103-110 - Pre-Columbian period",565,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1060-1060.97 - Canadian Northwest.  Northwest Territories",565,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV551.2-639 - Emergency management:HV553-639 - Relief in case of disasters:HV599-639 - Special types of disasters",565,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG1801-1962 - Slovenian",565,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2155-2191 - Caribbean area.  Caribbean Sea",563,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E876-880 - Reagan's administrations, 1981-1989",562,"L - Education:LB - Theory & Practice of Education:LB3401-3495 - School hygiene.  School health services",562,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK1971-1979.5 - Urdu language",561,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC501-721 - Electricity:QC701-715.4 - Electric discharge",561,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E171-180 - General:E175-175.7 - Historiography",560,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ836-927 - Hydraulic machinery",560,"E-F - History of the Americas:F1-975 - United States - Regional:F601-615 - Minnesota",559,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1100-1297 - Collections:PQ1243-1297 - Prose",559,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ115-126 - General collections.  Collected works",558,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant",558,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN62.8-265 - Human variation (incl growth, physical form, skeleton, nervous system, skin, etc.)",558,"H - Social Sciences:HX - Socialism, Communism, Anarchism:HX626-696 - Communism (Utopian socialism, collective settlements)",557,"S - Agriculture:SF - Animal Culture:SF41-55 - History",557,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6131-6153 - Prose",556,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4050-4480 - Electronic information resources",555,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27",554,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG551-591 - Pregnancy",554,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan",553,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD61 - Risk in industry.  Risk management",553,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5469.7-5481 - Markets.  Fairs",553,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK9600-9955 - Woodwork",553,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3601-3681 - Translations",553,"T - Technology:T - Technology (General):T55-55.3 - Industrial safety.  Industrial accident prevention",553,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP187-187.9 - Shrines, sacred places, etc.",552,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH801-811 - Local history and description",552,"E-F - History of the Americas:F1-975 - United States - Regional:F676-690 - Kansas",552,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1951-1983 - Puerto Rico",552,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK845-860 - Soviet Central Asia.  West Turkestan",551,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT641-657 - Classes arising from birth",551,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1-771 - History and criticism:PQ500-591 - Drama",551,"Q - Science:QE - Geology:QE500-639.5 - Dynamic and structural geology:QE601-613.5 - Structural geology",551,"T - Technology:TH - Building Construction:TH2025-3000 - Details in building design and construction",550,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K321-474 - Schools of legal theory:K400-474 - Natural law",549,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL2390-2490 - African:BL2420-2460 - Egyptian",547,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3100-3155 - Folk literature (incl texts)",547,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492",545,"E-F - History of the Americas:F1-975 - United States - Regional:F446-460 - Kentucky",545,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1401-1578 - Intellectual property:K1500-1578 - Industrial property",545,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2337.2-2340.8 - Student financial aid",543,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF207-218 - General",542,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-",541,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ450-472 - Erotica",541,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3800 - General works",541,"S - Agriculture:SK - Hunting Sports:SK40-268 - By country",540,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections:PQ6174.95-6215 - Poetry",539,"T - Technology:TP - Chemical Technology:TP890-933 - Textile bleaching, dyeing, printing, etc.",539,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E838-840.8 - General:E840-840.2 - Diplomatic history.  Foreign and general relations",538,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3450-3470 - 1870-1917:PG3462-3465 - Gorky",538,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK510-651 - Russia (Federation).  Russian S.F.S.R.:DK541-579 - Saint Petersburg.  Leningrad.  Petrograd",537,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1800-1860 - Circuses, spectacles, etc.",537,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA639-642 - Transmission of disease",537,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX1-9.5 - Church unity.  Ecumenical movement.  Interdenominational cooperation",536,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security",536,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB101-879 - Local history and description:DB879 - Other cities, towns, etc., A-Z",535,"D - World History:DS - Asia:DS67-79.9 - Iraq (Assyria, Babylonia, Mesopotamia):DS69-70.5 - Antiquities",535,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5460-5469.5 - Department stores.  Mail order business. Supermarkets.  Convenience stores",535,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS650-667 - Bible and science",534,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN1801-2399 - New Jersey",533,"J - Political Science:JS - Local & Municipal Government:JS2300-2778 - South America",532,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections:PQ6217-6241 - Drama",532,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1281-1309 - Prose (General)",532,"Q - Science:Q - Science (General):Q300-390 - Cybernetics:Q350-390 - Information theory",532,"H - Social Sciences:HM - Sociology:HM661-696 - Social control",531,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV199-199.62 - Hiking.  Pedestrian tours",530,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD233-257.4 - Revolution and Republic, 1918-:DD253-256.8 - Hitler, 1933-1945.  National socialism",529,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E711-738 - McKinley's first administration, 1897-1901",529,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ750-755.5 - Eugenics",529,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNC - Regional comparative and uniform law",529,"D - World History:DS - Asia:DS901-937 - Korea:DS924-925 - Local history and description",527,"L - Education:L - Education (General):L900-991 - Directories of educational institutions",527,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2280-2545 - Works about the New Testament:BS2525-2544 - Study and teaching",526,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3521-4001 - Sino-Tibetan languages:PL3551-4001 - Tibeto-Burman languages:PL3561-3801 - Tibeto-Himalayan languages:PL3601-3775 - Tibetan",526,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1300-1595 - Old French literature:PQ1551-1595 - (14th-) 15th century (to ca. 1525)",526,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4002-4080 - The state",525,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP171-173 - Relation of Islam to other religions:BP173.25-173.45 - Islamic sociology",524,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC952-954.6 - Geriatrics",524,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ811-960.7 - Divorce",523,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS126-138 - Biography, memoirs, letters, etc.",522,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3332-3335 - Gogol'",521,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages:PL400-431 - Mongolian languages",521,"T - Technology:TA - Engineering (General), Civil Engineering:TA168 - Systems engineering",520,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z716.2-718.85 - Libraries in relation to special topics",520,"E-F - History of the Americas:F1-975 - United States - Regional:F521-535 - Indiana",519,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR485-555.7 - 1281/1453-1789.  Fall of Constantinople, 1453",517,"Q - Science:QL - Zoology:QL750-795 - Animal behavior:QL791-795 - Stories and anecdotes",517,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF915-919.5 - Veterinary pharmacology",517,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS315 - Asian languages",516,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements:DS597.22-599 - Local history and description:DS597.36-597.39 - Sarawak",516,"H - Social Sciences:HE - Transportation & Communications:HE8701-9680.7 - Telephone industry",516,"P - Language & Literature:PH - Uralic & Basque Languages:PH101-405 - Finnish",516,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG940-991 - Maternal care.  Prenatal care services",516,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.",515,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC1000-1023 - Marine resources.  Applied oceanography",515,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC275-280.5 - Second Empire, 1852-1870",514,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK510-651 - Russia (Federation).  Russian S.F.S.R.:DK588-609 - Moscow",514,"K - Law:KZ - Law of nations:KZ1329-3085 - Early/Medieval development to ca. 1900.  Ius Naturae et Gentium",514,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6705-6753 - Tacitus, Cornelius",514,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN661-694 - Medieval (to 1500):PN683-687 - Legends",514,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF911-914.4 - Veterinary surgery",514,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.5-646.59 - Timor",513,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ799.5-799.9 - Young men and women",513,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K321-474 - Schools of legal theory:K366-380 - Sociology of law.  Sociological jurisprudence",510,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1111-1143.2 - Sacred books.  Sources:BL1140.2-1140.4 - Puranas",509,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN495.4-498 - Societal groups, ethnocentrism, diplomacy, warfare, etc.",509,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ71-72 - Sexual deviations",509,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFC3601-4199 - Connecticut",509,"K - Law:KU-KUN - Australia:KUA-KUH - States and territories",509,"S - Agriculture:SB - Plant Culture:SB107-109 - Economic botany",509,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z716.2-718.85 - Libraries in relation to special topics:Z665-718.8 - Library science.  Information science",509,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes",507,"M - Music:M - Music:M5-1480 - Instrumental music:M1200-1270 - Band",507,"R - Medicine:RC - Internal Medicine:RC306-320.5 - Tuberculosis",507,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM311-466 - Special types of vessels",507,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV169-199 - Liturgy and ritual",506,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions:BV2123-2595 - Special churches:BV2130-2300 - Roman Catholic Church",505,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB158-161 - Forecasts of future progress",505,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA777-790 - Early and medieval to 1603",504,"C - Historical Sciences (Archaeology, Genealogy):CE - Technical Chronology, Calendar:CE51-85 - Medieval and modern",503,"E-F - History of the Americas:F1-975 - United States - Regional:F46-60 - Vermont",503,"E-F - History of the Americas:F1-975 - United States - Regional:F461-475 - Missouri",502,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D284-297 - 1715-1789.  18th century",501,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History",501,"V - Naval Science:V - Naval Science (General):V750-995 - War vessels (Construction, armament, etc.)",501,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1900-1941 - Haiti (Island).  Hispaniola:F1931-1941 - Dominican Republic",500,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6080-6095 - Quotations",499,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR576-605 - 20th century.  Constitutional movement",498,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA750-757.7 - General",497,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL301-398 - Iceland:DL396-398 - Local history and description",497,"E-F - History of the Americas:F1-975 - United States - Regional:F806-820 - Arizona",497,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant:BX4718.5-4735 - Jansenists",496,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD176-189 - 1519-1648.  Reformation and Counter-reformation",496,"K - Law:KV-KWW - Pacific Area Jurisdictions",496,"E-F - History of the Americas:F1-975 - United States - Regional:F576-590 - Wisconsin",495,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG221-225 - Pre-Roman Italy.  Etruria.  Etruscans",494,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPK - Nepal",493,"Q - Science:QB - Astronomy:QB349-421 - Theoretical astronomy and celestial mechanics",493,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA3890-3926 - Aristotle",492,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ3001-3097 - Semitic philology and literature",492,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM15-124 - History",492,"J - Political Science:JZ - International relations:JZ6360-6377 - Non-military coercion",490,"T - Technology:TN - Mining Engineering, Metallurgy:TN275-325 - Practical mining operations.  Safety measures",490,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2085-2091 - The stage and accessories",489,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E666-670 - Andrew Johnson's administration, April 15, 1865-1869",488,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E743-743.5 - Political history:E743.5 - Un-American activities",488,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1100-1297 - Collections:PQ1160-1193 - Poetry",488,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB449-450.87 - Flower arrangement and decoration",488,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP170-189 - 1516-1700.  Habsburgs",487,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF51-56 - General works.  History",487,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ1-20 - General",486,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1652-1785 - Bosnia and Hercegovina",486,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ1088-1090.7 - Men",485,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC8 - General works",485,"N - Fine Arts:NK - Decorative Arts:NK1-570 - General",485,"T - Technology:TA - Engineering (General), Civil Engineering:TA177.4-185 - Engineering economy",485,"E-F - History of the Americas:F1-975 - United States - Regional:F431-445 - Tennessee",484,"E-F - History of the Americas:F1-975 - United States - Regional:F76-90 - Rhode Island",484,"H - Social Sciences:HF - Commerce:HF294-343 - Boards of trade.  Chambers of commerce. Merchants' associations",483,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFV2401-2999 - Virginia",483,"M - Music:ML - Literature on music:ML3797-3799.5 - Musical research",483,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA8200-8260 - Farm architecture",482,"T - Technology:TA - Engineering (General), Civil Engineering:TA1001-1280 - Transportation engineering",482,"J - Political Science:JN - Political Institutions (Europe):JN1601-2191 - Austria-Hungary.  Austria.  Hungary",478,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors:PS700-893 - Colonial period (17th and 18th centuries)",478,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period",477,"K - Law:KZ - Law of nations:KZ1329-3085 - Early/Medieval development to ca. 1900.  Ius Naturae et Gentium:KZ2064-3085 - Publicists.  Writers on public international law",477,"T - Technology:TP - Chemical Technology:TP670-699 - Oils, fats, and waxes:TP690-692.5 - Petroleum refining.  Petroleum products",477,"K - Law:KJ-KKZ - Europe:KKM - Netherlands",476,"M - Music:MT - Instruction and study:MT3-5 - History",476,"S - Agriculture:SF - Animal Culture:SF105-109 - Breeding and breeds",475,"T - Technology:T - Technology (General):T173.2-174.5 - Technological change:T61-173 - Technical education.  Technical schools",475,"Q - Science:QB - Astronomy:QB140-237 - Practical and spherical astronomy",474,"Q - Science:QM - Human anatomy:QM601-695 - Human embryology",474,"R - Medicine:RJ - Pediatrics:RJ125-145 - Physiology of children and adolescents",474,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ8000-9800 - Special modifications, sects, etc.:BQ8900-9099 - Tantric Buddhism",473,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC95-109 - 1328-1515:DC101.9-109 - 15th century.  Jeanne d'Arc, Saint",473,"K - Law:KQ-KTZ - Africa:KQC - Regional comparative and uniform law",473,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1099-1099.5 - Multicultural education (General)",473,"Q - Science:QA - Mathematics:QA47-59 - Tables",473,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS705-815 - Early versions",471,"E-F - History of the Americas:F1-975 - United States - Regional:F321-335 - Alabama",471,"H - Social Sciences:HM - Sociology:HM435-477 - History of sociology.  History of sociological theory",471,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K237-264 - The concept of law",471,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG601-716 - Church Slavic",471,"L - Education:LB - Theory & Practice of Education:LB1501-1547 - Primary education",470,"E-F - History of the Americas:E151-909 - United States:E895-904 - Twenty-first century:E902-904 - George W. Bush's administrations, 2001-2009",469,"J - Political Science:JN - Political Institutions (Europe):JN9600-9689 - Balkan States",469,"B - Philosophy, Psychology, Religion:BC - Logic:BC11-39 - History",467,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB901-906.7 - General",467,"R - Medicine:RD - Surgery:RD78.3-87.3 - Anesthesiology",467,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF501-518 - General",466,"D - World History:DS - Asia:DS501-518.9 - East Asia.  The Far East:DS518.15-518.9 - Relation of individual countries to East Asia",466,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8009.5-8014 - Literature",466,"D - World History:DS - Asia:DS35.3-35.77 - The Islamic World",465,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK1012-1432 - Congress.  Legislative branch:JK1308-1432 - House of Representatives",465,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT339-533 - Wind instruments",465,"R - Medicine:RJ - Pediatrics:RJ101-103 - Child health.  Child health services",465,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6568-6609 - Plautus, Titus Maccius",464,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV3750-3799 - Evangelism.  Revivals",462,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT211-239 - Libya",462,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K830-968 - Obligations:K840-917 - Contracts",462,"N - Fine Arts:N - Visual arts:N5300-7418 - History:N5198-5299 - Private collections and collectors",462,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF3801-3991 - Old High German",462,"T - Technology:TS - Manufactures:TS1950-1982 - Animal products",462,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3420-3445 - Turgenev",461,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1300-1595 - Old French literature:PQ1300-1391 - Collections",461,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1541-1557 - Costa Rica",459,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3223-3229.2 - Special periods",459,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT98-180 - God:BT130-153 - Divine attributes",458,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP56-75 - General",458,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB2401-2598 - Ice.  Glaciers.  Ice sheets.  Sea ice",458,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV598-603 - The Church",457,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR279-296 - Local history and description",457,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA1000-1179 - Medieval and modern Greek language",457,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6075-6098 - Poetry",457,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA440-440.87 - Study and teaching.  Research",457,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3476-3560 - Public property.  Public restraint on private property",456,"T - Technology:TP - Chemical Technology:TP480-498 - Low temperature engineering.  Cryogenic engineering.  Refrigeration",456,"B - Philosophy, Psychology, Religion:BF - Psychology:BF692-692.5 - Psychology of sex.  Sexual behavior",455,"N - Fine Arts:NC - Drawing, Design, Illustration:NC1800-1850 - Posters",455,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9725-9850 - 19th century:PT9800-9817 - Strindberg, Johan August",455,"U - Military Science:UB - Military administration:UB340-345 - Compulsory service.  Conscription and exemption",455,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2025-2213 - Modern texts and versions",454,"L - Education:LH - College & School Magazines & Papers",454,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z678-678.88 - Library administration and organization.  Constitution",454,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT98-180 - God:BT109-115 - Doctrine of the Trinity",453,"K - Law:KDZ - North America",453,"K - Law:KDZ - North America:KDZ1-4999 - America.  North America",453,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT539-654 - Plucked instruments",453,"Q - Science:QB - Astronomy:QB468-480 - Non-optical methods of astronomy",453,"D - World History:D - History (General):D720-728 - Period between World Wars (1919-1939)",451,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP233-272.4 - 20th century.  1886-:DP250-269.9 - Second Republic, 1931-1939",451,"N - Fine Arts:ND - Painting:ND2550-2733 - Mural painting",451,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG51-70 - Local history and description:DG61-69 - Rome (City) to 476",450,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR500-615 - Supernatural beings, demonology, fairies, ghosts, charms, etc.",450,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM4201-4799 - Michigan",450,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT881-951 - Folk literature",450,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8176-8176.36 - 1961-2000",449,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV30-135 - Times and seasons.  The Church year",447,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History",447,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG5201-5546 - Slovak",447,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS623-635 - Drama",447,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G4900-5184 - West Indies",446,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History",445,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT241-269 - Tunisia (Tunis):DT253.4-264.49 - History",445,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC620-627 - Nutritional diseases.  Deficiency diseases",445,"K - Law:KZ - Law of nations:KZ6350-6785 - Enforced settlement of international disputes",444,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education:LC461-510 - Roman Catholic",444,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC142-148.5 - Attendance.  Dropouts",444,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6098.7-6129 - Drama",444,"S - Agriculture:S - Agriculture (General):S600-600.7 - Agricultural meteorology.  Crops and climate",443,"E-F - History of the Americas:F1-975 - United States - Regional:F821-835 - Utah",442,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1483-1486 - Agricultural associations, societies, etc.",442,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM595-989 - Marine engineering",442,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB450-460 - Coasts",441,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN357-367 - Culture and cultural processes",441,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ801-801.83 - Man-woman relationships.  Courtship.  Dating",441,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB946-958.6 - 20th century:DB955.9-957.5 - 1945-1989.  Revolution of 1956",440,"T - Technology:TS - Manufactures:TS800-937 - Wood technology.  Lumber",440,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP425-466.3 - Usul al-fiqh. Jurisprudence and theory of law. Science of legal reasoning",439,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFF - Florida",439,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4161-4185 - Prose",439,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E195-199 - 1689-1775",438,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH141-207 - By period",437,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG400-442 - Fortification",437,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM730-747 - Preaching.  Homiletics",436,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL971-991 - Local history and description",436,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E885-889 - Clinton's administrations, 1993-2001",436,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1090-1091 - Political education",436,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4397-4420 - 1918-1945",435,"H - Social Sciences:HJ - Public Finance:HJ7461-7980 - Expenditures.  Government spending",435,"N - Fine Arts:NE - Print Media:NE2250-2570 - Lithography",435,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB5000-5030 - Natural disasters",434,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN378-396 - Collected ethnographies",434,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3842-3862 - Trade regulations.  Control of trade practices",434,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ241-254.7 - Machine construction (General)",434,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC361-424 - 20th century:DC398-409 - Fourth Republic, 1947-1958",433,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG461-473 - General",433,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K212-213 - Methodology",432,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT3701-3971 - Provincial, local, colonial, etc.:PT3701-3746 - East Germany",432,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT509.97-512.9 - Ghana (Gold Coast)",431,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC189-214.53 - Educational sociology:LC212-212.863 - Discrimination in education",431,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6110.5-6120 - Drama:PN6090-6110 - German",431,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6110.5-6120 - Drama:PN6090-6110 - German:PN6099-6110 - Poetry",431,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1271.2-1295 - Modifications.  Sects:BL1284.5-1289.592 - Vaishnavism",429,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K2100-2385 - Courts.  Procedure:K2201-2385 - Civil procedure",429,"R - Medicine:RE - Ophthalmology:RE91-912 - Particular diseases of the eye",429,"D - World History:DS - Asia:DS92-99 - Syria:DS94.9-98.3 - History",428,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT436-449 - Tanzania.  Tanganyika.  German East Africa",428,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNL - Burma",427,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1375-1479 - Middle High German",427,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFL - Louisiana",425,"D - World History:DS - Asia:DS161-195.5 - Armenia:DS173-195.5 - History",424,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK5401-5471 - Modern Indo-Aryan literature",424,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T58.5-58.64 - Information technology:T58.6-58.62 - Management information systems",424,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV800-873 - Sacraments.  Ordinances:BV823-828 - Holy Communion.  Lord's Supper.  Eucharist",423,"K - Law:KJ-KKZ - Europe:KKV - Sweden",422,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ6001-6160 - Monasticism and monastic life  Sagha (Order)",421,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG421.5-430.2 - Description and travel",421,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest:DP100-123 - Moors in Spain.  CÃ³rdoba.  Kingdom of Granada",421,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.):JL1400-1679 - Central America",421,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEO - Ontario",421,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6000-6467.36 - Flemish literature since 1830",421,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z682-682.4 - Personnel",421,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC165-182 - Higher education and the state",420,"M - Music:ML - Literature on music:ML35-38 - Festivals. Congresses",420,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2177-2198 - Meditations.  Devotional readings.  Spiritual exercises, etc.",419,"U - Military Science:UB - Military administration:UB320-338 - Enlistment, recruiting, etc.",419,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA8300-8480 - Outbuildings, gates, fences, etc.",418,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK101-185 - General",418,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS241-286 - Special regions, states, etc.:PS261-267 - South",417,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1492-1492.5 - Collective farms",416,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1401-1578 - Intellectual property:K1411-1485 - Copyright",416,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3001-3501 - Asians",416,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4279-4333 - Plato",416,"P - Language & Literature:PF - West Germanic Languages:PF1401-1541 - Friesian",416,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT468-469 - Islands (East African coast)",415,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1541-1561 - Parlor magic and tricks",415,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K46 - Monographic series",415,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1481-1497 - Salvador (El Salvador)",414,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB440-482 - Relation to special topics",413,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF895-951 - Local history and description",413,"E-F - History of the Americas:F1-975 - United States - Regional:F616-630 - Iowa",413,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD3001-3929 - Danish",413,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM7801-7895 - Mixed languages:PM7831-7875 - Creole languages",412,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP1-27 - General",411,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z700.9-701.5 - Physical parameters, preservation, conservation and restoration of books and other library materials",411,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB80-99.2 - 19th-20th centuries:DB96-99.2 - Republic, 1918-",410,"E-F - History of the Americas:F1-975 - United States - Regional:F886-900 - Washington",409,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure:K5401-5570 - Criminal procedure",409,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1203-1220.8 - Children's games and amusements",407,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4367-4389 - Plutarch",407,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description:DD701-788 - North and Central, Northeast, etc. Germany",406,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period",406,"K - Law:KZ - Law of nations:KZ1165-1208 - Trials",406,"M - Music:MT - Instruction and study:MT1 - General works",406,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism",406,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy:DG610-618.78 - Piedmont.  Savoy",405,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG258-312 - Precious metals.  Bullion",405,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF3248-3897 - Italy",405,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3310-3319 - 18th century",405,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z52-52.5 - Word processing",405,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP595-597 - Anthroposophy",404,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint:NE1980-2055.5 - History",404,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ5901-5999 - Regional, provincial, local, etc.",404,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD1020-1066 - Hazardous substances and their disposal",404,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG8001-9146 - Baltic:PG8801-9146 - Latvian",403,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT371-390 - Ethiopia (Abyssinia):DT380.5-390 - History",402,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH601-671 - Estonian",402,"B - Philosophy, Psychology, Religion:BF - Psychology:BF608-635 - Will.  Volition.  Choice.  Control",401,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1600-1609 - Persecution.  Martyrs",401,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT259-338 - Stringed instruments. Bowed stringed instruments",401,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8101-8144 - Mennonites",400,"K - Law:KZ - Law of nations:KZ1165-1208 - Trials:KZ1168-1208 - War crime trials",400,"U - Military Science:UF - Artillery:UF560-780 - Ordnance material (Ordnance proper)",399,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL473-490 - Other",397,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM690-695 - Festivals and fasts",397,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS530-536.3 - By period",396,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP201-232.6 - 1808-1886.  19th century",395,"D - World History:DS - Asia:DS101-151 - Israel (Palestine).  The Jews:DS111-111.9 - Antiquities",395,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E436-440.5 - Buchanan's administration, 1857-1861",395,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3941-3974 - Trade and commerce",395,"K - Law:KJ-KKZ - Europe:KKP - Poland",395,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9969.5-9999 - Other insurance",394,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK509 - Southern Soviet Union",393,"E-F - History of the Americas:F1-975 - United States - Regional:F336-350 - Mississippi",393,"R - Medicine:RD - Surgery:RD92-97.8 - Emergency surgery.  Wounds and injuries",393,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL20-42.5 - Antiquities.  Social life and customs.  Ethnography",392,"P - Language & Literature:PR - English Literature:PR125-138.5 - Relations to other literatures and countries",392,"S - Agriculture:SK - Hunting Sports:SK311-335 - Bird hunting.  Fowling",392,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1201-1946 - America:Z1365-1401 - Canada.  British North America",392,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4872-4924 - Pre-Reformation",390,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR431-435 - Antiquities.  Social life and customs.  Ethnography",390,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFK1201-1799 - Kentucky",390,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1001-1024 - Humanistic education.  Liberal education",389,"N - Fine Arts:ND - Painting:ND1130-1156 - General works",389,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC135-137 - Preservation, restoration, and conservation of antiquities. Antiquities and state",387,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH401-430 - General",387,"H - Social Sciences:HF - Commerce:HF1021-1027 - Commercial geography.  Economic geography",387,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2337.2-2340.8 - Student financial aid:LB2335.95-2337 - Endowments, trusts, etc.",387,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2147-2188 - Liturgy and ritual",387,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3500-3505 - Provincial, local, etc.",387,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA399 - Regulation of medical practice.  Evaluation and quality control of medical care.  Medical audit",387,"D - World History:D - History (General):D25-27 - Military and naval history",386,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT301-330 - Morocco:DT313.7-325.92 - History",386,"H - Social Sciences:HE - Transportation & Communications:HE331-380 - Traffic engineering.  Roads and highways. Streets:HE369-373 - Traffic surveys (General)",386,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD59-59.6 - Public relations.  Industrial publicity",385,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1301-1360 - Prose",385,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL500-547 - Eschatology",384,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB101-879 - Local history and description:DB841-860 - Vienna",384,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1150-1231 - Maritime law",384,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT641-665 - Zaire.  Congo (Democratic Republic).  Belgian Congo:DT650.2-663 - History",382,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6080-6095 - Quotations:PN6081-6084 - English",382,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9191-9255 - Individual authors and works, 1500-1700",382,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions",381,"K - Law:KJ-KKZ - Europe:KJ - History of Law",381,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK8001-8832 - Armenian",381,"P - Language & Literature:PN - Literature (General):PN101-245 - Authorship:PN241-241.5 - Translating as a literary pursuit",381,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG500-585 - Slavic literature (General)",380,"T - Technology:TA - Engineering (General), Civil Engineering:TA166-167 - Human engineering",380,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z551-656 - Copyright",380,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z668-669.7 - Library education.  Research",380,"D - World History:D - History (General):D111-203 - Medieval history:D135-149 - Migrations",379,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K600-615 - Private law",379,"N - Fine Arts:NC - Drawing, Design, Illustration:NC760-825 - Special subjects",379,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6110.5-6120 - Drama:PN6120.15-6120.95 - Fiction",379,"T - Technology:TF - Railroad Engineering & Operation:TF200-320 - Railway construction",379,"T - Technology:TH - Building Construction:TH845-895 - Architectural engineering.  Structural engineering of buildings",379,"E-F - History of the Americas:F1-975 - United States - Regional:F350.5-355 - Mississippi River and Valley.  Middle West",378,"H - Social Sciences:HB - Economic Theory, Demography:HB201-206 - Value.  Utility",378,"K - Law:KL - History of Law in the Ancient Orient",378,"R - Medicine:RG - Gynecology & Obstetrics:RG159-208 - Functional and systemic disorders.  Endocrine gynecology",378,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D219-234 - 1453-1648",377,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH141-207 - By period:DH185-207 - Wars of Independence, 1555-1648",377,"M - Music:ML - Literature on music:ML25-28 - Societies and other organizations",377,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN905-1008 - Folk literature",377,"N - Fine Arts:NK - Decorative Arts:NK600-806 - History",375,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5011-5050 - General",374,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1601-1629 - West Indies",374,"K - Law:KHA-KHW - South America:KHK - Ecuador",374,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC1200-1245 - Sports medicine",374,"T - Technology:TF - Railroad Engineering & Operation:TF670-851 - Local and light railways",374,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z679-680 - Library buildings.  Library architecture",374,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT595-680 - Mary, Mother of Jesus Christ.  Mariology:BT650-660 - Miracles.  Apparitions.  Shrines, sanctuaries, images, processions, etc.",373,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1970-2175 - Liturgy and ritual:BX2050-2175 - Prayers and devotions",373,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E855-861 - Nixon's administrations, 1969-August 9, 1974",373,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK1606-1683 - Capital.  Public buildings.  Government property.  Government purchasing",373,"H - Social Sciences:HG - Finance:HG178 - Liquidity",372,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms:NB1800-1880 - Sepulchral monuments",372,"S - Agriculture:SB - Plant Culture:SB109.7-111 - Methods for special areas",372,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D351-400 - 19th century.  1801-1914/1920:D394-400 - 1871-    .  Later 19th century",370,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1932-2125 - Serbia:DR2075-2087.7 - Kosovo",370,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes:KZ6440-6530 - Humanitarian law",370,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6366-6377 - Riddles, acrostics, charades, conundrums, etc.",370,"B - Philosophy, Psychology, Religion:BF - Psychology:BF660-685 - Comparative psychology.  Animal and human psychology",369,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNG - Bangladesh",369,"S - Agriculture:S - Agriculture (General):S602.5-604.37 - Methods and systems of culture.  Cropping systems",369,"B - Philosophy, Psychology, Religion:BC - Logic:BC11-39 - History:BC25-39 - By period",368,"R - Medicine:RM - Therapeutics, Pharmacology:RM182-190 - Other therapeutic procedures",368,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G8950-9084 - Australasia",367,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1221-1469.63 - Indoor games and amusements",367,"H - Social Sciences:HB - Economic Theory, Demography:HB238-251 - Competition.  Production.  Wealth",367,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEQ - Quebec",367,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM1201-1799 - Maryland",367,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF810 - Veterinary parasitology",367,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF10-16 - General",366,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG555-575 - 1871-1947.  United Italy (Monarchy):DG550.5-564 - 19th century",366,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL269-291 - Local history and description",366,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life:BQ5535-5594 - Devotional literature.  Meditations.  Prayers",365,"N - Fine Arts:NC - Drawing, Design, Illustration:NC730-758 - Technique",365,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture:SH151-179 - Fish culture:SH171-179 - Diseases and adverse factors",365,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE250-278.8 - Pavements and paved roads",365,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes",364,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK70-112.42 - Early to 1613:DK99.8-112.42 - Muscovy",363,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD8038 - Professions (General).  Professional employees",363,"K - Law:KJ-KKZ - Europe:KJK - Belgium",363,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP87-89 - Islamic literature",362,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K830-968 - Obligations:K923-968 - Torts",362,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA3949-3964 - Demosthenes",362,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH328-329 - Fishery management.  Fishery policy",362,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E666-670 - Andrew Johnson's administration, April 15, 1865-1869:E668 - Reconstruction, 1865-1877",361,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6250-6250.4 - Victims of crimes.  Victimology",361,"M - Music:ML - Literature on music:ML3790-3792 - Music trade",361,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6000-6467.36 - Flemish literature since 1830:PT6400-6467.36 - Individual authors or works",361,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1444-1486 - Ghosts.  Apparitions.  Hauntings",359,"P - Language & Literature:PH - Uralic & Basque Languages:PH5001-5490 - Basque",359,"V - Naval Science:VB - Naval Administration",358,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.6-646.69 - Moluccas.  Maluku",357,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E711-738 - McKinley's first administration, 1897-1901:E714-735 - War of 1898 (Spanish-American War)",357,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFW2401-2999 - Wisconsin",357,"R - Medicine:R - Medicine (General):R690-697 - Medicine as a profession.  Physicians",357,"R - Medicine:RD - Surgery:RD120.6-129.8 - Transplantation of organs, tissues, etc.",357,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH346-351 - Fishery for individual species",357,"U - Military Science:UB - Military administration:UB416-419 - Minorities, women, etc. in armed forces",357,"U - Military Science:UD - Infantry",357,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History:DL61-65 - Earliest to 1387.  Scandinavian Empire.  Northmen.  Vikings",356,"V - Naval Science:VG - Minor Services of Navies",356,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy:DG651-664.5 - Milan.  Lombardy",355,"K - Law:KJ-KKZ - Europe:KK-KKC - Germany:KKA - East Germany",355,"K - Law:KZ - Law of nations:KZ3670-3881 - Objects of the law of nations.  Territory and its different parts",355,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture:SH33-134.6 - By region or country",354,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL621-642 - Antiquities.  Social life and customs.  Ethnography",353,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1086-1089.7 - British Columbia",353,"G - Geography, Anthropology, Recreation:G - Geography (General):G540-550 - Seafaring life, ocean travel, etc.",353,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB1805-2151 - State teachers colleges",353,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1528-1529.5 - Two or more solo voices",353,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS330-353 - Drama",353,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4600-4644 - Churches, cathedrals, abbeys (as parish churches), etc.",352,"J - Political Science:JN - Political Institutions (Europe):JN8701-9599 - Switzerland",352,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ268-740 - Steam engineering:TJ603-695 - Locomotives",352,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KG3001-3999 - Mexico and Central America (General)",351,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1660-1693 - Technique of dramatic composition",351,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL1790-1975 - China:BL1830-1883 - Confucianism",350,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP233-272.4 - 20th century.  1886-:DP269.97-271 - 1939-1975",350,"V - Naval Science:VK - Navigation, Merchant Marine:VK15-124 - History, conditions, etc.",350,"H - Social Sciences:HB - Economic Theory, Demography:HB522-715 - Income.  Factor shares:HB601 - Profit",349,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z688 - Special collections",349,"G - Geography, Anthropology, Recreation:GR - Folklore:GR72-79 - Folk literature (General)",348,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV840.7-857 - Winter sports (Ice hockey, skiing, bobsledding, snowmobiling, etc.)",348,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4186-4348 - To 1795",347,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E401-415.2 - Mexican War, 1846-1848",347,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD2501-2999 - Norwegian",347,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7351-7418 - Literary history and criticism",347,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP27.5-43.2 - Description and travel",346,"J - Political Science:JA - Political Science (General):JA86-88 - Study and teaching.  Research",346,"K - Law:KZ - Law of nations:KZ3410 - 21st century",346,"S - Agriculture:SB - Plant Culture:SB992-998 - Economic zoology applied to crops.  Agricultural zoology",346,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF833-854.32 - 20th century",345,"P - Language & Literature:PC - Romance Languages:PC901-986 - Raeto-Romanc (incl Romansh)",345,"S - Agriculture:S - Agriculture (General):S604.8-621.5 - Melioration (Improvement, reclamation, fertilization, irrigation, etc., of lands):S605.5 - Organic farming.  Organiculture",345,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9301-9359 - Puritanism",344,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV1421-1441 - Young adults.  Youth.  Teenagers",344,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU150-180 - New South Wales",343,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1861-1896 - Jamaica",343,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG269.5-274.3 - General",342,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK901-909.5 - Kazakhstan.  Kazakh S.S.R.",342,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period",342,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K50-54 - Dictionaries.  Words and phrases",342,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6755-6785 - Terentius Apher, Publius (Terence)",342,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period",341,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1081-1087.4 - Industrial education (General)",341,"K - Law:KJ-KKZ - Europe:KKF - Hungary",340,"B - Philosophy, Psychology, Religion:BS - The Bible:BS11-115 - Early versions",339,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1756 - Sermons",339,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC401-881 - Oceanography.  By region",339,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP250-420 - Schools of thought. Islamic legal schools. Madhahib",339,"M - Music:ML - Literature on music:ML3795 - Music as a profession. Vocational guidance",339,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6090-6110 - German:PN6080-6095 - Quotations",339,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ7300-7529 - Mahayana Buddhism",338,"D - World History:DS - Asia:DS251-326 - Iran (Persia):DS324-326 - Local history and description",338,"G - Geography, Anthropology, Recreation:GE - Environmental Sciences:GE70-90 - Environmental education",337,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K140-165 - History of law",337,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC44-59.8 - Military, naval, and political history.  Foreign relations",336,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB1601-2398 - Lakes.  Limnology.  Ponds.  Lagoons",336,"J - Political Science:JN - Political Institutions (Europe):JN6750-6769 - Poland",336,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3601-3611 - Medical legislation",336,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2351-2359 - Admissions and entrance requirements",336,"N - Fine Arts:NC - Drawing, Design, Illustration:NC1-45 - General (incl collective biography)",336,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX100-107 - General",335,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E813-816 - Truman's administrations, April 12, 1945-1953",335,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic",335,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC62-64 - Gauls.  Celts.  Franks",334,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG200-227 - Philippines",334,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT960-985 - Invisible world (saints, demons, etc.)",333,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6231-6328 - History.  Local divisions",332,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E181 - Military history",332,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ1100-1297 - Collections:PQ1100-1145 - General",332,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA909-965 - History:DA909-916.8 - General",331,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4494-4499 - Xenophon",331,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA909-965 - History:DA930-965 - By period",329,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA909-965 - History:DA930-965 - By period:DA930-937.5 - Early and medieval to 1603",329,"M - Music:M - Music:M5-1480 - Instrumental music:M1470-1480 - Aleatory music. Electronic music. Mixed media",329,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E835-837.7 - Eisenhower's administrations, 1953-1961",328,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1501-1517 - Honduras",328,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC5800-5808 - Distance education",328,"N - Fine Arts:NB - Sculpture:NB1203-1270 - Special materials",328,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6155-6191 - Translations",328,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2131-2193 - By period",328,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR448-479 - Military, naval, and political history.  Foreign relations",327,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4001-4091 - Sumerian",327,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA926-929 - Civil defense",327,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1500-1590 - Zoroastrianism (Mazdeism).  Parseeism",326,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ215-292 - 19th-20th centuries",326,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization:JV61-152 - History",326,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6201-6399 - Language",326,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL501-889 - Japanese language and literature:PL700-889 - Japanese literature:PL885-889 - Local literature",326,"D - World History:DS - Asia:DS701-799.9 - China:DS798 - Outer Mongolia.  Mongolian People's Republic",325,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4850-5490 - Intergovernmental organizations.  IGOs:KZ4935-5275 - The United Nations",325,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB414.6-417 - Greenhouses and greenhouse culture",325,"D - World History:D - History (General):D31-34 - Political and diplomatic history",324,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK505-505.95 - Lithuania",324,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z4001-4980 - Australia.  Oceania",324,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1900-1985 - Songs of specific groups or on specific topics",323,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV659-683 - Ministry.  Clergy.  Religious vocations",322,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G4410-4763 - Mexico",322,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7450-7495 - Collections",322,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU419-422 - History",321,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K181-184.7 - Miscellany",321,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4400-4470 - Practical church work.  Social work.  Work of the layman",320,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP524-638 - Awal shakhsiyah",320,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1990-1998 - Secular vocal music for children",320,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4100-4145 - Classed by material",320,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP670-682.2 - 20th century",319,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS1937-2020 - Early texts and versions",318,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN801-820 - Romance literature",318,"T - Technology:TS - Manufactures:TS1870-1935 - Rubber industry",318,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1783-1815 - Seers.  Prophets.  Prophecies",317,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH801-811 - Local history and description:DH801 - Provinces, regions, etc., A-Z",317,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE210-228.3 - Construction details",317,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865:E461-655 - The Civil War, 1861-1865:E482-489 - Confederate States of America",316,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1001 - Introduction to bibliography. Theory, philosophy, psychology. Bibliography. Documentation",316,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E381-385 - Jackson's administrations, 1829-1837",315,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFG - Georgia",315,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8701-8749 - New Jerusalem Church.  New Church.  Swedenborgianism",314,"C - Historical Sciences (Archaeology, Genealogy):CE - Technical Chronology, Calendar:CE21-46 - Ancient",314,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB1-20.5 - General",314,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean:GC205-227 - Waves",314,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5691-5716 - Business mathematics.  Commercial arithmetic",314,"N - Fine Arts:NX - Arts in General:NX700-750 - Patronage of the arts",314,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1361-1369 - Essays",314,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ1101-2030.7 - Women.  Feminism:HQ1871-2030.7 - Women's clubs",313,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM1-599 - Maine",313,"S - Agriculture:SB - Plant Culture:SB175-177 - Food crops",313,"A - General:AZ - History of Scholarship & Learning, The Humanities:AZ101-181 - Philosophy.  Theory",312,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD5001-6471 - Seals:CD5575-6471 - Modern",312,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D351-400 - 19th century.  1801-1914/1920:D371-379 - Eastern question",312,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU422.8-424 - Maoris",312,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU422.8-424 - Maoris:DU422.5-424.5 - Ethnography",312,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC2700-3708 - Dialects.  Provincialisms:PC3371-3420.5 - Modern patois of South France",312,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language:PJ6690-6697 - Ancient Arabic",312,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP500-585 - Theosophy",311,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG480-499 - Military, naval, and political history.  Foreign relations",311,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E183-183.3 - Political history",311,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1065-1085 - Relations to, and treatment of, special subjects",311,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC955-962 - Arctic medicine.  Tropical medicine",311,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA909-965 - History:DA920-927 - Antiquities.  Social life and customs.  Ethnography",310,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG256-260 - Period of Marius and Sulla (Pompey). 111-78",310,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR171-236 - Anglo-Saxon (Beginnings through 1066)",310,"D - World History:DA-DR - Europe:DE - The Greco-Roman World:DE80-100 - History",309,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces",309,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-",309,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period",309,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1312-1469 - Board games.  Move games:GV1221-1469.63 - Indoor games and amusements:GV1469.15-1469.62 - Computer games.  Video games.  Fantasy games",309,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM7801-8399 - Missouri",309,"V - Naval Science:VE - Marines",309,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1243.72-1243.78 - Monasteries.  Temples, etc.",308,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB906.9-920.5 - Description and travel.  Antiquities.  Ethnography",308,"D - World History:DS - Asia:DS153-154.9 - Jordan.  Transjordan",308,"K - Law:KJ-KKZ - Europe:KK-KKC - Germany:KKB-KKC - Individual states, provinces, and cities",308,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV800-873 - Sacraments.  Ordinances:BV803-814 - Baptism",307,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7431 - Prevention of crime, methods, etc.",307,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG1151-1199 - Macedonian",307,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T60-60.8 - Work measurement.  Methods engineering",307,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ266-267.5 - Turbines.  Turbomachines (General)",307,"T - Technology:TX - Home Economics:TX950-953 - Taverns, barrooms, saloons",307,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP176-181 - The five duties of a Moslem.  Pillars of Islam",306,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV629-631 - Church and state",306,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFD1201-1799 - District of Columbia",306,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG8001-9146 - Baltic:PG8501-8772 - Lithuanian",306,"P - Language & Literature:PR - English Literature:PR111-116 - Women authors",306,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC501-721 - Electricity:QC669-675.8 - Electromagnetic theory",306,"U - Military Science:UB - Military administration:UB370-375 - Military pensions, etc.",306,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA969-988 - Description and travel",305,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF234-234.9 - Alexander the Great, 336-323 B.C.",305,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ301-851 - Local history and description:DQ851 - Cities, towns, etc., A-Z",305,"E-F - History of the Americas:F1-975 - United States - Regional:F691-705 - Oklahoma",305,"M - Music:M - Music:M1495-2199 - Vocal music:M1495 - Collections",305,"R - Medicine:RF - Otorhinolaryngology:RF110-320 - Otology.  Diseases of the ear",305,"E-F - History of the Americas:F1-975 - United States - Regional:F406-420 - Arkansas",304,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K720-792 - Property",304,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1-489 - General:PJ306-489 - Literature",304,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1001-1095 - Pali",304,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8000-8009 - Languages",304,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS335 - Languages of Oceania and Australasia",303,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K600-615 - Private law:K605-615 - Unification",303,"S - Agriculture:SB - Plant Culture:SB317.5-319.864 - Horticulture.  Horticultural crops",303,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492:DG530-537.8 - 1268-1492",302,"A - General:AM - Museums, Collectors & Collecting:AM111-160 - Museology.  Museum methods, technique, etc.",301,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.",301,"D - World History:DT - Africa:DT160-177 - North Africa",301,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH365-380.92 - Shellfish fisheries.  Shellfish culture",301,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP670-682.2 - 20th century:DP675-682.2 - Republic, 1910-    .  Revolution of 1919",300,"K - Law:KJ-KKZ - Europe:KKZ - Yugoslavia",300,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG651-721 - Labor.  Parturition",300,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG8779-8793 - Actuarial science.  Statistical theory and methodology applied to insurance",299,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4929-4951 - Post-Reformation",298,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF553-599.5 - Eastern Empire, 323/476-1057.  Constantine the Great",298,"R - Medicine:RZ - Other Systems of Medicine",298,"B - Philosophy, Psychology, Religion:BM - Judaism:BM1-449 - General:BM70-135 - Study and teaching",297,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ1001-1045 - Buddhist literature",297,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN492-495.2 - Political organization.  Political anthropology",297,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2331-2336 - Home labor.  Home-based businesses",297,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism",297,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4929-4951 - Post-Reformation:BX4929-4946 - Anabaptists",296,"D - World History:DS - Asia:DS327-329.4 - Central Asia",296,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN51-59 - Anthropometry",296,"J - Political Science:JC - Political Theory:JC49 - Islamic state",296,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ51-92 - Antiquities.  Social life and customs.  Ethnography",295,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPA - Korea.  South Korea",295,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG9501-9665 - Albanian",295,"P - Language & Literature:PN - Literature (General):PN4001-4355 - Oratory.  Elocution, etc.:PN4199-4321 - Recitations (in English)",295,"Q - Science:QC - Physics:QC811-849 - Geomagnetism",295,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA771-771.7 - Rural health and hygiene.  Rural health services",295,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT899-940 - Future state.  Future life",294,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG8941-9200.5 - By region or country",294,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM5401-5999 - Minnesota",294,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1501-2688 - Individual authors or works:PT1799-2592 - 1700-ca. 1860/70:PT1891-2239 - Goethe:PT2026-2039 - Translations",294,"T - Technology:TA - Engineering (General), Civil Engineering:TA165 - Engineering instruments, meters, etc.  Industrial instrumentation",294,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E846-851 - Johnson's administrations, November 22, 1963-1969",293,"E-F - History of the Americas:F1-975 - United States - Regional:F836-850 - Nevada",292,"N - Fine Arts:ND - Painting:ND1470-1625 - Technique and materials",292,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6482-6496 - Lucretius Carus, Titus",292,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1390-1390.5 - Communist ethics",291,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1700-1779 - South America",291,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ1758-1852 - Middle East (incl Turkey, Iran, Israel, Arabian Peninsula):JQ1850 - Arab countries",291,"N - Fine Arts:NA - Architecture:NA2335-2360 - Competitions",291,"S - Agriculture:SF - Animal Culture:SF84.82-85.6 - Rangelands.  Range management.  Grazing",291,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5137-5139 - Creeds and catechisms, etc.",290,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA777-790 - Early and medieval to 1603:DA783.5-790 - Stuarts, 1371-1603",290,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F3031-3031.5 - Falkland Islands",290,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD39-40.7 - Capital.  Capital investments",290,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T59.5 - Automation",290,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR701-741 - Local history and description (European Turkey):DR701 - Provinces, regions, etc., A-Z",289,"D - World History:DU - Oceania (South Seas):DU28.11-68 - History",289,"E-F - History of the Americas:E151-909 - United States:E456-655 - Civil War period, 1861-1865:E461-655 - The Civil War, 1861-1865:E591-600 - Naval history",289,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes:KZ6540-6660 - Warfare on sea",289,"N - Fine Arts:NK - Decorative Arts:NK2775-2898 - Rugs and carpets",289,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1036-1040 - Nova Scotia.  Acadia",288,"K - Law:KZ - Law of nations:KZ1255-1273 - Theory and principles",288,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9876-9876.36 - 1961-2000",288,"S - Agriculture:SF - Animal Culture:SF405.5-407 - Laboratory animals",288,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS101-330.7 - Secret societies",287,"T - Technology:TC - Hydraulic engineering:TC1501-1800 - Ocean engineering",287,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ4965-5030 - Ceremonies and rites.  Ceremonial rules",286,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB42-49 - Military, naval, and political history.  Foreign relations",286,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD201-257.4 - 19th-20th centuries:DD206-216 - 1815-1871",286,"H - Social Sciences:HM - Sociology:HM811-821 - Deviant behavior.  Social deviance",286,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPP - Singapore",286,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK9001-9201 - Caucasian languages:PK9101-9169 - Georgian",286,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1750-2350 - By region or country:BL2230-2240 - Korea",285,"B - Philosophy, Psychology, Religion:BR - Christianity:BR130-133.5 - Christian antiquities.  Archaeology.  Museums",285,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF229-230 - Peloponnesian War, 431-404 B.C.",285,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFW1-599 - Washington",285,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1153.7-1168 - By region or country",283,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4019-4180 - Education",283,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children:HV888-907 - Children with disabilities",283,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections",283,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4019-4180 - Education:BV4019-4167 - Training for the ordained ministry",282,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics",282,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC361-424 - 20th century:DC397 - 1940-1946",282,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF895-951 - Local history and description:DF901 - Regions, provinces, islands, etc., A-Z",282,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E766-783 - Wilson's administrations, 1913-1921",282,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN905-1008 - Folk literature:PN980-995 - Fables",282,"U - Military Science:U - Military Science (General):U164-167.5 - Tactics",282,"K - Law:KZA - Law of the Sea:KZA1430-1690 - Maritime boundaries",281,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB2831.6-2831.99 - Administrative personnel",281,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3919-3920 - Moral influence of music.  Therapeutic use of music",281,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8009.5-8014 - Literature:PL8000-8009 - Languages",281,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture:SB381-386 - Berries and small fruits",281,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4133-4160 - Drama",280,"R - Medicine:RJ - Pediatrics:RJ251-325 - Newborn infants (incl physiology, care, treatment, diseases)",280,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E784-805 - 1919-1933.  Harding-Coolidge-Hoover era.  \"The twenties\"",279,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1040-1060.4 - Cycling.  Bicycling.  Motorcycling",279,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT321-325 - The city as an economic factor.  City promotion",279,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3300-3308 - Early to 1700",279,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS147-152 - Women authors",279,"R - Medicine:RS - Pharmacy & Materia Medica:RS125-131.9 - Formularies.  Collected prescriptions",279,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ7960-7989 - Bonpo (Sect)",278,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children:HV959-1420.5 - Orphanages.  Orphans",278,"S - Agriculture:SD - Forestry:SD250-363.3 - Forestry education",278,"T - Technology:TF - Railroad Engineering & Operation:TF501-668 - Railway operation and management",278,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z691-692 - Special classes of materials",278,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL601-614.5 - General",277,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4530 - Investment companies.  Investment trusts. Mutual funds",277,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism:PT7177-7211 - Prose",277,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT1754-1770 - Ethnography",276,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E745 - Military history",276,"E-F - History of the Americas:F1-975 - United States - Regional:F161-175 - Delaware",276,"J - Political Science:JA - Political Science (General):JA60-64 - Dictionaries and encyclopedias",276,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2361-2365 - Curriculum",276,"T - Technology:TA - Engineering (General), Civil Engineering:TA190-194 - Management of engineering works",276,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG539-545.8 - 16th-18th centuries",275,"D - World History:DA-DR - Europe:DG - Italy:DG691-817.3 - Central Italy:DG791-800 - Papal States (States of the Church).  Holy See.  Vatican City",275,"D - World History:DS - Asia:DS650-650.99 - Brunei",275,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS537-574 - By region:PS561-572 - West and Central",275,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL971-991 - Local history and description:DL971 - Provinces, regions, etc., A-Z",274,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT5320-6737 - Customs relative to special classes",274,"J - Political Science:JN - Political Institutions (Europe):JN1395-1571.5 - Ireland",274,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR431-439 - 17th century",274,"B - Philosophy, Psychology, Religion:BF - Psychology:BF839.8-885 - Physiognomy.  Phrenology",273,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4112-4820 - By state",273,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK4125-4399 - Electric lighting",273,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z235-236 - Printer's marks, mottoes, etc.",273,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD41 - Competition",272,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE1-90 - General",272,"R - Medicine:R - Medicine (General):R723-726 - Medical philosophy.  Medical ethics:R726.5-726.8 - Medicine and disease in relation to psychology.  Terminal care.  Dying",272,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP76-86 - Military, naval, and political history.  Foreign relations",271,"D - World History:DT - Africa:DT2871-3025 - Zimbabwe.  Southern Rhodesia",271,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1710-1710.5 - Electronic funds transfers",271,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3171-3179 - Constitutional principles",271,"L - Education:LD - Individual Educational Institutions (U.S.):LD7501 - Secondary and elementary schools",271,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4211-4437 - Russia (Federation)",271,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB1501-1709 - Gaelic (Scottish Gaelic, Erse)",271,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E431-435 - Pierce's administration, 1853-1857",270,"E-F - History of the Americas:E151-909 - United States:E907-909 - Barack Obama's administration, 2009-",270,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFC1801-2399 - Colorado",270,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4247-4263 - Prose",270,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ5725-5845 - Folklore",269,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG11-16 - General",269,"E-F - History of the Americas:E11-143 - America:E31-49.2 - North America",269,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E195-199 - 1689-1775:E199 - French and Indian War, 1755-1763",269,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT165.5-169.9 - City planning:HT161-165 - Garden cities.  \"The city beautiful\"",269,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3950-4806.5 - Exceptional children and youth.  Special education:LC3991-4000 - Gifted children and youth",269,"T - Technology:TH - Building Construction:TH5011-5701 - Construction by phase of the work (Building trades)",269,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR701-741 - Local history and description (European Turkey):DR716-739 - Istanbul (Constantinople)",268,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL6191-6341 - Micronesian and Melanesian languages",268,"R - Medicine:RM - Therapeutics, Pharmacology:RM147-180 - Administration of drugs and other therapeutic agents",268,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK503-503.95 - Estonia",267,"R - Medicine:RD - Surgery:RD118-120.5 - Plastic surgery.  Reparative surgery",267,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP184-184.9 - Religious ceremonies, rites, etc.",266,"R - Medicine:RC - Internal Medicine:RC81-82 - Popular medicine",266,"B - Philosophy, Psychology, Religion:BF - Psychology:BF699-711 - Genetic psychology",265,"L - Education:LB - Theory & Practice of Education:LB1141-1489 - Kindergarten",265,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN695-779 - Modern:PN715-749 - Renaissance (1500-1700)",265,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ170-179 - Mechanics applied to machinery.  Dynamics",265,"E-F - History of the Americas:F1-975 - United States - Regional:F726-740 - Montana",264,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL6601-6621 - Papuan languages",264,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4050-4480 - Electronic information resources:ZA4150-4380 - Computer network resources",264,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT211-239 - Libya:DT223.3-236 - History",263,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E838-840.8 - General:E839.5-839.8 - Political history",263,"H - Social Sciences:HE - Transportation & Communications:HE199-199.5 - Freight (General)",263,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ77.7-77.95 - Transexualism",263,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB950-990.5 - Pest control and treatment of diseases.  Plant protection:SB974-978 - Organic plant protection.  Biological control",263,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD920-934 - Rural and farm sanitary engineering",263,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA765-774.5 - Political and military history.  Antiquities, etc.",262,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT515-515.9 - Nigeria:DT515.53-515.842 - History",262,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFI4201-4799 - Iowa",262,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism:PT7177-7211 - Prose:PT7181-7193 - Sagas",262,"Q - Science:QC - Physics:QC770-798 - Nuclear and particle physics.  Atomic energy.  Radioactivity:QC794.95-798 - Radioactivity and radioactive substances",262,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF75 - Human influences on the environment",261,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6259-6268 - Anecdotes.  Table talk",261,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA643-645 - Disease (Communicable and noninfectious) and public health:RA645.5-645.9 - Emergency medical services",261,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT509.97-512.9 - Ghana (Gold Coast):DT510.5-512.34 - History",260,"K - Law:KQ-KTZ - Africa:KTA - Nigeria",260,"V - Naval Science:VK - Navigation, Merchant Marine:VK549-572 - Science of navigation",260,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF599.8-649 - 1057-1453",259,"D - World History:DS - Asia:DS488-490 - Sri Lanka:DS489.2-489.25 - Ethnography",259,"J - Political Science:JK - Political Institutions (United States):JK404-1685 - Government.  Public administration:JK1012-1432 - Congress.  Legislative branch:JK1154-1276 - Senate",259,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2131-2193 - By period:PN2181-2193 - Modern",259,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS199-313 - Other European languages",258,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2300-2650 - Local history and description of Czech lands",258,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4348.5-4395 - 1795-1918.  19th century (General)",258,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR250-266.5 - 1866/1881-1944",258,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFO2401-2999 - Oregon",258,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT655-725 - Percussion and other instruments",258,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3199-3205 - General",258,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN3151-3171 - Amateur theater",258,"M - Music:M - Music:M5-1480 - Instrumental music:M1375-1420 - Instrumental music for children",257,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1001-1989 - Egyptology:PJ1111-1446 - Language",257,"R - Medicine:R - Medicine (General):R727-727.5 - Medical personnel and the public.  Physician and the public",257,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK452-454.4 - Electric apparatus and materials.  Electric circuits.  Electric networks",257,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB440-482 - Relation to special topics:CB478 - Technology",256,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G4800-4874 - Central America",256,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1060.5-1098 - Track and field athletics",256,"K - Law:KZD - Space Law, Law of Outer Space",256,"L - Education:LJ - Student Fraternities & Societies, United States",256,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture:SB401 - Nuts",256,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2315-2324 - Relics.  Shrines.  Pilgrimages.  Processions",255,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK26-28 - Ethnography",255,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E182 - Naval history",255,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT165-476 - Houses.  Dwellings",255,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7601-7869 - Literary history and criticism",255,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC1080-1581 - Marine pollution.  Sea water pollution",254,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K115-130 - The legal profession",254,"T - Technology:TP - Chemical Technology:TP751-762 - Gas industry",254,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1500-1530 - Military astronautics.  Space warfare.  Space surveillance",254,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV2000-3705 - Missions:BV2610-2695 - Special types of missions",253,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR215-218 - General",253,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN7401-7999 - North Carolina",253,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6269-6278 - Aphorisms.  Apothegms",253,"T - Technology:TT - Handicrafts:TT180-200 - Woodworking.  Furniture making.  Upholstering",253,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX850-875 - Documents",252,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA757.9-763 - General",252,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA800-814.5 - 1603-1707/1745:DA813-814.5 - 1707-1745.  Jacobite movements",252,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3870-3918 - Primary production.  Extractive industries",252,"K - Law:KQ-KTZ - Africa:KSK - Kenya",252,"R - Medicine:RG - Gynecology & Obstetrics:RG211-483 - Abnormalities and diseases of the female genital organs",252,"U - Military Science:UB - Military administration:UB410-415 - Officers",252,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4912-4950 - Conversion literature",251,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV900-1450 - Religious societies, associations, etc.",251,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T59-59.2 - Standardization",251,"V - Naval Science:VE - Marines:VE23-124 - By region or country",251,"D - World History:DA-DR - Europe:DA - Great Britain:DA700-745 - Wales:DA740-745 - Local history and description",250,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519:DD126-155 - Medieval Empire, 481-1273:DD145-155 - 1125-1273.  Hohenstaufen period",250,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT433.2-433.29 - Uganda",250,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT388 - Regional economics.  Space in economics",250,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah",250,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5135-5136 - Controversial works",249,"H - Social Sciences:HM - Sociology:HM1001-1281 - Social psychology:HM1041-1101 - Social perception.  Social cognition",249,"P - Language & Literature:PH - Uralic & Basque Languages:PH1-87 - General",249,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT98-180 - God:BT117-123 - Holy Spirit.  The Paraclete",248,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See",248,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1000-1035 - General",247,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR211-214.2 - Antiquities.  Social life and customs.  Ethnography",247,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5761-5780 - Shipment of goods.  Delivery of goods",247,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV5725-5770 - Tobacco habit",247,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL7001-7101 - Australian languages",247,"V - Naval Science:VK - Navigation, Merchant Marine:VK798-997 - Sailing directions.  Pilot guides",247,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5130-5132 - General",246,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT433.5-434 - Kenya:DT433.552-433.584 - History",246,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT621-637 - Liberia",246,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN281-289 - Human evolution:GN282-286.7 - Fossil man.  Human paleontology",246,"J - Political Science:JN - Political Institutions (Europe):JN5701-5999 - Netherlands",246,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology:BF1111-1156 - Hypnotism.  Suggestion.  Mesmerism.  Subliminal projection",245,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2700-3150 - Slovakia",244,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ30-49.5 - Antiquities.  Social life and customs.  Ethnography",244,"E-F - History of the Americas:E11-143 - America:E141-143 - Descriptive accounts of America.  Earliest to 1810",244,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1621-1638 - Interest rates.  Interest tables",244,"J - Political Science:JK - Political Institutions (United States):JK1717-2217 - Political rights.  Practical politics:JK1758-1761 - Citizenship",244,"K - Law:KB-KBU - Religious Law:KBR - History of canon law",244,"S - Agriculture:SF - Animal Culture:SF541-560 - Sericulture.  Silk culture",244,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1011-1017 - General bibliographies",244,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL175-190 - General",243,"D - World History:DT - Africa:DT15-16 - Ethnography",243,"K - Law:KZ - Law of nations:KZ1298-1304 - The law of treaties.  System of treaty law",243,"A - General:AN - Newspapers",242,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD190-199 - 1648-1815.  18th century.  French Revolutionary and Napoleonic period",242,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP702-802 - Local history and description",242,"D - World History:D - History (General):D880-888 - Developing countries",241,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA850-878 - Description and travel",241,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF802-832 - 1821-1913",241,"D - World History:DS - Asia:DS591-599 - Malaysia.  Malay Peninsula.  Straits Settlements:DS597.22-599 - Local history and description:DS597.33-597.34 - Sabah.  British North Borneo",241,"E-F - History of the Americas:F1-975 - United States - Regional:F661-675 - Nebraska",241,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1221-1469.63 - Indoor games and amusements:GV1232-1299 - Card games (Poker, patience, whist, etc.)",241,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2365-2385 - Contracting.  Letting of contracts",241,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFT1-599 - Tennessee",241,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections:PQ6247-6264 - Prose",241,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT740-810 - Instrumental techniques for children",240,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P327-327.5 - Lexicography",240,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC2700-3708 - Dialects.  Provincialisms:PC2813-2898 - Old French",240,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3300-3308 - Early to 1700:PG3199-3299 - Collections",240,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3300-3308 - Early to 1700:PG3199-3299 - Collections:PG3260-3299 - Prose",240,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4064-4075 - Early to 1500",240,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1958-1968 - Creeds and catechisms",239,"D - World History:DA-DR - Europe:DC - France:DC21-29.3 - Description and travel",239,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa",238,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFI3001-3599 - Indiana",238,"E-F - History of the Americas:E151-909 - United States:E171-183.9 - History:E171-180 - General:E179.5 - Historical geography",237,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7435-7439 - Gun control",237,"J - Political Science:JC - Political Theory:JC327 - Sovereignty",237,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3400-3431 - Administrative law",237,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5647-5686 - Nuclear (Strategic) arms limitation",237,"A - General:AY - Yearbooks, Almanacs, Directories:AY10-29 - Annuals",236,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1-6.8 - General",236,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland",236,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP192-200.8 - 1700-1808.  Bourbons",236,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD47-47.4 - Costs",236,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2381-2391 - Academic degrees",236,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2667-2698 - Latin Americans.  Hispanic Americans",236,"M - Music:ML - Literature on music:ML110-111.5 - Music librarianship",236,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS241-286 - Special regions, states, etc.:PS271-285 - West and Central",236,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF321-359.7 - Racing",236,"T - Technology:TP - Chemical Technology:TP267.5-301 - Explosives and pyrotechnics",236,"D - World History:DA-DR - Europe:DA - Great Britain:DA700-745 - Wales:DA714-722.1 - History",235,"D - World History:DT - Africa:DT7-12.25 - Description and travel",235,"K - Law:KM-KPW - Asia:KM - General",235,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2371-2372 - Graduate education",235,"L - Education:LT - Textbooks",235,"N - Fine Arts:NX - Arts in General:NX280-410 - Study and teaching.  Research",235,"B - Philosophy, Psychology, Religion:BF - Psychology:BF501-505 - Motivation",234,"K - Law:KD-KDK - The United Kingdom and Ireland:KD51-9500 - England and Wales:KD8850-9312 - Local laws of England",234,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2601-2611 - Education in developing countries",234,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2701-2708.9 - Rajasthani",234,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN597-605 - Special relations, movements, and currents of literature",234,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets:SF441-450 - Cats",234,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5140-5355 - Buddhist ministry.  Priesthood.  Organization",233,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD5001-6471 - Seals:CD5201-5391 - Ancient",233,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT561-581 - Cameroon (Cameroun, Kamerun)",233,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV1442-1448 - Women",233,"K - Law:KJ-KKZ - Europe:KKQ - Portugal",233,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL6401-6551 - Polynesian languages",233,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP182 - Jihad (Holy War)",232,"K - Law:KHA-KHW - South America:KHU - Uruguay",232,"T - Technology:TH - Building Construction:TH7700-7975 - Illumination.  Lighting",232,"U - Military Science:UF - Artillery:UF520-537 - Ordnance and small arms",232,"D - World History:D - History (General):D111-203 - Medieval history:D200-203 - Later medieval.  11th-15th centuries",231,"J - Political Science:JZ - International relations:JZ1249-1254 - Relation to other disciplines and topics",231,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P321-324.5 - Etymology",231,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature",231,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8951-8951.36 - 1961-2000",231,"R - Medicine:RB - Pathology:RB24-33 - Pathological anatomy and histology",231,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC569.7-571 - Mental retardation.  Developmental disabilities",231,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ181-210 - Mechanical movements",231,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6493-6495 - Biography",230,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT421-432.5 - East Africa.  British East Africa",230,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT330-334 - Metropolitan areas",230,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV551.2-639 - Emergency management:HV553-639 - Relief in case of disasters:HV560-583 - Red Cross.  Red Crescent",230,"N - Fine Arts:NK - Decorative Arts:NK2975-3049 - Tapestries",230,"B - Philosophy, Psychology, Religion:BF - Psychology:BF180-198.7 - Experimental psychology",229,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK504-504.95 - Latvia",229,"D - World History:DS - Asia:DS393-396.9 - Bangladesh.  East Pakistan:DS396.8-396.9 - Local history and description",229,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training:GV401-433 - Physical education facilities.  Sports facilities",229,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9969.5-9999 - Other insurance:HG9956-9969 - Casualty insurance",229,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1026-1045 - Sale of goods",229,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1066-1089 - Banking",229,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB419-419.3 - Indoor gardening and houseplants",229,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS546-558 - Bible stories.  Paraphrases of Bible stories.  The Bible story",228,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA900-908.7 - General",228,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania",228,"D - World History:DT - Africa:DT160-177 - North Africa:DT167-176 - History",228,"E-F - History of the Americas:F1-975 - United States - Regional:F850.5-851.5 - Pacific States",228,"P - Language & Literature:PE - English Languages:PE501-693 - Middle English",228,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5600-5739 - 16th-18th centuries",228,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ227-240 - Machine design and drawing",228,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK4001-4102 - Applications of electric power",228,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2280-2545 - Works about the New Testament:BS2415-2417 - The teachings of Jesus",227,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT351-352 - Suburban cities and towns",227,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3289-3367 - Organs of government",227,"K - Law:KJ-KKZ - Europe:KKX - Turkey",227,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6501-6510 - Martial",227,"T - Technology:TS - Manufactures:TS800-937 - Wood technology.  Lumber:TS840-915 - Wood products.  Furniture",226,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1790-1793 - Catholic Church and the state",225,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP91-96 - Earliest to 711",225,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN502-517 - Psychological anthropology",225,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries:NK4700-4890 - Costume",225,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK8001-8832 - Armenian:PK8501-8832 - Literature",225,"R - Medicine:RD - Surgery:RD32-33.9 - Operative surgery.  Technique of surgical operations",225,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP300-395 - Bahai Faith",224,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519:DD156-174.6 - 1273-1519.  Houses of Habsburg and Luxemburg",224,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT241-269 - Tunisia (Tunis):DT268-269 - Local history and description",224,"H - Social Sciences:HB - Economic Theory, Demography:HB522-715 - Income.  Factor shares:HB535-551 - Interest",224,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH471-489 - Reproduction",224,"U - Military Science:UC - Maintenance & Transportation:UC460-535 - Clothing and equipment",224,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1845-1891 - Fortune-telling",223,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT331-346 - Sahara",223,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC47-58.7 - Private school education",223,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM298.5-301 - Shipbuilding industry.  Shipyards",223,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT1029-1040 - Catechisms",222,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5600-5740 - Church of England outside of Great Britain",222,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX895-939 - Study and teaching",222,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR279-296 - Local history and description:DR279-280.74 - Transylvania",222,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC701-775 - Jewish education",222,"U - Military Science:UC - Maintenance & Transportation:UC20-258 - Organization of the service.  By region or country",222,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E321-330 - John Adams' administration, 1797-1801",221,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G2445-2739 - Africa",221,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri",221,"K - Law:KJ-KKZ - Europe:KJP - Czechoslovakia",221,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB3011-3095 - School management and discipline:LB3045-3048 - Textbooks",221,"M - Music:ML - Literature on music:ML12-21 - Directories. Almanacs",221,"N - Fine Arts:NB - Sculpture:NB1272-1291 - Mobiles, color, sculpture gardens, etc.",221,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3301-3311 - Non-Chinese languages of China",221,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1470-1511 - Parties.  Party games and stunts",220,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations:JZ4850-5490 - Intergovernmental organizations.  IGOs:JZ4853-4934 - League of Nations",220,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC71-120.4 - Education and the state:LC107-120.4 - Public school question.  Secularization.  Religious instruction in the public schools",220,"P - Language & Literature:PN - Literature (General):PN59-72 - Study and teaching",220,"D - World History:DS - Asia:DS701-799.9 - China:DS798.92-799.9 - Taiwan:DS798 - Outer Mongolia.  Mongolian People's Republic",219,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFK1-599 - Kansas",219,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB1805-2151 - State teachers colleges:LB1991-2151 - Other regions or countries",219,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1635-1650 - Relation to, and treatment of, special subjects",219,"Q - Science:QD - Chemistry:QD450-801 - Physical and theoretical chemistry:QD701-731 - Photochemistry",219,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS189-190 - Assay methods.  Standardization.  Analysis",219,"T - Technology:TA - Engineering (General), Civil Engineering:TA213-215 - Engineering machinery, tools, and implements",219,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG261-267 - Julius Caesar.  First Triumvirate, 60",218,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK670-679.5 - Georgia (Republic).  Georgian S.S.R.  Georgian Sakartvelo",218,"L - Education:LB - Theory & Practice of Education:LB2801-3095 - School administration and organization:LB2844.52-2844.63 - Trade unions",217,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK201-379 - Vedic",217,"D - World History:DS - Asia:DS41-66 - Middle East.  Southwestern Asia.  Ancient Orient.  Arab East.  Near East:DS58-59 - Ethnography",216,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K583-591 - Legal systems compared",216,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFH - Hawaii",216,"L - Education:LA - History of education:LA173-186 - Higher education",215,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6235-6269 - Caesar, Julius",215,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC256-260 - Restoration, 1815-1830",214,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL269-291 - Local history and description:DL271 - Counties, regions, islands, etc., A-Z",214,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR20-27 - Antiquities.  Social life and customs.  Ethnography",214,"T - Technology:T - Technology (General):T11.95-12.5 - Industrial directories",214,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z53-102 - Shorthand.  Stenography.  Phonography",214,"D - World History:DA-DR - Europe:DC - France:DC600-801 - Local history and description:DC601.1-609.83 - North, East, etc. France",213,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL101-114.5 - General",213,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR436-446 - General",213,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT271-299 - Algeria:DT298-299 - Local history and description",213,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT433.5-434 - Kenya:DT433.542-433.545 - Ethnography",213,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV199.8-200.35 - Mountaineering",213,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ800-800.4 - Single people",213,"K - Law:KZ - Law of nations:KZ6350-6785 - Enforced settlement of international disputes:KZ6360-6373 - Non-military coercion",213,"L - Education:LD - Individual Educational Institutions (U.S.):LD13-7251 - Universities.  Colleges:LD7020-7251 - Women's colleges",213,"T - Technology:TH - Building Construction:TH3301-3411 - Maintenance and repair",213,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB932.95-945 - 1792-1918.  19th century",212,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL143-151 - General",212,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2361-2391 - Guyana.  British Guiana",212,"H - Social Sciences:HB - Economic Theory, Demography:HB846-846.8 - Welfare theory",212,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2421-2429 - Trade associations",212,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ5309-5510 - Administrative fees. User charges. License fees",212,"J - Political Science:JC - Political Theory:JC109-121 - Medieval state",212,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE951-962 - Special subjects",212,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA4452-4486 - Thucydides",212,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF4043-4350 - Middle High German",212,"R - Medicine:RT - Nursing:RT89-120 - Specialties in nursing",212,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB927-932.9 - Early to 1792",211,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT515-515.9 - Nigeria:DT515.42-515.45 - Ethnography",211,"P - Language & Literature:PR - English Literature:PR750-890 - Prose:PR767-818 - By period",211,"P - Language & Literature:PR - English Literature:PR951-981 - Folk literature",211,"V - Naval Science:V - Naval Science (General):V25-55 - History and antiquities of naval science",211,"B - Philosophy, Psychology, Religion:BF - Psychology:BF795-839 - Temperament.  Character",210,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4872-4924 - Pre-Reformation:BX4872-4893 - Waldenses and Albigenses",210,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC261-269 - July Revolution of 1830.  July Monarchy, 1830-1848",210,"D - World History:DT - Africa:DT1001-1190 - Southern Africa",210,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E671-680 - Grant's administrations, 1869-1877",210,"E-F - History of the Americas:F1-975 - United States - Regional:F236-250 - West Virginia",210,"G - Geography, Anthropology, Recreation:G - Geography (General):G65-69 - Geographers",210,"P - Language & Literature:PE - English Languages:PE3701-3729 - Slang.  Argot, etc.",210,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1550-1569 - Assamese",210,"R - Medicine:RG - Gynecology & Obstetrics:RG491-499 - Diseases of the breast",210,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z102.5-104.5 - Cryptography.  Ciphers.  Invisible writing",210,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA601-602 - Food and food supply in relation to public health",209,"T - Technology:TP - Chemical Technology:TP934-945 - Paints, pigments, varnishes, etc.",209,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC251-354.9 - 19th century:DC270-274.5 - February Revolution and Second Republic",208,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492:DG530-537.8 - 1268-1492:DG532-537.8 - Renaissance",208,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM8001-8995 - Artificial languages--Universal languages",208,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z674.7-674.83 - Library information networks",208,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa",207,"E-F - History of the Americas:F1-975 - United States - Regional:F646-660 - South Dakota",207,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF101-127 - Settlements",207,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2350.8-2356 - Large industry.  Factory system.  Big business",207,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4701-4751 - Government securities.  Industrial securities. Venture capital",207,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ1070-1199 - Central Asia (incl former republics of the Soviet Union)",207,"J - Political Science:JN - Political Institutions (Europe):JN7721-7995 - Sweden",206,"T - Technology:TP - Chemical Technology:TP875-888 - Cement industries",206,"V - Naval Science:V - Naval Science (General):V400-695 - Naval education",206,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS585-613 - Study and teaching",205,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK690-699.5 - Azerbaijan.  Azerbaijan S.S.R.",205,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU200-230 - Victoria",205,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7220-7262.5 - Collections:PT7255-7262.5 - Prose",205,"R - Medicine:RD - Surgery:RD651-678 - Neoplasms.  Tumors.  Oncology",205,"T - Technology:TF - Railroad Engineering & Operation:TF855-1127 - Electric railways",205,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP558-618 - Early and medieval to 1580",204,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR2152-2285 - Macedonia",204,"K - Law:KJ-KKZ - Europe:KJR - Denmark",204,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC215-238.4 - Community and the school:LC225-226.7 - Home and school",204,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1051-1072 - Professional education",204,"N - Fine Arts:N - Visual arts:N8554-8585 - Examination and conservation of works of art",204,"D - World History:DA-DR - Europe:DAW - Central Europe",203,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8100-8167 - 19th century:PT8102-8120 - Andersen, Hans Christian",203,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9201-9499 - Literary history and criticism",203,"A - General:AZ - History of Scholarship & Learning, The Humanities:AZ200-361 - History",202,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF520-542.4 - Antiquities.  Social life and customs.  Ethnography",202,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG241-253 - Conquest of Mediterranean world.  264-133",202,"D - World History:DS - Asia:DS498-498.8 - Goa.  Portuguese in India",202,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS537-574 - By region:PS551-559 - South",202,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT4801-4897 - Low German literature",202,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z689-689.8 - Acquisition (selection, purchase, gifts, duplicates)",202,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT21-22 - Biography as an art or literary form",201,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF720.5-728 - Description and travel",201,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG51-70 - Local history and description:DG59 - Regions outside of Italy, A-Z",201,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1121-1139 - Newfoundland and Labrador",201,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ1073-1073.5 - Thanatology.  Death.  Dying",201,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH801-811 - Local history and description:DH811 - Other cities, towns, etc., A-Z",200,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ51-57 - General",200,"J - Political Science:J - General Legislative & Executive Papers:J80-87 - United States:J80-82 - Presidents' messages and other executive papers",200,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6500-6593.36 - Afrikaans literature",200,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4710.1-4715.95 - Eastern churches in communion with Rome.  Catholics of the Oriental rites.  Uniats",199,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest:DP134-143.8 - Castile and Leon",199,"E-F - History of the Americas:E11-143 - America:E11-29 - General:E29 - Elements in the population",199,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMC - Regional comparative and uniform law",199,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG240-277 - Japan",199,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3916-3918 - Social and political aspects of music:ML3880-3915 - Criticism",199,"D - World History:DA-DR - Europe:DG - Italy:DG819-875 - Southern Italy:DG819-829 - General",198,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT301-330 - Morocco:DT328-329 - Local history and description",198,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1286-1289 - Communal ownership",198,"J - Political Science:JS - Local & Municipal Government:JS7525-7819.9 - Africa",198,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR191-1020 - Public and official heraldry",197,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR84.9-89.8 - 1878-1944",197,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest:DP124-133.7 - Aragon (Catalonia)",196,"P - Language & Literature:P - Philology & Linguistics:P101-410 - Language.  Linguistic theory.  Comparative grammar:P326-326.5 - Lexicology",196,"R - Medicine:RK - Dentistry:RK301-493 - Oral and dental medicine.  Pathology.  Diseases",196,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT401-409 - Somalia.  Somaliland and adjacent territory",195,"D - World History:DA-DR - Europe:DA - Great Britain:DA700-745 - Wales:DA700-713 - General",194,"H - Social Sciences:HM - Sociology:HM711-806 - Groups and organizations:HM786-806 - Organizational sociology.  Organization theory",194,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNP - China (Republic, 1949-   ).  Taiwan",194,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG60-170.2 - India.  Pakistan.  Bangladesh.  Burma.  Sri Lanka.  Nepal",194,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ5501-6661 - Medals and medallions",193,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy:DG631-645 - Genoa",193,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD49-49.5 - Crisis management.  Emergency management. Inflation",193,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ79 - Sadism.  Masochism.  Fetishism, etc.",193,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK4990-5046 - Prakrit literature",193,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM1-94 - Hperborean languages of Arctic Asia and America",193,"P - Language & Literature:PN - Literature (General):PN4001-4355 - Oratory.  Elocution, etc.:PN4177-4191 - Debating",193,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV900-1450 - Religious societies, associations, etc.:BV950-1280 - Religious societies of men, brotherhoods, etc.",192,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492:DG503-529 - 476-1268",192,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E436-440.5 - Buchanan's administration, 1857-1861:E440.5 - State of the country, November 1860-March 4, 1861",192,"N - Fine Arts:N - Visual arts:N8350-8356 - Art as a profession.  Artists",192,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9000-9034 - General",192,"S - Agriculture:S - Agriculture (General):S589.75-589.76 - Agriculture and the environment",192,"T - Technology:TN - Mining Engineering, Metallurgy:TN950-997 - Building and ornamental stones",192,"U - Military Science:UC - Maintenance & Transportation:UC270-360 - Transportation",192,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP91-96 - Earliest to 711:DP92-96 - Pre-Roman, Roman, and Gothic periods",191,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT495-499 - Human body and its parts.  Personal beauty",191,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF308.5-310.5 - Horsemanship.  Riding",191,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5410-5595 - Church of Ireland",190,"E-F - History of the Americas:F1-975 - United States - Regional:F756-770 - Wyoming",190,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT5320-6737 - Customs relative to special classes:GT5750-6390 - By occupation",190,"N - Fine Arts:NC - Drawing, Design, Illustration:NC1860-1896 - Greeting cards, postcards, invitations, book jackets, etc.",190,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS200-201 - Pharmaceutical dosage forms",190,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT990-1010 - Creeds, confessions, covenants, etc.",189,"D - World History:DS - Asia:DS520-560.72 - Southeast Asia:DS531-560.72 - French Indochina:DS560-560.72 - Democratic Republic (North Vietnam), 1945-",189,"E-F - History of the Americas:F1-975 - United States - Regional:F106 - Atlantic coast.  Middle Atlantic States",189,"E-F - History of the Americas:F1-975 - United States - Regional:F741-755 - Idaho",189,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements",189,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3818-4505 - Individual authors:PA3851-3858 - Aesop",189,"U - Military Science:U - Military Science (General):U750-773 - Military life, manners and customs, antiquities, etc.",189,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL458 - Women in comparative religion",188,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E881-884 - George H. W. Bush's administration, 1989-1993",188,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence",188,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPE - Laos",188,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1625-1626 - Recitations with music",188,"N - Fine Arts:NC - Drawing, Design, Illustration:NC845-915 - Graphic art materials",188,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN3203-3299 - Tableaux, pageants, \"Happenings,\" etc.",188,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4625-4780 - Moral theology:BV4625-4627 - Sins and vices",187,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1641-1643 - Bank loans.  Bank credit.  Commercial loans",187,"D - World History:DS - Asia:DS600-605 - Malay Archipelago",186,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC37-44.3 - Home education",186,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4101-4197 - West and North Semitic languages",186,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27",185,"K - Law:KZ - Law of nations:KZ6350-6785 - Enforced settlement of international disputes:KZ6374-6377 - Threat of force",185,"T - Technology:TH - Building Construction:TH6101-6887 - Plumbing and pipefitting",185,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC95-109 - 1328-1515:DC96-101.7 - Hundred Years' War, 1339-1453",184,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ124-150 - Military, naval, and political history, etc.  Foreign relations",184,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5419-5422 - Wholesale trade",183,"Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams:QK494-494.5 - Gymnosperms",183,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR267-267.5 - 1944-1989",182,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6101-6193 - Adventists.  \"Millerites\"",181,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB946-958.6 - 20th century:DB955-955.8 - 1918-1945.  Revolution of 1919-1920",181,"D - World History:DA-DR - Europe:DD - Germany:DD21.5-43 - Description and travel",181,"D - World History:DT - Africa:DT2871-3025 - Zimbabwe.  Southern Rhodesia:DT2914-3000 - History",181,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1041-1107 - Anonyms and pseudonyms",181,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA909-965 - History:DA930-965 - By period:DA949.7-965 - 19th-20th centuries.  Irish question:DA963 - 1922-    .  Republic of Ireland.  Irish Free State",180,"Q - Science:QC - Physics:QC851-999 - Meteorology.  Climatology:QC980-999 - Climatology and weather:QC994.95-999 - Weather forecasting",180,"S - Agriculture:SB - Plant Culture:SB71-87 - History",180,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH381-385 - Whaling",180,"T - Technology:TR - Photography:TR287-500 - Photographic processing.  Darkroom technique",180,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1300-1380 - Jainism:BL1310-1314.2 - Sacred books.  Sources",179,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV301-530 - Hymnology:BV360-465 - Denominational and special types of hymnbooks in English",179,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB29-34.5 - Antiquities.  Social life and customs.  Ethnography",179,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB69.7-77 - 1740-1815",179,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH451-492 - Antiquities.  Social life and customs.  Ethnography",179,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP285-402 - Local history and description:DP350-374 - Madrid",179,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP161.5-166 - 1479-1516.  Fernando V and Isabel I",179,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU428-430 - Local history and description",179,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG8835-8899 - Life insurance business.  Management",179,"J - Political Science:JC - Political Theory:JC131-273 - Modern state:JC177-178 - Thomas Paine",179,"S - Agriculture:SF - Animal Culture:SF380-388 - Goats",179,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEB - British Columbia",178,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1020-1034 - Automobile travel.  Motoring.  Automobile racing",177,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG171-172 - Indochina",177,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ2001-2199 - Coptic",177,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD201-500 - Water supply for domestic and industrial purposes:TD481-493 - Water distribution systems",177,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1298-1335 - Evolutionary and genetic ethics",176,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT450-450.49 - Rwanda.  Ruanda-Urundi",176,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E415.6-415.9 - General",176,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN296-296.5 - Medical anthropology",176,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGD - Guatemala",176,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF910 - Other diseases and conditions",176,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB35-40.5 - General",175,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK502.3-502.75 - Baltic States",175,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP639-1154 - Mu'amalat",175,"K - Law:KJ-KKZ - Europe:KJT - Finland",175,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC377-399 - Marine sediments",174,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3400-3465 - Dance music",174,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6901-6997 - Christian Science",173,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV182-182.5 - Recreational areas and facilities.  Recreation centers",173,"H - Social Sciences:HM - Sociology:HM711-806 - Groups and organizations:HM756-781 - Community",173,"J - Political Science:JN - Political Institutions (Europe):JN6101-6371 - Belgium",173,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGN1-9800 - Cuba",173,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1351-1389 - Lyric poetry",173,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6299-6308 - Maxims",173,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF14-1257 - Great Britain:LF960-1137 - Scotland",172,"N - Fine Arts:NK - Decorative Arts:NK1160-1590 - Decoration and ornament.  Design:NK1548-1590 - Special subjects for design",172,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2781-2790 - Sindhi",172,"D - World History:DS - Asia:DS251-326 - Iran (Persia):DS260.7-262 - Antiquities",171,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFR - Rhode Island",171,"M - Music:ML - Literature on music:ML112-112.5 - Music printing and publishing",171,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR568-575 - 1861-1909.  War with Russia, 1877-1878",170,"K - Law:KJ-KKZ - Europe:KJ - History of Law:KJ160-1040 - Germanic law",170,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ1-10 - Periodicals.  Yearbooks (General)",169,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1610 - Tolerance and toleration",169,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9751-9793 - Shakers.  United Society of Believers.  Millennial Church",169,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1061-1065 - Manitoba",169,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR880 - Medicine.  Folk medicine",169,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K288-296 - Interpretation and construction of law.  Lacunae in law",169,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS535-537 - The Bible as literature",168,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS647-649 - Prophecy",168,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP233-272.4 - 20th century.  1886-:DP272-272.4 - 1975-",168,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1352-1485 - Slovenia",168,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature:PT7001-7087 - Literary history and criticism",168,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8060-8098 - 16th-18th centuries",168,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5148-5149 - Sacraments",167,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2300-2650 - Local history and description of Czech lands:DB2600-2649 - Prague (Praha)",167,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7520-7550 - Provincial, local, foreign",167,"R - Medicine:R - Medicine (General):R855-855.5 - Medical technology",167,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT95-97.2 - Divine law.  Moral government",166,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK941-949.5 - Uzbekistan.  Uzbek S.S.R.",166,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL460-478 - Early and medieval to 1387",166,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History:DL43-49 - General",166,"Q - Science:QM - Human anatomy:QM531-549 - Regional anatomy",166,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z41-42.5 - Autographs.  Signatures",166,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF550-552.8 - General",165,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E660-664 - General:E660 - Collected works of American statesmen",165,"J - Political Science:JZ - International relations:JZ6385-6405 - The armed conflict.  War and order",165,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3770-3795 - Science and arts.  Research",165,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1711-2397 - France",165,"T - Technology:TA - Engineering (General), Civil Engineering:TA365-367 - Acoustics in engineering.  Acoustical engineering",165,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL435-457 - Nature worship",164,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6349-6470 - Individual branches",164,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU150-180 - New South Wales:DU178-180 - Local history and description",164,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9651-9899 - Fire insurance",164,"D - World History:DS - Asia:DS491-492.9 - Bhutan",163,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT516-516.9 - Sierra Leone",163,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEA - Alberta",163,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ8991-9348 - Ethiopian languages",163,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages:PL450-481 - Tungus Manchu languages",163,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8762-8785 - Pentecostal churches",162,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR1179-3395 - Family heraldry",162,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP501-520 - General",162,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR95-98 - Local history and description",162,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3176-3199 - Special classes.  By race or ethnic group",162,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNM - Cambodia",162,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8024-8027 - Special families of languages",162,"R - Medicine:RC - Internal Medicine:RC49-52 - Psychosomatic medicine",162,"R - Medicine:RX - Homeopathy",162,"V - Naval Science:VC - Naval Maintenance",162,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History",161,"H - Social Sciences:HA - Statistics:HA38-39 - Registration of vital events.  Vital records",161,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1428-1431 - International cooperation",161,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ199-218 - Judicial decisions and arbitral awards.  Law reports",161,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5401-5809 - Syriac",161,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK4501-4681 - Pali literature",161,"P - Language & Literature:PR - English Literature:PR57-78 - Criticism",161,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT98-180 - God:BT126-127.5 - Revelation",160,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR101-115 - Flags, banners, and standards",160,"D - World History:DA-DR - Europe:DA - Great Britain:DA700-745 - Wales:DA725-738 - Description and travel",160,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2401-2431 - Surinam",160,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA125-155 - Map drawing, modeling, printing, reading, etc.",160,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9956-9969 - Casualty insurance",160,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations:JZ4841-4848 - Political non-governmental organizations. NGOs",160,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K321-474 - Schools of legal theory:K330-344 - Positivism",160,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3978-3992 - Public utilities",160,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK1-85 - General",160,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets:SF456-458.83 - Fishes.  Aquariums",160,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519:DD126-155 - Medieval Empire, 481-1273:DD136-144 - 919-1125.  Houses of Saxony and Franconia",159,"D - World History:DS - Asia:DS153-154.9 - Jordan.  Transjordan:DS153.7-154.55 - History",159,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN406-517 - Cultural traits, customs, and institutions:GN448-450.8 - Economic organization.  Economic anthropology",159,"H - Social Sciences:HA - Statistics:HA154-4737 - Statistical data:HA154-155 - Universal statistics",159,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5429.7-5430.6 - Shopping centers.  Shopping malls",159,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFA1-599 - Alabama",159,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM9001-9599 - Montana",159,"K - Law:KJ-KKZ - Europe:KKN - Norway",159,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG725-791 - Obstetric operations.  Operative obstetrics",159,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP160-165 - General works on Islam:BP165.5 - Dogma ('Aqa'id)",158,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR268-269.6 - 1989-",158,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT549-549.9 - Senegal",158,"K - Law:KJ-KKZ - Europe:KJM - Bulgaria",158,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC6201-6401 - University extension",158,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving",158,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG5631-5689 - Sorbian (Wendic)",158,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG801-871 - Puerperal state",158,"U - Military Science:UF - Artillery:UF500-515 - Weapons systems",158,"A - General:AP - Periodicals:AP200-230 - Juvenile periodicals",157,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR62-64.5 - Antiquities.  Social life and customs.  Ethnography",157,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP144 - General works",157,"N - Fine Arts:NK - Decorative Arts:NK1648-1678 - Religious art",157,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK8001-8832 - Armenian:PK8001-8496 - Language",157,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6058-6060 - Early to 1500",157,"S - Agriculture:SB - Plant Culture:SB112 - Irrigation farming",157,"A - General:AM - Museums, Collectors & Collecting:AM200-501 - Collectors and collecting",156,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN49-298 - Physical anthropology.  Somatology:GN269-279 - Race (General)",156,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV6021-6033 - History",156,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFS1801-2399 - South Carolina",156,"M - Music:MT - Instruction and study:MT85 - Conducting. Score reading and playing",156,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3310-3319 - 18th century:PG3316 - Lomonosov",156,"S - Agriculture:SK - Hunting Sports:SK295-305 - Big game",156,"T - Technology:TA - Engineering (General), Civil Engineering:TA170-171 - Environmental engineering",156,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4445-4452 - 1989-",155,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU250-280 - Queensland",155,"J - Political Science:JN - Political Institutions (Europe):JN2210-2229 - Czech Republic.  Czechoslovakia",155,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms:NB1293-1310 - Portrait sculpture",155,"P - Language & Literature:PD - Germanic Languages:PD1001-1350 - Old Germanic dialects",155,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1075-1080 - Alberta",154,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3150 - Public law",154,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7611-7688 - Civil procedure.  International civil procedure",154,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC970-986 - Military medicine.  Naval medicine",154,"T - Technology:TS - Manufactures:TS940-1047 - Leather industries.  Tanning",154,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5140-5355 - Buddhist ministry.  Priesthood.  Organization:BQ5310-5350 - Preaching",153,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH677-694 - 20th century",153,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G1791-2196 - Europe:G2110-2196 - Former Soviet republics.  Union of Soviet Socialist Republics (U.S.S.R.).  Russia (Empire)",153,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1336-1339 - Small holdings.  Peasant proprietors. Parcellation",153,"K - Law:KJ-KKZ - Europe:KKG - Iceland",153,"K - Law:KL - History of Law in the Ancient Orient:KL4110-4399 - Greek law",153,"V - Naval Science:VG - Minor Services of Navies:VG90-95 - Naval aviation",153,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK921-929.5 - Tajikistan.  Tajik S.S.R.  Tadzhikistan",152,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR430-488 - Folklore relating to private life",152,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms:NB1330-1685 - Sculptural monuments",152,"Q - Science:QC - Physics:QC851-999 - Meteorology.  Climatology:QC974.5-976 - Meteorological optics",152,"B - Philosophy, Psychology, Religion:BM - Judaism:BM585-585.4 - Controversial works against the Jews",151,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV30-135 - Times and seasons.  The Church year:BV107-133 - Lord's Day.  Sunday.  Sabbath",151,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG241-253 - Conquest of Mediterranean world.  264-133:DG242-249.4 - First and Second Punic Wars.  Illyrian wars.  264-201",151,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF101-127 - Settlements:GF125 - Cities.  Urban geography",151,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5446-5459 - Canvassing.  Peddling",151,"H - Social Sciences:HJ - Public Finance:HJ210-240 - History",151,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFM6601-7199 - Mississippi",151,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA3050-4505 - Greek literature:PA3520-3564 - Criticism, interpretation, etc.",151,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS537-574 - By region:PS538-549 - North",151,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9547-9639 - Collections",151,"U - Military Science:UE - Cavalry, Armor",151,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG27-41 - Geography.  Description and travel",150,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K280-286 - Sources of law",150,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGB - Costa Rica",150,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4490-4498 - Chamic languages",150,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8015-8021 - Languages.  By region or country",150,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6500-6593.36 - Afrikaans literature:PT6590-6593.36 - Individual authors or works",150,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1037-1037.8 - Career education",149,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3071-3089 - Drama",149,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK7001-7075 - Dardic (Pisacha)",149,"U - Military Science:U - Military Science (General):U150-155 - Military planning",149,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ6400-6495 - Pilgrims and pilgrimages",148,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL701-719.9 - Vasa dynasty, 1523-1654.  Gustaf II Adolf, 1611-1632",148,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR81-84 - Turkish rule, 1396-1878",148,"E-F - History of the Americas:F1-975 - United States - Regional:F721-722 - Rocky Mountains.  Yellowstone National Park",148,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K100-103 - Legal education",148,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFO1201-1799 - Oklahoma",148,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNR - Hong Kong",148,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC129-139 - Compulsory education",148,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic",148,"V - Naval Science:VK - Navigation, Merchant Marine:VK1000-1249 - Lighthouse service",148,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan:DT155.3-157.67 - History",147,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E300-302.6 - General",147,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS660-668.2 - Oratory",147,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4900-4911 - Works of consolation and cheer",146,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century:D279-280.5 - War of the Grand Alliance, 1688-1697",146,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E431-435 - Pierce's administration, 1853-1857:E433 - Slavery question, 1853-1857",146,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ6010-6060 - Pacific settlement of international disputes",146,"M - Music:MT - Instruction and study:MT68 - Improvisation. Accompaniment. Transposition",146,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7220-7262.5 - Collections:PT7255-7262.5 - Prose:PT7261-7262.5 - Sagas",146,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1145-1146 - Hindu literature",145,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV900-1450 - Religious societies, associations, etc.:BV950-1280 - Religious societies of men, brotherhoods, etc.:BV1000-1220 - Young Men's Christian Associations",145,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA815-826 - 19th-20th centuries",145,"D - World History:DS - Asia:DS376-392.2 - Pakistan:DS380 - Ethnography",145,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E872-875 - Carter's administration, 1977-1981",145,"M - Music:ML - Literature on music:ML3928-3930 - Literature for children",145,"M - Music:MT - Instruction and study:MT35-39 - Notation",145,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL490-495 - Far Eastern languages and literature",145,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP186-186.97 - Special days and seasons, fasts, feasts, festivals, etc.  Relics",144,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8551-8593 - Moravian Church.  United Brethren.  Unitas Fratrum. Herrnhuters",144,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9901-9969 - Unviersalism.  Universalists",144,"D - World History:D - History (General):D111-203 - Medieval history:D175-195 - Latin Kingdom of Jerusalem.  Latin Orient, 1099-1291",144,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK36-293 - History:DK293 - 1991-",144,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT621-637 - Liberia:DT630.8-636.53 - History",144,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN1201-1799 - New Hampshire",144,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1311-1537 - Austria",144,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7312-7318 - Scientific and learned literature",144,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV150-168 - Christian symbols and symbolism",143,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject:CT9960-9998 - Other miscellaneous groups",143,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT436-449 - Tanzania.  Tanganyika.  German East Africa:DT443.5-448.25 - History",143,"D - World History:DT - Africa:DT43-154 - Egypt:DT71-72 - Ethnography",143,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT161-165 - Garden cities.  \"The city beautiful\"",143,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP50-69 - History, development and application of Islamic law",143,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE830-898 - General works",143,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections",143,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9725-9850 - 19th century:PT9820-9838 - TegnÃ©r, Esaias",143,"U - Military Science:U - Military Science (General):U260 - Joint operations.  Combined operations",143,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP535-546 - General",142,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP558-618 - Early and medieval to 1580:DP582-618 - House of Aviz, 1385-1580",142,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR201-206 - General",142,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes:HS2301-2460.7 - Political and \"patriotic\" societies",142,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV8790-9024.5 - Africa",142,"J - Political Science:JZ - International relations:JZ1305-2060 - Scope of international relations. Political theory. Diplomacy:JZ1400-1454 - Diplomatic and consular service",142,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M1999 - Collections",142,"B - Philosophy, Psychology, Religion:BF - Psychology:BF908-940 - The hand.  Palmistry",141,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ840-999 - Biography:BQ840-858 - Collective",141,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E421-423 - Taylor's administiration, 1849-July 9, 1850",141,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2131-2133 - British West Indies",141,"J - Political Science:JL - Political Institutions (Canada, Latin America, etc.):JL599.5-839 - West Indies.  Caribbean Area",141,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K2100-2385 - Courts.  Procedure:K2110-2155 - Court organization and procedure",141,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGH1-8000 - Panama",141,"K - Law:KQ-KTZ - Africa:KTZ - Zimbabwe",141,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1251-1299 - Drama",141,"T - Technology:TF - Railroad Engineering & Operation:TF340-499 - Railway equipment and supplies",141,"T - Technology:TS - Manufactures:TS2120-2159 - Cereals and grain.  Milling industry",141,"D - World History:DA-DR - Europe:DAW - Central Europe:DAW1031-1051 - History",140,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K85-89 - Legal research",140,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFV1-599 - Vermont",140,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5901-5980 - Provincial, local, foreign",140,"T - Technology:TT - Handicrafts:TT205-267 - Metalworking",140,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4120-4122 - Ethnography",139,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGE - Honduras",139,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5100-5125 - Symbols and symbolism",138,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV770-777 - Church finance.  Church property",138,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ301-851 - Local history and description:DQ820-829 - Alps",138,"E-F - History of the Americas:F1-975 - United States - Regional:F516-520 - Ohio River and Valley",138,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8075-8107 - Insurance business.  Insurance management",138,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFA3601-4199 - Arkansas",138,"K - Law:KQ-KTZ - Africa:KTW - Uganda",138,"N - Fine Arts:ND - Painting:ND25-48 - General",138,"P - Language & Literature:PD - Germanic Languages:PD1001-1350 - Old Germanic dialects:PD1101-1211 - Gothic",138,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ2340-2399 - Libyco-Berber languages.  Berber languages",138,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN3035 - The Jewish theater",138,"S - Agriculture:SF - Animal Culture:SF508-510.6 - Game birds",138,"T - Technology:TR - Photography:TR925-1050 - Photomechanical processes",138,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV5015-5068 - Asceticism",137,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX130-139 - Coptic Church",137,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D301-309 - Period of the French Revolution",137,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL121-142.5 - Antiquities.  Social life and customs.  Ethnography",137,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7060-7081 - Choice of law",137,"K - Law:KJ-KKZ - Europe:KKY - Ukraine (1991-    )",137,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936)",137,"R - Medicine:RC - Internal Medicine:RC321-571 - Neurosciences.  Biological psychiatry.  Neuropsychiatry:RC435-571 - Psychiatry:RC490-499 - Hypnotism and hypnosis.  Suggestion therapy",137,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT450-450.49 - Rwanda.  Ruanda-Urundi:DT450.26-450.437 - History",136,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT551-551.9 - Mali.  Mali Federation.  Sudanese Republic.  French Sudan",136,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFD1-599 - Delaware",136,"N - Fine Arts:NB - Sculpture:NB1-50 - General",136,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS241-286 - Special regions, states, etc.:PS241-255 - North",136,"P - Language & Literature:PS - Americal Literature:PS8001-8599 - Canadian  literature",136,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG770-1045 - Organization.  Personnel management",136,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV646-651 - Church polity",135,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ3101-3971 - Assyriology.  Akkadian:PJ3231-3595 - Language",135,"T - Technology:TX - Home Economics:TX851-885 - Dining-room service",135,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ221-249 - Antiquities.  Archaeology",134,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF235-238.9 - Hellenistic period, 323-146.B.C.",134,"R - Medicine:RZ - Other Systems of Medicine:RZ400-408 - Mental healing",134,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR485-555.7 - 1281/1453-1789.  Fall of Constantinople, 1453:DR531-555.7 - 1640-1789",133,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB980-992 - Watersheds.  Runoff.  Drainage",133,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ77-77.2 - Transvestism",133,"T - Technology:TA - Engineering (General), Civil Engineering:TA800-820 - Tunneling.  Tunnels",133,"T - Technology:TH - Building Construction:TH6014-6081 - Environmental engineering of buildings.  Sanitary engineering of buildings",133,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ7001-9800 - Modifications, schools, etc.:BQ7100-7285 - Theravada (Hinayana) Buddhism",132,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK911-919.5 - Kyrgyzstan.  Kirghiz S.S.R.  Kirghizia",132,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL721-743 - ZweibrÃ¼cken dynasty, 1654-1718",132,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ59-76 - Military and political history.  Foreign relations",132,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K578-579 - Concepts applying to several branches of law",132,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG173 - Malaysia",132,"M - Music:M - Music:M5-1480 - Instrumental music:M5 - Collections",132,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ601-989 - Special groups",132,"R - Medicine:RM - Therapeutics, Pharmacology:RM270-282 - Immunotherapy.  Serotherapy",132,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT433.2-433.29 - Uganda:DT433.252-433.287 - History",131,"M - Music:MT - Instruction and study:MT5.5-7 - Music theory:MT3-5 - History",131,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH334.9-336.5 - Fishery processing",131,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL410 - Religions in relation to one another",130,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1055 - Southern and Eastern Asia",130,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ5501-6661 - Medals and medallions:CJ5795-6661 - By region or country",130,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History",130,"E-F - History of the Americas:F1-975 - United States - Regional:F476-485 - Old Northwest.  Northwest Territory",130,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1470-1511 - Parties.  Party games and stunts:GV1491-1507 - Puzzles",130,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5735-5746 - Business records management",130,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFS3001-3599 - South Dakota",130,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB1805-2151 - State teachers colleges:LB1811-1987 - United States",130,"N - Fine Arts:NK - Decorative Arts:NK1160-1590 - Decoration and ornament.  Design:NK1160-1174 - General",130,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6701-6821 - Afghan (Pashto, Pushto, Pushtu, etc.)",130,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA638 - Immunity and immunization in relation to public health",130,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR401-419 - General",129,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E416-420 - Polk's administration, 1845-1849",129,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3180-3182 - Universe.  Solar system",129,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB500-555 - Mountains.  Orography",129,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1301-1313 - Nationalization (Agrarian socialism)",129,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1725-1778 - Banks and the state.  State supervision of banks",129,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ950-1030 - Pneumatic machinery",129,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX710-719 - Serbian Church.  Yugoslav Church",128,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT641-665 - Zaire.  Congo (Democratic Republic).  Belgian Congo:DT649.5-650 - Ethnography",128,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV675-677 - Accidents.  Prevention of accidents",128,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV8290-8291 - Private security services",128,"J - Political Science:JS - Local & Municipal Government:JS1701-1800 - Canada",128,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K37-44 - Bibliography",128,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE31-33 - Brazil",128,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4610-4827 - Spain",128,"R - Medicine:RC - Internal Medicine:RC91-103 - Disease due to physical and chemical agents",128,"R - Medicine:RD - Surgery:RD680-688 - Diseases of the locomotor system (Surgical treatment)",128,"R - Medicine:RM - Therapeutics, Pharmacology:RM265-267 - Antibiotic therapy.  Antibiotics",128,"T - Technology:TC - Hydraulic engineering:TC530-537 - River protective works.  Regulation.  Flood control",128,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7301-7343 - Disciples of Christ.  Campbellites",127,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC425-433 - 21st century",127,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ95-116 - General",127,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL971-991 - Local history and description:DL991 - Other cities, towns, etc., A-Z",127,"N - Fine Arts:NA - Architecture:NA2400-2460 - Museums.  Exhibitions",127,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3240-3255 - Drama",127,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1350-1418 - Hoisting and conveying machinery",127,"T - Technology:TS - Manufactures:TS195-198.8 - Packaging",127,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1500-1530 - Military astronautics.  Space warfare.  Space surveillance:UG1523-1525 - By region or country",127,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC83-87.6 - Submarine topography",126,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV4905-4959 - Animal experimentation.  Anti-vivisection",126,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF225-619 - Organs and functions of government:JF251-289 - Executive.  Heads of state",126,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFA1201-1799 - Alaska",126,"N - Fine Arts:NX - Arts in General:NX760-770 - Administration of the arts",126,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6510-6525 - Omar Khayyam",126,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA643-645 - Disease (Communicable and noninfectious) and public health:RA645.3-645.37 - Home health care services",126,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK4601-4661 - Electric heating",126,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z712-714 - Circulation.  Loans.  Charging systems",126,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ130 - Dictionaries (General)",125,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2000-2035 - General.  Description and travel.  Antiquities.  Social life and customs",125,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF802-832 - 1821-1913:DF804-815 - War of Independence, 1821-1829",125,"D - World History:DT - Africa:DT43-154 - Egypt:DT115-154 - Local history and description:DT139-153.5 - Cairo",125,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP491-497.95 - Particular genres",125,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2018-2019.5 - Two or more solo voices",125,"M - Music:MT - Instruction and study:MT955-956 - Musical theater",125,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN661-694 - Medieval (to 1500):PN688-691 - Poetry",125,"U - Military Science:UD - Infantry:UD380-425 - Small arms.  Swords, etc.",125,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1300-1380 - Jainism:BL1376-1378.85 - Forms of worship",124,"D - World History:DA-DR - Europe:DG - Italy:DG987-999 - Malta.  Maltese Islands",124,"E-F - History of the Americas:F1-975 - United States - Regional:F597 - The Northwest",124,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE7-9 - Mexico",124,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism:PT7170-7176 - Poetry",124,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP188-190 - Islamic religious life:BP188.2-188.3 - Devotional literature",123,"E-F - History of the Americas:F1-975 - United States - Regional:F852-854 - Pacific Northwest.  Columbia River and Valley.  Northwest boundary since 1846",123,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1441-1457 - Belize",123,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT751-815 - Serfdom",123,"J - Political Science:J - General Legislative & Executive Papers:J1-9 - Gazettes",123,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law",123,"K - Law:KZ - Law of nations:KZ1255-1273 - Theory and principles:KZ1267-1273 - Domain of the law of nations",123,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ1001-1989 - Egyptology:PJ1091-1109 - Egyptian writing and its decipherment",123,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets:SF451-455 - Rabbits and hares",123,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG490 - Land mines, etc.",123,"V - Naval Science:VK - Navigation, Merchant Marine:VK1250-1299 - Shipwrecks and fires",123,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP191-253 - Branches, sects, etc.:BP221-223 - Black Muslims",122,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4625-4780 - Moral theology:BV4650-4715 - Precepts from the Bible",122,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL860-879 - 20th century",122,"D - World History:DS - Asia:DS350-375 - Afghanistan:DS374-375 - Local history and description",122,"J - Political Science:JN - Political Institutions (Europe):JN7380-7389 - Iceland",122,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE3-5 - Canada",122,"N - Fine Arts:NC - Drawing, Design, Illustration:NC703-725 - General works",122,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6202-6971 - Individual authors:PA6611-6637 - Pliny, the Elder",122,"T - Technology:TR - Photography:TR590-620 - Lighting",122,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books:BP100-134 - Koran:BP128.15-129.83 - Special parts and chapters",121,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB974.9-999 - Local history and description",121,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB2001-3029 - Brittanic group:PB2801-2932 - Breton.  Armorican",121,"R - Medicine:RD - Surgery:RD701-811 - Orthopedic surgery:RD792-811 - Physical rehabilitation",121,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ141-209 - Religious education (General)",120,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK509 - Southern Soviet Union:DK509.1-509.95 - Moldova.  Moldovian S.S.R.  Bessarabia",120,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1706-1708 - Accounting.  Bookkeeping",120,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGV1-8200 - Puerto Rico",120,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ601-989 - Special groups:PJ701-989 - Islamic",120,"P - Language & Literature:PR - English Literature:PR931-938 - Wit and humor",120,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism:PT5001-5112 - General",120,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP201-232.6 - 1808-1886.  19th century:DP212-220 - 1814-1868.  Bourbon restoration",119,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEM - Manitoba",119,"N - Fine Arts:N - Visual arts:N8510-8553 - Art studios, materials, etc.",119,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism:PT5121-5185 - Special periods",119,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7512-7513 - 21st century",119,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period",118,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT545-545.9 - CÃ´te d'Ivoire.  Ivory Coast",118,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E784-805 - 1919-1933.  Harding-Coolidge-Hoover era.  \"The twenties\":E801-805 - Hoover's administration, 1919-1933",118,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G9800-9804 - Antarctica",118,"J - Political Science:JZ - International relations:JZ5.5-18 - Periodicals",118,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFW1201-1799 - West Virginia",118,"L - Education:LC - Special Aspects of Education:LC1200-1203 - Inclusive education",118,"M - Music:MT - Instruction and study:MT70-74 - Instrumentation and orchestration",118,"S - Agriculture:SF - Animal Culture:SF411-459 - Pets:SF459 - Other animals",118,"B - Philosophy, Psychology, Religion:BF - Psychology:BF638-648 - New Thought.  Menticulture, etc.",117,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4872-4924 - Pre-Reformation:BX4913-4924 - Hussites",117,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2040-2043 - Ethnography",117,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-",117,"D - World History:DT - Africa:DT1001-1190 - Southern Africa:DT1062-1182 - History",117,"R - Medicine:RM - Therapeutics, Pharmacology:RM260-263 - Chemotherapy",117,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV4005-4013 - Immigrants",116,"J - Political Science:JN - Political Institutions (Europe):JN101-1371 - Great Britain:JN1187-1371 - Scotland",116,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFA2401-2999 - Arizona",116,"K - Law:KQ-KTZ - Africa:KTT - Tanzania",116,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education:LC531-629 - Protestant",116,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6279-6288 - Epigrams",116,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL2600-2630 - Pacific Ocean islands.  Oceania",115,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM656-657 - Forms of worship",115,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS345 - American Indian languages",115,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF227-228 - Athenian supremacy.  Age of Pericles. 479-431 B.C.",115,"G - Geography, Anthropology, Recreation:GN - Anthropology:GN301-674 - Ethnology.  Social and cultural anthropology:GN397-397.7 - Applied anthropology",115,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV9100-9269 - Australia.  New Zealand",115,"K - Law:KJ-KKZ - Europe:KKE - Greece",115,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa",115,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC2700-3708 - Dialects.  Provincialisms:PC3420.8-3495 - Langue d'oc dialects",115,"S - Agriculture:SB - Plant Culture:SB125 - Training and pruning",115,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR3499-4420 - Titles of honor, rank, precedence, etc.",114,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ201-210 - 20th century",114,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G2800-3064 - Oceans (General)",114,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2366-2367.75 - College examinations",114,"N - Fine Arts:NA - Architecture:NA1995 - Architecture as a profession",114,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK7001-7075 - Dardic (Pisacha):PK7021-7037 - Kashmiri",114,"R - Medicine:RS - Pharmacy & Materia Medica:RS139-141.9 - Pharmacopoeias",114,"S - Agriculture:SF - Animal Culture:SF402-405 - Fur-bearing animals",114,"T - Technology:TT - Handicrafts:TT300-382.8 - Painting.  Wood finishing",114,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV30-135 - Times and seasons.  The Church year:BV43-64 - Feast days",113,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV30-135 - Times and seasons.  The Church year:BV80-105 - Fasts",113,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ124-191 - 19th century",113,"H - Social Sciences:HE - Transportation & Communications:HE9713-9715 - Cellular telephone services industry.  Wireless telephone industry",113,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2321-2323 - Tax incidence.  Tax shifting.  Tax equity",113,"J - Political Science:JF - Political Institutions (General):JF1338-2112 - Public administration:JF1501-1521 - Civil service",113,"K - Law:KQ-KTZ - Africa:KTV - Tunisia",113,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education:S550-559 - Exhibitions.  Fairs",113,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z683-683.5 - Finance.  Insurance",113,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR219-229 - Military, naval, and political history.  Foreign relations",112,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR51-56.7 - General",112,"D - World History:DT - Africa:DT1501-1685 - Namibia.  South-West Africa",112,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E421-423 - Taylor's administiration, 1849-July 9, 1850:E423 - Slavery question, 1849-1853",112,"E-F - History of the Americas:F1-975 - United States - Regional:F631-645 - North Dakota",112,"H - Social Sciences:HE - Transportation & Communications:HE7601-8700.9 - Telecommunication industry.  Telegraph:HE8660-8688 - Wireless telegraph.  Radiotelegraphy",112,"J - Political Science:JA - Political Science (General):JA27-34 - Societies",112,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3625-3649 - Food.  Drugs.  Cosmetics",112,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3790-4860 - Criminal law and procedure",112,"K - Law:KJ-KKZ - Europe:KKR - Romania",112,"N - Fine Arts:NA - Architecture:NA2500-2599 - General works:NA2599.5-2599.9 - Architectural criticism",112,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8060-8098 - 16th-18th centuries:PT8070-8094.5 - Holberg, Ludvig",112,"R - Medicine:RD - Surgery:RD101-104 - Fractures (General)",112,"S - Agriculture:SB - Plant Culture:SB118.48-118.75 - Nurseries.  Nursery industry",112,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D351-400 - 19th century.  1801-1914/1920:D385-393 - 1830-1870",111,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT1754-1770 - Ethnography:DT1757 - Apartheid",111,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1112-1116 - Investments",111,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons",111,"M - Music:ML - Literature on music:ML40-44 - Programs",111,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6001-6099 - General",111,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR4501-6305 - Chivalry and knighthood (Orders, decorations, etc.):CR4571-4595 - Duels and dueling",110,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH620-676 - 1794-1909",110,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL443-451.5 - General",110,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR190-2154.5 - Sources",110,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGG - Nicaragua",110,"N - Fine Arts:NC - Drawing, Design, Illustration:NC390-670 - Study and teaching",110,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1390-1393 - Still life",110,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK1981-2000 - Hindustani language",110,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5420-5460 - Special periods",110,"S - Agriculture:S - Agriculture (General):S604.5-604.64 - Agricultural conservation",110,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA985-997 - Military geography",110,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF599.8-649 - 1057-1453:DF630-649 - 1261-1453.  Palaeologi",109,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU150-180 - New South Wales:DU170-172 - History",109,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU350-380 - Western Australia",109,"H - Social Sciences:HM - Sociology:HM706 - Social structure",109,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4850-5490 - Intergovernmental organizations.  IGOs:KZ4853-4934 - The League of Nations",109,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1497 - Collections",109,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7945-8046 - Collections",109,"U - Military Science:UD - Infantry:UD157-302 - Tactics.  Maneuvers.  Drill regulations",109,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2325-2333 - Saints.  Hagiology",108,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL401-414 - General",108,"H - Social Sciences:HG - Finance:HG4501-6051 - Investment, capital formation, speculation:HG4621 - Stockbrokers.  Security dealers.  Investment advisers",108,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEN7401-7999 - Nova Scotia",108,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFI1-599 - Idaho",108,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN1-599 - Nebraska",108,"K - Law:KLA-KLW - Eurasia:KLF - Belarus (Republic)",108,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWH - Papua New Guinea",108,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF3992-4010 - Old Saxon",108,"R - Medicine:R - Medicine (General):R722-722.32 - Missionary medicine.  Medical missionaries",108,"S - Agriculture:S - Agriculture (General):S588.4-589.6 - Agricultural physics (incl radioisotopes in agriculture)",108,"V - Naval Science:VF - Naval Ordnance",108,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1100-1107.5 - General",107,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics:CD91-392 - Collection of documents, facsimiles, etc., for study",107,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT31-83 - History of biographical literature.  Lives of biographers",107,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK26-28 - Ethnography:DJK27 - Slavic peoples (General)",107,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL420-442.5 - Antiquities.  Social life and customs.  Ethnography",107,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP528-534.5 - Antiquities.  Social life and customs.  Ethnography",107,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGC - El Salvador",107,"Q - Science:QR - Microbiology:QR171 - Microorganisms in the animal body",107,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1060 - Southwestern Asia.  Asia Minor.  Levant",106,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2441-2471 - French Guiana",106,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8301-8574 - Literary history and criticism",106,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS192-199 - Pharmaceutical technology",106,"S - Agriculture:SB - Plant Culture:SB317.5-319.864 - Horticulture.  Horticultural crops:SB183-317 - Field crops",106,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern:B5800-5802 - By religion",105,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4520-4526.2 - Religious duties",105,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History:DB2080-2247 - By period:DB2135-2182 - Hapsburg rule, 1526-1918",105,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL7-11.5 - Description and travel",105,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR556-567 - 1789-1861.  19th century",105,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU120-125 - Ethnography:DU125 - Australian aborigines",105,"H - Social Sciences:HT - Communities, Classes, Races:HT51-65 - Human settlements.  Communities",105,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3400-3431 - Administrative law:K3402-3417 - The administrative process",105,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFU - Utah",105,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE66-68 - Peru",105,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1400-1403 - Flowers.  Fruit.  Trees",105,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL901-998 - Korean language and literature:PL950-998 - Korean literature:PL997-998 - Local literature",105,"U - Military Science:UH - Other Military Services:UH600-629.5 - Military hygiene and sanitation",105,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL224-227 - Creation.  Theory of the earth",104,"B - Philosophy, Psychology, Religion:BM - Judaism:BM900-990 - Samaritans",104,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6201-6227 - General",104,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP547-557 - Military, naval, and political history.  Foreign relations",104,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1802-1928 - Montenegro",104,"E-F - History of the Americas:F1-975 - United States - Regional:F550.5-553.2 - The Lake region.  Great Lakes",104,"H - Social Sciences:HG - Finance:HG6105-6270.9 - Lotteries",104,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1201-1409.5 - Prakrit",104,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6478-6482 - Jall al-Dn Rm Maulana",104,"T - Technology:TF - Railroad Engineering & Operation:TF670-851 - Local and light railways:TF840-851 - Elevated railways and subways",104,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E303-309 - 1775-1789.  The Confederation, 1783-1789",103,"J - Political Science:JN - Political Institutions (Europe):JN8423-8661 - Portugal",103,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGQ1-9800 - Dominican Republic",103,"T - Technology:TT - Handicrafts:TT950-979 - Hairdressing.  Beauty culture.  Barbers' work",103,"B - Philosophy, Psychology, Religion:BF - Psychology:BF176-176.5 - Psychological tests and testing",102,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1725 - Ethics of social groups, classes, etc.  Professional ethics",102,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL71.5-73 - Biography",102,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC83-97 - Study and teaching.  Research",102,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century:D281-283.5 - War of Spanish Succession, 1701-1714",102,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes:HS1601-2265 - Race societies",102,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1370-1395 - Insolvency and bankruptcy.  Creditors' rights",102,"K - Law:KZ - Law of nations:KZ6350-6785 - Enforced settlement of international disputes:KZ6374-6377 - Threat of force:KZ6360-6373 - Non-military coercion",102,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC71-120.4 - Education and the state:LC72-72.5 - Academic freedom",102,"T - Technology:TR - Photography:TR250-265 - Cameras",102,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL200 - Theism",101,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL205-216 - Nature and attributes of Deity",101,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1600-1605 - General",101,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR51-79 - Crests, monograms, devices, badges, mottoes, etc.",101,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP702-802 - Local history and description:DP802 - Other cities, towns, etc., A-Z",101,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ301-851 - Local history and description:DQ841 - Regions, peaks, etc., A-Z",101,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR279-296 - Local history and description:DR281 - Other provinces, regions, etc., A-Z",101,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR65-69.5 - General",101,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E376-380 - John Quincy Adams' administration, 1825-1829",101,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1221-1469.63 - Indoor games and amusements:GV1301-1311 - Gambling.  Chance and banking games",101,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6941-6948 - Employers' associations",101,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9035-9055 - Special periods",101,"S - Agriculture:SB - Plant Culture:SB169-172.5 - Tree crops",101,"T - Technology:TA - Engineering (General), Civil Engineering:TA164 - Bioengineering",101,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5001-5009 - Anglican Communion (General)",100,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D410-475 - 20th century:D461-475 - Eastern question",100,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL747-805 - 1718-1818",100,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT547-547.9 - Niger",100,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean:GC300-376 - Tides",100,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1195-1198.995 - Wrestling",100,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ998-999 - Illegitimacy.  Unmarried mothers",100,"J - Political Science:JC - Political Theory:JC345-347 - Symbolism",100,"J - Political Science:JS - Local & Municipal Government:JS2101-2143 - Mexico",100,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6121-6129 - Orations",100,"R - Medicine:RM - Therapeutics, Pharmacology:RM283-298 - Endocrinotherapy.  Organotherapy",100,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL269-291 - Local history and description:DL291 - Other cities, towns, etc., A-Z",99,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR238-240.5 - Early and medieval to 1601.  Roman period",99,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR421-429.4 - Description and travel",99,"D - World History:DT - Africa:DT43-154 - Egypt:DT56.8-69.5 - Antiquities:DT63-63.5 - Pyramids",99,"H - Social Sciences:HG - Finance:HG4301-4480.9 - Trust services.  Trust companies",99,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3661-3674 - Public safety",99,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS185-231 - By period:PS185-195 - 17th-18th centuries",99,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS430-439 - Wit and humor.  Satire",99,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1003.8-Z1004 - Biography of bibliographers",99,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ1058-1058.5 - Widows and widowers.  Widowhood",98,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KES - Saskatchewan",98,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN8601-9199 - North Dakota",98,"K - Law:KJ-KKZ - Europe:KKS - San Marino",98,"K - Law:KQ-KTZ - Africa:KRX - Ghana",98,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH1001-1079 - Permic",98,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT881-951 - Folk literature:PT923-937 - Faust legend",98,"R - Medicine:R - Medicine (General):R864 - Medical records",98,"R - Medicine:RD - Surgery:RD63-76 - Operating rooms and theaters.  Instruments, apparatus, and appliances",98,"R - Medicine:RM - Therapeutics, Pharmacology:RM930-931 - Rehabilitation therapy",98,"T - Technology:TP - Chemical Technology:TP700-746 - Illuminating industries (Nonelectric)",98,"A - General:AP - Periodicals:AP101-115 - Humorous periodicals",97,"B - Philosophy, Psychology, Religion:BF - Psychology:BF889-905 - Graphology.  Study of handwriting",97,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5194-5195 - Cathedrals, churches, etc. in England and Wales",97,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF701-720 - General",97,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL643-651 - General",97,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP645-669 - 1816-1908",97,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR279-296 - Local history and description:DR296 - Other cities, towns, etc., A-Z",97,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ2340-2399 - Libyco-Berber languages.  Berber languages:PJ2369-2399 - Berber languages",97,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF780.2-780.7 - Veterinary microbiology, bacteriology, virology, mycology",97,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1620-1625 - Assyro-Babylonian",96,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL250-263.3 - 20th century",96,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL576-596 - Local history and description",96,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC96-97.8 - Estuarine oceanography",96,"K - Law:KZ - Law of nations:KZ1287-1296 - Codification of the law of nations",96,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB2165-2278 - Teacher training in universities and colleges",96,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2335.95-2337 - Endowments, trusts, etc.",96,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3501-3509 - Non-Aryan languages of India and Southeastern Asia in general",96,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS680-689 - Essays",96,"R - Medicine:RL - Dermatology:RL201-331 - Hyperemias, inflammations, and infections of the skin",96,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB950-990.5 - Pest control and treatment of diseases.  Plant protection:SB979.5-985 - Inspection.  Quarantine",96,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD125-174.6 - Early and medieval to 1519:DD126-155 - Medieval Empire, 481-1273:DD127-135 - 481-918.  Merovingians.  Carolingians",95,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP632-644.9 - 1640-1816.  House of Braganza",95,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1227-1231 - Antiquities.  Social life and customs.  Ethnography",95,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU300-330 - South Australia",95,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC215-238.4 - Community and the school:LC237-238.4 - College-university and the community",95,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF5971-5999 - Slang.  Argot, etc.",95,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3310-3319 - 18th century:PG3312 - Derzhavin",95,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7326-7338 - Individual authors or works before 1540",95,"R - Medicine:RJ - Pediatrics:RJ59-60 - Infant and neonatal morbidity and mortality",95,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE175-176.5 - Highway design.  Interchanges and intersections",95,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL160-183.9 - Early and medieval to 1523",94,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT211-239 - Libya:DT238-239 - Local history and description",94,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS642-659.5 - Prose (General):PS651-659.2 - By period",94,"R - Medicine:RD - Surgery:RD137-145 - Surgery in childhood, adolescence, pregnancy, old age",94,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL430 - Origins of religion",93,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP170 - Works in defense of Islam.  Islamic apologetics:BP170.3-170.5 - Missionary work of Islam",93,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS825-1013 - Modern texts and versions",93,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ180-182 - Anglo-Dutch wars, 1652-1667",93,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR95-98 - Local history and description:DR98 - Other cities, towns, etc., A-Z",93,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean:GC229-296.8 - Currents",93,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF51 - Environmental influences on humans",93,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes:HS1501-1510 - Benevolent and \"friendly\" societies and\tmutual assessment fraternities",93,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV6091-6124 - Emigration",93,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2198-2199 - Popular religious and devotional music",93,"P - Language & Literature:PN - Literature (General):PN4001-4355 - Oratory.  Elocution, etc.:PN4071-4095 - Study and teaching",93,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG730-735 - Air defenses",93,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ20.5-26 - Description and travel",92,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT561-581 - Cameroon (Cameroun, Kamerun):DT570-571 - Ethnography",92,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC190-190.5 - Ocean-atmosphere interaction",92,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ806 - Adultery",92,"J - Political Science:JN - Political Institutions (Europe):JN7101-7367 - Denmark",92,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT1-4897 - German literature:PT1100-1479 - Collections:PT1371-1374 - Early to 1950.  Old and Middle High German",92,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5555-5595 - Medieval",92,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT9000-9094 - Landsmaal or New Norwegian",92,"R - Medicine:RZ - Other Systems of Medicine:RZ409.7-999 - Miscellaneous systems and treatments",92,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5035-5065 - Hymns.  Chants.  Recitations",91,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV652-652.9 - Church management.  Efficiency",91,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF765-787 - Military, naval, and political history.  Foreign relations",91,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK61-77 - Local history and description",91,"D - World History:DU - Oceania (South Seas):DU510 - Polynesia (General)",91,"D - World History:DU - Oceania (South Seas):DU520-950 - Smaller island groups:DU810-819 - Samoan Islands",91,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU200-230 - Victoria:DU228-230 - Local history and description",91,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E337.8-340 - General:E310-337 - 1789-1809.  Constitutional period",91,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E337.8-340 - General:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809",91,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1115-1193 - Canada",91,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC6501-6560.4 - Lyceums and lecture courses.  Forums",91,"N - Fine Arts:NK - Decorative Arts:NK1135-1149.5 - Arts and crafts movement",91,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6101-6119 - Avestan",91,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4501-4587 - Munda languages (Kolarian languages)",91,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM8001-8995 - Artificial languages--Universal languages:PM8201-8298 - Esperanto",91,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF232.5-233.8 - Macedonian epoch.  Age of Philip.  359-336 B.C.",90,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF741-748 - Social life and customs.  Ethnography",90,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5484-5495 - Warehouses.  Storage",90,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8031-8080 - Police duty.  Methods of protection:HV8035-8069 - Special classes of crimes, offenses and criminals",90,"J - Political Science:JC - Political Theory:JC329 - Patriotism",90,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP2101-2612 - Constitution of the state. Constitutional law",90,"U - Military Science:UB - Military administration:UB180-197 - Civilian personnel departments",90,"U - Military Science:UC - Maintenance & Transportation:UC700-780 - Subsistence",90,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB932.95-945 - 1792-1918.  19th century:DB934.5-939.5 - Revolution of 1848-1849",89,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL201-249 - 1808-1906.  19th century",89,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR89.9-93.34 - 1944-1990",89,"H - Social Sciences:HM - Sociology:HM435-477 - History of sociology.  History of sociological theory:HM461-473 - Schools of sociology.  Schools of social thought",89,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV6001-6006 - Periodicals.  Serials",89,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4600-4610 - Relation to other religious and philosophical systems",88,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC200-260 - Bells.  Campanology.  Cowbells",88,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL660-700.9 - Early and medieval to 1523.  Union of Kalmar, 1397",88,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR11.5-16 - Description and travel",88,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3745-3747 - Children of immigrants (First generation)",88,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3880-3915 - Criticism",88,"P - Language & Literature:PC - Romance Languages:PC2001-3761 - French:PC3721-3761 - Slang.  Argot",88,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1301-1333 - Epic poetry",88,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z265-265.5 - Representation or reproduction of books, documents, etc., by photography, microphotography, or other means",88,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5210-5395 - Episcopal Church in Scotland",87,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E711-738 - McKinley's first administration, 1897-1901:E713 - Annexation in 1898 of Hawaii, the Philippines, and Puerto Rico",87,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA110-115 - Projection",87,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ2042-2044 - Life style",87,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT201-221 - City population",87,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K2390 - Negotiated settlement.  Compromise",87,"K - Law:KD-KDK - The United Kingdom and Ireland:KDE - Northern Ireland",87,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMJ - Iraq",87,"K - Law:KZA - Law of the Sea:KZA1118-1122 - Treaties and other international agreements",87,"M - Music:ML - Literature on music:ML29-31 - Special collections",87,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2896-2899 - Romani",87,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7500-7511 - Individual authors or works:PT7500-7501 - 16th-18th centuries",87,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA940-945 - Military communication",87,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG637-639 - Education and training",87,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature:BM497-497.8 - Mishnah",86,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV638-638.8 - The rural church.  The church and country life",86,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL527-537 - 20th century.  Period of World War II, 1939-1945",86,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR73.7-80.8 - Early and medieval",86,"D - World History:DT - Africa:DT1251-1465 - Angola",86,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT401-409 - Somalia.  Somaliland and adjacent territory:DT402.5-407.3 - History",86,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA51-87 - Surveys (General)",86,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training:GV346-351.5 - School and college athletics.  Intramural and interscholastic athletics",86,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1662 - Insurance of deposits.  Deposit insurance",86,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ5514-5526 - Societies, associations, academies, institutes, etc., for peace promotion, research and education",86,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH801-836 - Mari",86,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN4832-4836 - Magazines and other periodicals",86,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6329-6338 - Thoughts",86,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6170-6269 - Collections:PQ6265-6269 - Translations",86,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT9000-9094 - Landsmaal or New Norwegian:PT9064-9094 - Individual authors",86,"R - Medicine:RD - Surgery:RD151-498 - Military and naval surgery",86,"R - Medicine:RE - Ophthalmology:RE80-87 - Eye surgery",86,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1111-1143.2 - Sacred books.  Sources:BL1141.2-1142.6 - Tantric texts",85,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP702-802 - Local history and description:DP702 - Provinces, regions, etc., A-Z",85,"D - World History:DS - Asia:DS201-248 - Arabian Peninsula.  Saudi Arabia:DS218-219 - Ethnography",85,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT541-541.9 - Benin.  Dahomey",85,"J - Political Science:JN - Political Institutions (Europe):JN6630-6639 - Ukraine",85,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K805-821 - Succession upon death",85,"K - Law:KQ-KTZ - Africa:KSN - Liberia",85,"M - Music:M - Music:M1490 - Music printed or copied in manuscript before 1700",85,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3310-3319 - 18th century:PG3314 - Karamzin",85,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7601-7869 - Literary history and criticism:PT7721-7762 - Special periods",85,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM654-655.6 - The tabernacle.  The temple",84,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV652.95-657 - Mass media and telecommunication in religion",84,"C - Historical Sciences (Archaeology, Genealogy):C - Auxiliary Sciences of History (General)",84,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR70-73 - Military and political history.  Foreign relations",84,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E855-861 - Nixon's administrations, 1969-August 9, 1974:E860-861 - Watergate Affair.  Resignation",84,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC150-182 - Physical oceanography",84,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN3601-4199 - New Mexico",84,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFN601-1199 - Nevada",84,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVC - Other Pacific area jurisdictions",84,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2667-2698 - Latin Americans.  Hispanic Americans:LC2680-2688 - Mexican Americans.  Mexicans in the United States",84,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF225-226 - Persian wars, 499-479 B.C.",83,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR954-978.52 - By period",83,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1041-1045 - New Brunswick",83,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ981-996 - Polygamy",83,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements:KZ184-194 - Peace treaties",83,"K - Law:KZA - Law of the Sea:KZA1340-1417 - Concepts and principles",83,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE21-23 - Argentina",83,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3921-3921.8 - Religious aspects of music",83,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC627.5-632 - Metabolic diseases:RC620-627 - Nutritional diseases.  Deficiency diseases",83,"S - Agriculture:SB - Plant Culture:SB129-130 - Harvesting, curing, storage",83,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH213-216.55 - By oceans and seas",83,"T - Technology:TP - Chemical Technology:TP250-261 - Industrial electrochemistry",83,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG590-613.5 - Military telegraphy and telephony",83,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z672-Z672.13 - Library cooperation and coordination",83,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life:BQ5635-5675 - Spiritual life.  Mysticism.  Englightenment.  Perfection",82,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4390-4399 - Personal life of the clergy",82,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492:DG503-529 - 476-1268:DG506-514.7 - 489-774.  Gothic and Lombard kingdoms. Byzantine exarchate, 553-568",82,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH901-925 - Luxembourg",82,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1070-1074.7 - Saskatchewan",82,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean:GC228.5-228.6 - Ocean circulation",82,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K190-195 - Ethnological jurisprudence.  Primitive law",82,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K215-218 - History",82,"N - Fine Arts:ND - Painting:ND1630-1662 - Examination and conservation of paintings",82,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK301-399 - Electric meters",82,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E436-440.5 - Buchanan's administration, 1857-1861:E438 - Slavery question, 1857-1861",81,"G - Geography, Anthropology, Recreation:G - Geography (General):G140 - Great cities of the world",81,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1493-1493.5 - Government owned and operated farms.  State farms.  Sovkhozes",81,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGJ1-999 - General",81,"L - Education:LB - Theory & Practice of Education:LB1705-2286 - Education and training of teachers and administrators:LB1771-1773 - Certification of teachers",81,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections:PQ9149-9163 - Poetry",81,"T - Technology:TT - Handicrafts:TT980-999 - Laundry work",81,"V - Naval Science:VG - Minor Services of Navies:VG50-55 - Coast guard and coast signal service",81,"V - Naval Science:VK - Navigation, Merchant Marine:VK600-794 - Tide and current tables",81,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX729.9-755 - Orthodox Church in other regions or countries",80,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA192-197.3 - Collections of maps, globes, etc.  Map libraries",80,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K795-798 - Trusts and trustees",80,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGS1-9000 - Haiti",80,"K - Law:KLA-KLW - Eurasia:KLN - Russian S.F.S.R. (to 1991)",80,"N - Fine Arts:NX - Arts in General:NX420-430 - Exhibitions",80,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6288.5-6298 - Epitaphs",80,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4207-4225 - Poetry:PQ4205-4206 - Translations",80,"S - Agriculture:SB - Plant Culture:SB126 - Artificial light gardening",80,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH334 - Economic aspects.  Finance",80,"T - Technology:TK - Electrical Engineering, Electronics, Nuclear Engineering:TK9900-9971 - Electricity for amateurs.  Amateur constructors' manuals",80,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT93-93.6 - Judaism",79,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX150-159 - Nestorian, Chaldean, or East Syrian Church",79,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF221.2-224 - ca. 1125-500 B.C.  Age of Tyrants",79,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH1-23 - General",79,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH503-527 - General",79,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History:DL52-59 - Military, naval, and political history.  Foreign relations",79,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV1151-1190 - Shooting.  Archery",79,"H - Social Sciences:HD - Industries, Land use, Labor:HD28-70 - Management.  Industrial management:HD50-50.5 - Delegation of authority.  Decentralization. Span of control",79,"L - Education:L - Education (General):L107 - Congresses",79,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA604-618 - Parks, public baths, public carriers, buildings, etc.",79,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL654-659 - Military, naval, and political history.  Foreign relations",78,"J - Political Science:JN - Political Institutions (Europe):JN7401-7695 - Norway",78,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE76-78 - Venezuela",78,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature",78,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8525-8528 - Millennial Dawnists.  Jehovah's Witnesses",77,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK931-939.5 - Turkmenistan.  Turkmen S.S.R.  Turkmenia",77,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E396-400 - Tyler's administration, April 4, 1841-1845",77,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC25-33 - Self-education.  Self-culture",77,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3199-3299 - Collections:PG3211-3219 - Translations",77,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA619-637 - Disposal of the dead.  Undertaking.  Burial.  Cremation. Cemeteries",77,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E686-687.9 - Garfield's administration, March 4-September 19, 1881",76,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC109-149 - Chemical oceanography",76,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC65-78 - Underwater exploration",76,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEN1-599 - New Brunswick",76,"K - Law:KQ-KTZ - Africa:KTQ - Sudan",76,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE27-29 - Bolivia",76,"R - Medicine:R - Medicine (General):R711-713.97 - Directories",76,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB617-618 - Poisonous plants",76,"U - Military Science:U - Military Science (General):U310-310.2 - War games",76,"H - Social Sciences:HE - Transportation & Communications:HE9719-9721 - Artificial satellite telecommunications",75,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3280-3282 - Church and state",75,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7260-7338 - Obligations",75,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE41-43 - Colombia",75,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4901-5047 - Switzerland",75,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6455-6460 - Firdaws",75,"S - Agriculture:SK - Hunting Sports:SK281-293 - Special methods and types of hunting",75,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG700-705 - Tactics",75,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1801-2195 - Social usages.  Etiquette:BJ2021-2078 - Etiquette of entertaining",74,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM651-652.7 - Priests, rabbis, etc.",74,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX120-129 - Armenian Church",74,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX170-179 - Syrian or Jacobite Church",74,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9701-9743 - Salvation Army",74,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD176-189 - 1519-1648.  Reformation and Counter-reformation:DD181-183 - Peasants' War, 1524-1525",74,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT561-581 - Cameroon (Cameroun, Kamerun):DT572-578.4 - History",74,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU392-398 - Northern Territory of Australia",74,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1090 - Rocky Mountains of Canada",74,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training:GV450-451.4 - Nudism.  Sunbathing",74,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2351 - Inflation and taxation",74,"K - Law:KHA-KHW - South America:KHP - Paraguay",74,"K - Law:KJ-KKZ - Europe:KKI - Latvia",74,"K - Law:KZA - Law of the Sea:KZA1340-1417 - Concepts and principles:KZA1348-1405 - Mare liberum doctrine",74,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC189-214.53 - Educational sociology:LC212.9-212.93 - Sex differences in education",74,"R - Medicine:RE - Ophthalmology:RE75-79 - Examination.  Diagnosis",74,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD159-168 - Municipal engineering",74,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z695.9-695.94 - Indexing.  Abstracting",74,"B - Philosophy, Psychology, Religion:BS - The Bible:BS701-1830 - Old Testament:BS1091-1099 - Selections.  Quotations",73,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.:DG233-233.9 - Foundations and kings, 753-510",73,"D - World History:DT - Africa:DT2421-2525 - Botswana.  Bechuanaland",73,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E865-868 - Ford's administration, August 9, 1974-1977",73,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV530 - The church and charity",73,"K - Law:KZ - Law of nations:KZ1249-1252 - International law and other disciplines",73,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4539-4607 - Sweden",73,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH701-735 - Sami",73,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ2401-2594 - Cushitic languages",73,"U - Military Science:UH - Other Military Services:UH20-25 - Chaplains",73,"B - Philosophy, Psychology, Religion:BF - Psychology:BF207-209 - Psychotropic drugs and other substances",72,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB51-64 - Early and medieval to 1521",72,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF750-760 - General",72,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ33-41 - Description and travel",72,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR242-249 - 1822-1881.  19th century",72,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA300-325 - World maps, general atlases, etc.",72,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1203-1220.8 - Children's games and amusements:GV1218.5-1220.8 - Toys",72,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1700-1973 - Social legislation:K1861-1929 - Social insurance",72,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP1572-1942 - Courts and procedure",72,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1290-1293 - Human figure",72,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH1101-1109 - Udmurt",72,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1421-1429.5 - Apabhraa",72,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN842 - Jewish literature in various languages",72,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9725-9850 - 19th century:PT9759-9771 - LagerlÃ¶f, Selma",72,"R - Medicine:RF - Otorhinolaryngology:RF341-437 - Rhinology.  Diseases of the nose, accessory sinuses, and nasopharynx",72,"R - Medicine:RG - Gynecology & Obstetrics:RG500-991 - Obstetrics:RG600-650 - The embryo and fetus:RG648 - Spontaneous abortion.  Miscarriage",72,"R - Medicine:RJ - Pediatrics:RJ50-51 - Examination.  Diagnosis",72,"R - Medicine:RK - Dentistry:RK641-667 - Prosthetic dentistry.  Prosthodontics",72,"S - Agriculture:SF - Animal Culture:SF114-121 - Exhibitions",72,"S - Agriculture:SF - Animal Culture:SF191-275 - Cattle:SF250.5-275 - Dairy processing.  Dairy products:SF221-250 - Dairying",72,"V - Naval Science:VK - Navigation, Merchant Marine:VK1300-1491 - Saving of life and property",72,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century:D277-278.5 - Dutch War, 1672-1678",71,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History:DB2080-2247 - By period:DB2242-2247 - 1993-    .  Independent Czech Republic",71,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF27-41 - Geography.  Travel",71,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL807-859 - 1814-1907.  19th century",71,"D - World History:DS - Asia:DS11 - Antiquities",71,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT641-665 - Zaire.  Congo (Democratic Republic).  Belgian Congo:DT665 - Local history and description",71,"E-F - History of the Americas:F1-975 - United States - Regional:F396 - Old Southwest.  Lower Mississippi Valley",71,"H - Social Sciences:HG - Finance:HG4001-4285 - Finance management.  Business finance. Corporation finance:HG3810-4000 - Foreign exchange.  International finance.",71,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2336-2337 - Tax exemption",71,"J - Political Science:JN - Political Institutions (Europe):JN7011-7066 - Scandinavia.  Northern Europe",71,"K - Law:KQ-KTZ - Africa:KSW - Morocco",71,"M - Music:MT - Instruction and study:MT918-948 - School music",71,"N - Fine Arts:NB - Sculpture:NB1160-1195 - Designs and technique",71,"P - Language & Literature:P - Philology & Linguistics:P99.5-99.6 - Nonverbal communication",71,"P - Language & Literature:PH - Uralic & Basque Languages:PH1201-1409 - Ugric languages",71,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK3591-4485 - Sanskrit:PK3801-4251 - Special subjects",71,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6130-6140 - Letters",71,"T - Technology:TC - Hydraulic engineering:TC183-201 - General preliminary operations.  Dredging.  Submarine building",71,"T - Technology:TX - Home Economics:TX955-985 - Building operation and housekeeping",71,"B - Philosophy, Psychology, Religion:BM - Judaism:BM646 - Heresy, heresies",70,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5150-5182.5 - Government.  Organization.  Discipline:BX5148-5149 - Sacraments",70,"H - Social Sciences:HM - Sociology:HM701 - Social systems",70,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ74-74.2 - Bisexuality",70,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3161 - Constitutional history",70,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3289-3367 - Organs of government:K3367 - The judiciary",70,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMH - Iran",70,"K - Law:KQ-KTZ - Africa:KTX - Zaire",70,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6135-6199.9 - Middle Iranian languages",70,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN5650 - The Jewish press",70,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS580-619 - Poetry:PS593 - By form",70,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS660-668.2 - Oratory:PS666-668.2 - By period",70,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9201-9499 - Literary history and criticism:PT9320-9370 - Special periods",70,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z49-51.5 - Typewriters.  Typewriting.  Keyboards.  Keyboarding",70,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK61-77 - Local history and description:DJK61-66 - Black Sea region",69,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR485-555.7 - 1281/1453-1789.  Fall of Constantinople, 1453:DR511-529 - 1566-1640.  Period of decline",69,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E386-390 - Van Buren's administration, 1837-1841",69,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2151 - French West Indies",69,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform:HN41-46 - Community centers.  Social centers",69,"K - Law:KF-KFZ - The United States:KFA-KFW - Individual States:KFW4201-4799 - Wyoming",69,"Q - Science:QL - Zoology:QL799-799.5 - Morphology",69,"R - Medicine:RM - Therapeutics, Pharmacology:RM671-671.5 - Nonprescription drugs.  Patent medicines",69,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG546-549 - 1792-1815.  Napoleonic period",68,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL154-159.5 - Military, naval, and political history.  Foreign relations",68,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1660 - Bank accounts.  Bank deposits.  Deposit banking",68,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ3801-3844 - Revenue from sources other than taxation",68,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ447 - Masturbation",68,"K - Law:KHA-KHW - South America:KHN - Guyana",68,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3820 - Physiological aspects of music",68,"M - Music:MT - Instruction and study:MT918-948 - School music:MT930-948 - Elementary schools. Junior high schools. High schools",68,"N - Fine Arts:NB - Sculpture:NB1135-1150 - General works",68,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5401-5809 - Syriac:PJ5601-5695 - Literature",68,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4051-4054 - Karen languages",68,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5882-5882.36 - 2001-",68,"R - Medicine:R - Medicine (General):R702-703 - Medicine and the humanities.  Medicine and disease in relation to history, literature, etc.",68,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1781-1788 - Catholic Church and other churches",67,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D299-475 - 1789-:D351-400 - 19th century.  1801-1914/1920:D383 - 1815-1830.  Congress of Vienna",67,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR93.4-93.47 - 1990-",67,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR954-978.52 - By period:DR969.8-978.52 - 20th century",67,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E761-765 - Taft's administration, 1909-1913",67,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT5220-5286 - Customs relative to transportation and travel",67,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization:JV412-461 - Administration",67,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMP - Lebanon",67,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4301-4470 - Mon-Khmer (Mon-Anam) languages:PL4423-4470 - Bru, Chrau, Khasi, Muong, etc.",67,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4227-4245 - Drama",67,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7298-7309 - Religious works",67,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH344-344.8 - Methods and gear.  Catching of fish",67,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ940-940.5 - Vacuum technology",67,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG470-474 - Military surveying, topography, and  mapping",67,"V - Naval Science:V - Naval Science (General):V160-165 - Strategy",67,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL221 - Monotheism",66,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL70-71 - Sacred books (General)",66,"D - World History:DS - Asia:DS251-326 - Iran (Persia):DS268-269 - Ethnography",66,"D - World History:DT - Africa:DT1251-1465 - Angola:DT1314-1436 - History",66,"J - Political Science:JS - Local & Municipal Government:JS141-163 - Executive branch.  Mayor",66,"K - Law:KQ-KTZ - Africa:KSP - Libya",66,"K - Law:KZ - Law of nations:KZ24-38 - Societies, etc.:KZ27-37 - National",66,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1035-1035.8 - Basic education.  Basic skills education",66,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF14-1257 - Great Britain:LF800-957 - Ireland",66,"N - Fine Arts:NE - Print Media:NE2236-2240.6 - Serigraphy",66,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6141-6144 - Criticism, interpretation, etc.",66,"P - Language & Literature:PN - Literature (General):PN4500 - Essays (Literary history)",66,"R - Medicine:RL - Dermatology:RL87-94 - Care and hygiene",66,"T - Technology:TR - Photography:TR510-545 - Color photography",66,"U - Military Science:U - Military Science (General):U168 - Logistics",66,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature:BM498-498.8 - Palestinian Talmud",65,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF895-951 - Local history and description:DF951 - Other cities, towns, etc., A-Z",65,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT507 - Ashanti Empire",65,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1545-1549 - Mexico",65,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB471-478.995 - Islands",65,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV191.68-198.975 - Camping",65,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3289-3367 - Organs of government:K3310-3329 - The legislature",65,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3700-3705 - Control of social activities",65,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMT - Saudi Arabia",65,"K - Law:KQ-KTZ - Africa:KTY1-490 - Zambia",65,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6141-6145 - Essays",65,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1110 - Special classes of authors",65,"R - Medicine:RK - Dentistry:RK529-535 - Oral surgery",65,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV637-637.5 - City churches",64,"D - World History:DA-DR - Europe:DAW - Central Europe:DAW1001-1028 - General",64,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4600-4800 - Local history and description:DK4610-4645 - Warsaw (Warszawa)",64,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1232-1249 - General",64,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT391-398 - Eritrea",64,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT543-543.9 - Guinea",64,"G - Geography, Anthropology, Recreation:G - Geography (General):G141 - Historical geography",64,"J - Political Science:JZ - International relations:JZ1305-2060 - Scope of international relations. Political theory. Diplomacy:JZ1329.5-1395 - By period",64,"K - Law:KJ-KKZ - Europe:KKK1-499 - Luxembourg",64,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6066-6069 - Special classes of authors",64,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH388.7-391.5 - Algae culture",64,"V - Naval Science:V - Naval Science (General):V390-395 - Naval research",64,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX650-659 - Bulgarian Church",63,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF230.9-231.9 - Spartan and Theban supremacies, 404-362 B.C.",63,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG241-253 - Conquest of Mediterranean world.  264-133",63,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL415-419.2 - Description and travel",63,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV4961-4995 - Degeneration",63,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K109-110 - Law societies.  International bar associations",63,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1054-1065.5 - Negotiable instruments",63,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1241-1287 - Insurance",63,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB162-250 - Legal systems compared",63,"K - Law:KQ-KTZ - Africa:KQG - Algeria",63,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH751-785 - Mordvin",63,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5401-5809 - Syriac:PJ5414-5495 - Language",63,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6348.5-6358 - Emblems, devices",63,"R - Medicine:RE - Ophthalmology:RE939.2-981 - Optometry.  Opticians.  Eyeglasses",63,"R - Medicine:RF - Otorhinolaryngology:RF460-547 - Laryngology.  Diseases of the throat",63,"T - Technology:TA - Engineering (General), Civil Engineering:TA2001-2040 - Plasma engineering.  Applied plasma dynamics",63,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE200-205 - Materials for roadmaking",63,"U - Military Science:UH - Other Military Services:UH520-560 - Care of sick and wounded.  Relief societies",63,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ12-93 - Societies, councils, associations, clubs, etc.",62,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL193-199.8 - 1670-1808",62,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ78-110 - Early and medieval to 1516",62,"D - World History:DT - Africa:DT1501-1685 - Namibia.  South-West Africa:DT1564-1651 - History",62,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1091-1095.5 - Yukon",62,"J - Political Science:JN - Political Institutions (Europe):JN5001-5191 - Greece",62,"K - Law:KJ-KKZ - Europe:KKK1001-1499 - Malta",62,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9061-9081 - Poetry",62,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9674-9715 - 16th-18th centuries",62,"T - Technology:TT - Handicrafts:TT161-170.7 - Manual training.  School shops",62,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4872-4924 - Pre-Reformation:BX4900-4906 - Lollards.  Wycliffites",61,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan:DT43-154 - Egypt",61,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan:DT43-154 - Egypt:DT115-154 - Local history and description",61,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.4-546.49 - Chad (Tchad)",61,"D - World History:DU - Oceania (South Seas):DU500 - Micronesia (General)",61,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU200-230 - Victoria:DU220-222 - History",61,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1630-1640 - Bermudas",61,"H - Social Sciences:HF - Commerce:HF1014 - Balance of trade",61,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6465 - fi",61,"Q - Science:QD - Chemistry:QD450-801 - Physical and theoretical chemistry:QD625-655 - Radiation chemistry",61,"R - Medicine:RK - Dentistry:RK520-528 - Orthodontics",61,"B - Philosophy, Psychology, Religion:BF - Psychology:BF203 - Gestalt psychology",60,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX690-699 - Romanian Church",60,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK500 - Regions not limited to one Republic, A-Z",60,"D - World History:DT - Africa:DT3031-3145 - Zambia.  Northern Rhodesia",60,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E371-375 - Monroe's administrations, 1817-1825",60,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV711 - Coaching",60,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2329 - Industrialization",60,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7428 - Social work with delinquents and criminals",60,"J - Political Science:JX - International Law (obsolete classification):JX1261-1283 - Codification of international law",60,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMM501-994 - West Bank (Territory under Israeli occupation, 1967-    )",60,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPC - Democratic People's Republic of Korea.  North Korea",60,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1030 - Communist education",60,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF3911-4067 - Belgium",60,"N - Fine Arts:NK - Decorative Arts:NK3375-3496.3 - Wallpapers",60,"P - Language & Literature:PC - Romance Languages:PC1981-1984 - Sardinian",60,"R - Medicine:RL - Dermatology:RL130-169 - Diseases of the glands, hair, nails",60,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG760-765 - Aerial reconnaissance",60,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z237 - Paper.  Watermarks, etc.",60,"B - Philosophy, Psychology, Religion:BM - Judaism:BM648 - Apologetics",59,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5070-5075 - Altar, liturgical objects, ornaments, memorials, etc.",59,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6480-6490 - Individual Baptist churches",59,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7801-7843 - German Baptist Brethren.  Church of the Brethren. Dunkards",59,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ4801-5450 - Tokens",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-:DB80-99.2 - 19th-20th centuries",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-:DB80-99.2 - 19th-20th centuries:DB65-99.2 - 1521-",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-:DB80-99.2 - 19th-20th centuries:DB65-99.2 - 1521-:DB51-99.2 - By period",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-:DB80-99.2 - 19th-20th centuries:DB65-99.2 - 1521-:DB51-99.2 - By period:DB35-99.2 - History",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB96-99.2 - Republic, 1918-:DB80-99.2 - 19th-20th centuries:DB65-99.2 - 1521-:DB51-99.2 - By period:DB35-99.2 - History:DB99-99.1 - 1938-1955.  German annexation. Allied occupation",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2044-2247 - History:DB2080-2247 - By period:DB2080-2133 - Early and medieval to 1526",59,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB932.95-945 - 1792-1918.  19th century:DB940-945 - 1849-1918",59,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1250-1258 - Military, naval, and political history.  Foreign relations",59,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT582-582.9 - Togo.  Togoland",59,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1121-1139 - Newfoundland and Labrador:F1135-1139 - Labrador",59,"H - Social Sciences:HE - Transportation & Communications:HE5880-5990 - Express service",59,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3566-3578 - Public health",59,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons:K7125-7140 - Natural persons",59,"K - Law:KWX - Antarctica",59,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1031-1034.5 - Competency based education",59,"M - Music:MT - Instruction and study:MT75 - Interpretation",59,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6135-6199.9 - Middle Iranian languages:PK6141-6199.5 - Pahlavi",59,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8100-8167 - 19th century:PT8145-8157 - OehlenschlÃ¤ger, Adam Gottlob",59,"V - Naval Science:VK - Navigation, Merchant Marine:VK588-597 - Marine hydrography.  Hydrographic surveying",59,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1300-1380 - Jainism:BL1315-1317 - Jain literature",58,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV800-873 - Sacraments.  Ordinances:BV840-850 - Penance",58,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6330-6331.2 - Doctrine",58,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD121-124 - Earliest to 481",58,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP702-802 - Local history and description:DP752-776 - Lisbon",58,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT271-299 - Algeria:DT283-283.6 - Ethnography",58,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E742.5 - Collected works of American statesmen",58,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR890-915 - Occupations",58,"H - Social Sciences:HE - Transportation & Communications:HE323-328 - Transportation geography.  Trade routes",58,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8059 - Business insurance",58,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3184-3188 - Form and structure of government",58,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM639-1424 - Dinei mamonot",58,"L - Education:LC - Special Aspects of Education:LC5161-5163 - Fundamental education",58,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC241-245 - Foundations, endowments, funds",58,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving:NE1850-1879 - Color prints",58,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF4501-4596 - Early Modern German",58,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2461-2479 - Marwari",58,"R - Medicine:RJ - Pediatrics:RJ240 - Immunization of children (General)",58,"V - Naval Science:VC - Naval Maintenance:VC260-268 - Supplies and stores",58,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP100-157 - Sacred books:BP137-137.5 - Koranic and other Islamic legends",57,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ133 - Terminology",57,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB946-958.6 - 20th century:DB957.9-958.6 - 1989-",57,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH585-619 - 1555-1794.  Spanish and Austrian rule",57,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL160-183.9 - Early and medieval to 1523:DL162-173.8 - 750-1241.  Norwegian rule, 1042-1047",57,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT301-330 - Morocco:DT313-313.6 - Ethnography",57,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa:DT613-613.9 - Guinea-Bissau.  Portuguese Guinea",57,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT669-671 - Islands",57,"E-F - History of the Americas:F1-975 - United States - Regional:F296-301 - Gulf States.  West Florida",57,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1650-1660 - Bahamas",57,"J - Political Science:JF - Political Institutions (General):JF20-1177 - General.  Comparative government:JF225-619 - Organs and functions of government:JF331-341 - Parliamentary government",57,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4720-4780 - National defense.  Military law",57,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGT1-499 - Jamaica",57,"K - Law:KQ-KTZ - Africa:KRP - Ethiopia",57,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ8991-9348 - Ethiopian languages:PJ9001-9101 - Ethiopic (Geez)",57,"S - Agriculture:SD - Forestry:SD390-390.43 - Forest soils",57,"V - Naval Science:VB - Naval Administration:VB310-315 - Officers",57,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL465-470 - Worship of human beings",56,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL660 - Indo-European.  Aryan",56,"B - Philosophy, Psychology, Religion:BM - Judaism:BM590-591 - Jewish works against Christianity and Islam",56,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5137-5139 - Creeds and catechisms, etc.:BX5135-5136 - Controversial works",56,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC300-350 - Crosses",56,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP521-526.5 - Description and travel",56,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT554-554.9 - Mauritania",56,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E784-805 - 1919-1933.  Harding-Coolidge-Hoover era.  \"The twenties\":E791-796 - Coolidge's administration, August 2, 1923-1929",56,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1090 - Rocky Mountains of Canada:F1090.5 - Arctic regions",56,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3190-3191 - Celestial maps",56,"J - Political Science:JS - Local & Municipal Government:JS55-68 - History",56,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGX1-499 - Trinidad and Tobago",56,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes:KZ6730-6785 - The end of war.  Armistice.  Surrender.  Postliminy",56,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5470-5488 - Poetry",56,"S - Agriculture:SB - Plant Culture:SB126 - Artificial light gardening:SB126.5-126.57 - Hydroponics.  Soilless agriculture",56,"U - Military Science:UB - Military administration:UB275-277 - Psychological warfare.  Propaganda",56,"V - Naval Science:V - Naval Science (General):V210-214.5 - Submarine warfare",56,"V - Naval Science:VG - Minor Services of Navies:VG100-475 - Medical service",56,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ135 - Questions and answers.  Maxims (General)",55,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5600-5740 - Church of England outside of Great Britain:BX5601-5620 - Anglican Church of Canada",55,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB66-69.5 - 1648-1740",55,"D - World History:DS - Asia:DS350-375 - Afghanistan:DS354.5-354.6 - Ethnography",55,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB2601-2798 - Snow.  Snow surveys",55,"K - Law:KJ-KKZ - Europe:KKJ1-499 - Liechtenstein",55,"K - Law:KQ-KTZ - Africa:KQK - Botswana",55,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2335.86-2335.885 - Trade unions",55,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK2901-5471 - Indo-Aryan literature:PK3591-4485 - Sanskrit:PK4471-4485 - Translations",55,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4070-4074 - Miao-Yao languages",55,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8650-8733 - Collections",55,"T - Technology:TN - Mining Engineering, Metallurgy:TN331-347 - Mine transportation, haulage and hoisting.  Mining machinery",55,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5700-5720 - Festivals.  Days and seasons",54,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1502-1645 - Croatia:DR1620-1630.5 - Dalmatia",54,"D - World History:DT - Africa:DT3291-3415 - Mozambique",54,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1380-1383 - Animals.  Birds",54,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5211-5219.5 - Biblical (Chaldaic)",54,"P - Language & Literature:PN - Literature (General):PN4400 - Letters (Literary history)",54,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5400-5409 - General",54,"R - Medicine:RX - Homeopathy:RX601-675 - Materia medica and therapeutics",54,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature:BM508-508.5 - Tosefta",53,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5115-5126 - Special parties and movements",53,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB974.9-999 - Local history and description:DB974.9-975 - Counties, regions, etc.",53,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF599.8-649 - 1057-1453:DF610-629 - 1204-1261.  Latin Empire",53,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL269-291 - Local history and description:DL276 - Copenhagen",53,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ111-123 - 1516-1798",53,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR95-98 - Local history and description:DR95 - Provinces, regions, etc., A-Z",53,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU250-280 - Queensland:DU278-280 - Local history and description",53,"E-F - History of the Americas:F1-975 - United States - Regional:F598 - Missouri River and Valley",53,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes:KZ6427-6437 - Warfare on land",53,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1341-1349 - Letters",53,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature:PT7090-7099 - Collections",53,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB442.8-443.4 - Marketing.  Cut flower industry.  Florists",53,"S - Agriculture:SD - Forestry:SD390.5-390.7 - Forest meteorology.  Forest microclimatology",53,"S - Agriculture:SF - Animal Culture:SF91 - Housing and environmental control",53,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH327.5-327.7 - Fishery resources.  Fishery conservation",53,"U - Military Science:UF - Artillery:UF820-830 - Ballistics.  Velocities and motions of projectiles",53,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1615-1617 - Liberalism",52,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA777-790 - Early and medieval to 1603:DA783.2-783.45 - War of Independence, 1285-1371",52,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ78-110 - Early and medieval to 1516:DQ88-110 - 1291-1516.  Federation and independence",52,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR701-741 - Local history and description (European Turkey):DR741 - Other cities, towns, etc., A-Z",52,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1478 - Sharecropping",52,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2337-2339 - Sweatshops",52,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1100-1109 - Secured transactions",52,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K623-968 - Civil law:K830-968 - Obligations:K920 - Restitution.  Quasi contracts.  Unjust enrichment",52,"K - Law:KQ-KTZ - Africa:KSS - Malawi",52,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4170-8480 - Classed by use:NA7910-8125 - Clubhouses, guild houses, etc.",52,"U - Military Science:U - Military Science (General):U262 - Commando tactics",52,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life:BQ5485-5530 - Precepts for laymen",51,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG241-253 - Conquest of Mediterranean world.  264-133:DG250-253 - Wars in the East and in the West. 200-133",51,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL721-743 - ZweibrÃ¼cken dynasty, 1654-1718:DL733-743 - Northern War, 1700-1721",51,"D - World History:DT - Africa:DT160-177 - North Africa:DT167-176 - History:DT168-169.5 - Carthaginian period",51,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809:E336-336.5 - Neutral trade and its restrictions, 1800-1810",51,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E696-700 - Cleveland's first administration, 1885-1889",51,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1656 - Bank reserves.  Bank liquidity.  Loan loss reserves",51,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1709 - Data processing",51,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ6010-6060 - Pacific settlement of international disputes:JZ5587-6009 - International security.  Disarmament.  Global survival",51,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG7900-7925 - Lechitic dialects",51,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ8991-9348 - Ethiopian languages:PJ9201-9269 - Amharic",51,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6001-6056 - General:PQ6056 - Moorish-Spanish literature",51,"U - Military Science:UF - Artillery:UF400-405 - Field artillery",51,"V - Naval Science:VK - Navigation, Merchant Marine:VK573-587 - Nautical instruments",51,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z702 - Thefts and losses of books and other library materials",51,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6333 - Sermons.  Tracts",50,"D - World History:DA-DR - Europe:DA - Great Britain:DA750-890 - Scotland:DA757.9-826 - History:DA774.8-826 - By period:DA800-814.5 - 1603-1707/1745:DA807 - The Union, 1707",50,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF545-548 - Military history.  Political history.  Empire and papacy",50,"D - World History:DS - Asia:DS611-649 - Indonesia (Dutch East Indies):DS646.4-646.49 - Celebes.  Sulawesi",50,"D - World History:DS - Asia:DS80-90 - Lebanon (Phenicia):DS80.5-80.55 - Ethnography",50,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.3-546.39 - Central African Republic.  Central African Empire. Ubangi-Shari",50,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT549-549.9 - Senegal:DT549.47-549.83 - History",50,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G2740-2799 - Australasia",50,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1326-1329 - Large holdings",50,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5520-5541 - Office equipment and supplies",50,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3289-3367 - Organs of government:K3332-3363 - Heads of state and the central government",50,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMM1-490 - Jordan",50,"K - Law:KQ-KTZ - Africa:KTD - Rwanda",50,"K - Law:KZA - Law of the Sea:KZA1430-1690 - Maritime boundaries:KZA1630-1664 - Continental shelf",50,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC215-238.4 - Community and the school:LC230-235 - Parent-teacher associations.  Home and school associations",50,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC45-45.8 - Nonformal education",50,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1370-1375 - Marine painting",50,"P - Language & Literature:PE - English Languages:PE814-896 - Early Modern English",50,"R - Medicine:RC - Internal Medicine:RC581-951 - Specialties of internal medicine:RC924-924.5 - Diseases of the connective tissues",50,"T - Technology:TS - Manufactures:TS2220-2283 - Tobacco industry",50,"V - Naval Science:VK - Navigation, Merchant Marine:VK381-397 - Signaling",50,"B - Philosophy, Psychology, Religion:BS - The Bible:BS410-680 - Works about the Bible:BS670-672 - Bible and social sciences",49,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX610-620 - Church of Greece",49,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX841 - Dictionaries.  Encyclopedias",49,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D284-297 - 1715-1789.  18th century:D291-294 - War of Austrian Succession, 1740-1748",49,"D - World History:DT - Africa:DT1001-1190 - Southern Africa:DT1054-1058 - Ethnography",49,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT436-449 - Tanzania.  Tanganyika.  German East Africa:DT443-443.3 - Ethnography",49,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E321-330 - John Adams' administration, 1797-1801:E323 - Troubles with France, 1796-1800",49,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G4390-4392 - Caribbean area",49,"J - Political Science:JS - Local & Municipal Government:JS8001-8490.9 - Australia.  New Zealand.  Pacific Ocean islands",49,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3169 - The state",49,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPH1-4990 - States of East and West Malaysia (1957-    ) (Part 2)",49,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4071-4197 - Netherlands",49,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language:PJ6950-7144 - South Arabian",49,"P - Language & Literature:PN - Literature (General):PN1560-1590 - The performing arts.  Show business:PN1585-1589 - Centers for the performing arts",49,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN3175-3191 - College and school theatricals",49,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6348.5-6358 - Emblems, devices:PN6340-6348 - Toasts",49,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature:PT7598-7599 - Individual authors or works",49,"R - Medicine:RK - Dentistry:RK58-59.3 - Practice of dentistry.  Dental economics",49,"R - Medicine:RZ - Other Systems of Medicine:RZ201-275 - Chiropractic",49,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z690 - Exchanges",49,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT198-590 - Christology:BT587 - Relics",48,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA909-965 - History:DA930-965 - By period:DA949.5 - The Union, 1800",48,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF895-951 - Local history and description:DF915-936 - Athens",48,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU250-280 - Queensland:DU270-272 - History",48,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2141 - Netherlands West Indies.  Dutch West Indies",48,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons:K7155-7197 - Domestic relations.  Family law",48,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7260-7338 - Obligations:K7265-7305 - Contracts",48,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law:K7350-7444 - Commercial contracts",48,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL1001-1499 - Barbados",48,"K - Law:KJ-KKZ - Europe:KJS - Estonia",48,"K - Law:KJ-KKZ - Europe:KKJ501-9890 - Lithuania",48,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMN - Kuwait",48,"K - Law:KQ-KTZ - Africa:KSV1-490 - Mauritius",48,"M - Music:MT - Instruction and study:MT88 - Administration and instruction of vocal groups",48,"M - Music:MT - Instruction and study:MT9-15 - Printed pedagogical aids",48,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4101-4197 - West and North Semitic languages:PJ4171-4197 - Phoenician-Punic",48,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL5001-7511 - Languages of Oceania:PL5001-7101 - Austronesian, Papuan, and Australian languages:PL6145-6167 - Taiwan languages",48,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN821-840 - Germanic literature",48,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA3150-3159 - Information services. Information centers",48,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA3201-3250 - Information superhighway",48,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL115-120 - Description and travel",47,"D - World History:DS - Asia:DS561-589 - Thailand (Siam):DS570.95-586 - History:DS569-570 - Ethnography",47,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1685-1704 - Drafts.  Checks",47,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG335-339 - Counterfeiting",47,"J - Political Science:JZ - International relations:JZ3674-3875 - State territory and its parts",47,"K - Law:KJ-KKZ - Europe:KJN - Cyprus",47,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNF - Afghanistan",47,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4186-4199 - Folk literature",47,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4186-4199 - Folk literature:PQ4001-4199.5 - History and criticism",47,"R - Medicine:RJ - Pediatrics:RJ52-53 - Therapeutics",47,"S - Agriculture:SF - Animal Culture:SF101-103.5 - Brands and branding, and other means of identifying",47,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA5049-5190 - Government information",47,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1395 - Feminist ethics",46,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP169 - Works against Islam and the Koran",46,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX160-169 - St. Thomas Christians.  Malabar Christians.  Mar Thoma Syrian Church",46,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX400-440 - Patriarchates of the East.  Melchites",46,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG500-537.8 - Medieval, 476-1492:DG503-529 - 476-1268:DG515-529 - 774-1268.  Frankish and German emperors",46,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK680-689.5 - Armenia (Republic).  Armenian S.S.R.",46,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1932-2125 - Serbia:DR2106-2124.5 - Belgrade",46,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT551-551.9 - Mali.  Mali Federation.  Sudanese Republic.  French Sudan:DT551.42-551.45 - Ethnography",46,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809:E333 - Purchase of Louisiana, 1803",46,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR650-690 - Geographical topics",46,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8081-8099 - Private detectives.  Detective bureaus",46,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K236 - Universality and non-universality of law",46,"K - Law:KL - History of Law in the Ancient Orient:KL2200-2499 - Babylonia",46,"K - Law:KQ-KTZ - Africa:KQE - Regional organization and integration",46,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG341-345 - Israel.  Palestine",46,"M - Music:MT - Instruction and study:MT80 - Embellishment",46,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF294.2-297 - Horse sports.  Horse shows",46,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6195-6197 - Arminians.  Remonstrants",45,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT555-555.9 - Burkina Faso.  Upper Volta",45,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1330-1331 - Landlord and peasant",45,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG348-353.5 - Paper money",45,"J - Political Science:JS - Local & Municipal Government:JS241-271 - Local government other than municipal",45,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K300-304 - Classification of law.  Typology",45,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM524 - General works",45,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936):KLR1-490 - Kazakhstan",45,"K - Law:KQ-KTZ - Africa:KSL - Lesotho",45,"L - Education:L - Education (General):L101 - Yearbooks",45,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF5051-5627 - Turkey and the Baltic states",45,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN1008.2-1009.5 - Juvenile literature:PN905-1008 - Folk literature",45,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS490 - Juvenile literature (General)",45,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9877-9877.36 - 2001-",45,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB418-418.4 - Container gardening",45,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF911-914.4 - Veterinary surgery:SF914.3-914.4 - Veterinary traumatology.  Veterinary emergencies",45,"T - Technology:T - Technology (General):T55.4-60.8 - Industrial engineering.  Management engineering:T59.7-59.77 - Human engineering in industry.  Man-machine systems",45,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z684-685 - Supplies.  Shelving.  Bookstacks",45,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB21-27.5 - Description and travel",44,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH95-109 - General",44,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL576-596 - Local history and description:DL596 - Other cities, towns, etc., A-Z",44,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU350-380 - Western Australia:DU378-380 - Local history and description",44,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2136 - Virgin Islands of the United States",44,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3195-3197 - Moon",44,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV181.35-181.6 - Recreation leadership.  Administration of recreation services",44,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ12-449 - Sexual life:HQ449 - Emasculation.  Eunuchs, etc.",44,"J - Political Science:JK - Political Institutions (United States):JK9663-9993 - Confederate States of America",44,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K270-274 - Acts and events",44,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3921-3925 - Manufacturing industries",44,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6501 - Nim Ganjav",44,"S - Agriculture:SF - Animal Culture:SF170-180 - Working animals",44,"U - Military Science:UF - Artillery:UF540-545 - Arsenals, magazines, armories, etc.",44,"V - Naval Science:V - Naval Science (General):V167-178 - Tactics",44,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH801-811 - Local history and description:DH802-809.95 - Brussels",43,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4600-4800 - Local history and description:DK4700-4735 - Krakow (Cracow)",43,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR215-269.6 - History:DR238-269.6 - By period:DR241-241.5 - Phanariote regime, 1601-1822",43,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT516-516.9 - Sierra Leone:DT516.5-516.82 - History",43,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR620-640 - Cosmic phenomena, weather lore",43,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG8901-8914 - Government policy.  State supervision",43,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3075-3165 - Sacraments. Administration of sacraments. De sacramentis et administratione",43,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWW - Western Samoa",43,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE36-38 - Chile",43,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG281-285 - Korea",43,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3921-3921.8 - Religious aspects of music:ML3919-3920 - Moral influence of music.  Therapeutic use of music",43,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6319-6328 - Sayings, bon mots, etc.",43,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS451-478 - Folk literature",43,"S - Agriculture:SB - Plant Culture:SB128 - Growth regulators",43,"S - Agriculture:SF - Animal Culture:SF408-408.6 - Zoo animals",43,"T - Technology:TT - Handicrafts:TT174-176 - Articles for children",43,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG570-582 - Military signaling",43,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL425-490 - Religious doctrines (General):BL460 - Sex worship.  Phallicism",42,"B - Philosophy, Psychology, Religion:BM - Judaism:BM650-747 - Practical Judaism:BM653-653.7 - Congregations.  Synagogues",42,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4625-4780 - Moral theology:BV4720-4780 - Precepts of the Church.  Commandments of the Church",42,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ124-191 - 19th century:DQ131-151 - 1789/1798-1815.  Helvetic Republic, 1798-1803",42,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT450.5-450.95 - Burundi",42,"D - World History:DT - Africa:DT43-154 - Egypt:DT56.8-69.5 - Antiquities:DT68-68.8 - Religious antiquities",42,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.2-546.29 - Congo (Brazzaville).  Middle Congo",42,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV200.4-200.56 - Orienteering.  Wilderness survival",42,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG401-421 - Bimetallism",42,"J - Political Science:JN - Political Institutions (Europe):JN6615 - Estonia",42,"J - Political Science:JZ - International relations:JZ63-1153 - Sources",42,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNK - Brunei",42,"K - Law:KQ-KTZ - Africa:KTJ - Sierra Leone",42,"K - Law:KZD - Space Law, Law of Outer Space:KZD3489-4406 - Peaceful uses of outer space",42,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2630-2638 - Asian Americans.  Asians in the United States",42,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1049-1049.8 - Cooperative education",42,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5301-5329.5 - East Aramaic",42,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6540-6546 - SaÊ»dÄ«",42,"P - Language & Literature:PN - Literature (General):PN20-30 - Societies",42,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5517-5547 - Prose",42,"V - Naval Science:VK - Navigation, Merchant Marine:VK321-369.8 - Harbors.  Ports",42,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF239-241 - Roman epoch, 140 B.C.-323/476 A.D.",41,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH585-619 - 1555-1794.  Spanish and Austrian rule:DH611-619 - 1714-1794.  Austrian Netherlands",41,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL576-596 - Local history and description:DL576 - Counties, regions, etc., A-Z",41,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL614.55-619.5 - Description and travel",41,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP201-232.6 - 1808-1886.  19th century:DP204-208 - 1808-1814.  Napoleonic period",41,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E426-430 - Fillmore's administration, July 9, 1850-1853",41,"E-F - History of the Americas:F1-975 - United States - Regional:F970 - Insular possessions of the United States (General)",41,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV743-749 - Athletic and sporting goods, supplies, etc.",41,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV544 - Charity fairs, bazaars, etc.",41,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU4000-4097 - Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",41,"K - Law:KD-KDK - The United Kingdom and Ireland:KDG - Isle of Man.  Channel Islands",41,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936):KLW - Uzbekistan",41,"K - Law:KQ-KTZ - Africa:KTG - Senegal",41,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE218-330 - Engraved portraits.  Self-portraits",41,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6155-6167 - Folk literature",41,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7601-7869 - Literary history and criticism:PT7770-7794 - Poetry",41,"R - Medicine:RE - Ophthalmology:RE925-939 - Refraction and errors of refraction and accommodation",41,"T - Technology:TT - Handicrafts:TT387-410 - Soft home furnishings",41,"U - Military Science:UE - Cavalry, Armor:UE157-302 - Tactics.  Maneuvers.  Drill regulations",41,"V - Naval Science:VB - Naval Administration:VB21-124 - By region or country",41,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z48 - Duplicating processes.  Copying services",41,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1001-1389 - Parapsychology:BF1161-1171 - Telepathy.  Mind reading.  Thought transference",40,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1640-1645 - Syrian.  Palestinian.  Samaritan",40,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2300-2650 - Local history and description of Czech lands:DB2300-2421 - Moravia",40,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB927-932.9 - Early to 1792:DB929.95-931.9 - Elective kings, 1301-1526",40,"D - World History:DA-DR - Europe:DC - France:DC941-947 - Monaco",40,"D - World History:DA-DR - Europe:DG - Italy:DG600-684.72 - Northern Italy:DG600-609 - General",40,"D - World History:DS - Asia:DS92-99 - Syria:DS94.7-94.8 - Ethnography",40,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E681-685 - Hayes' administration, 1877-1881",40,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E766-783 - Wilson's administrations, 1913-1921:E768 - Purchase of Danish West Indies (Virgin Islands), 1917",40,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E784-805 - 1919-1933.  Harding-Coolidge-Hoover era.  \"The twenties\":E785-786 - Harding's administration, 1921-August 2, 1923",40,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1550-1594 - Central America",40,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ5527-5532 - Congresses and conferences",40,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K179 - Addresses, essays, lectures",40,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K48 - Encyclopedias",40,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB7-68 - Periodicals",40,"K - Law:KL - History of Law in the Ancient Orient:KL2200-2499 - Babylonia:KL700-2215 - Mesopotamia.  Assyro-Babylonian law",40,"K - Law:KQ-KTZ - Africa:KRU - Gabon",40,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2190-2196 - Sacred vocal music for children",40,"N - Fine Arts:NX - Arts in General:NX798-820 - Arts centers and facilities",40,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB2001-3029 - Brittanic group:PB2501-2621 - Cornish",40,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections:PQ9131-9144 - General",40,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG615-620 - Military motor vehicles",40,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z700 - Bookbinding",40,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics:CD70-79 - Practice of special chancelleries",39,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK505-505.95 - Lithuania:DK505.92-505.939 - Vilnius",39,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest:DP153-160.8 - Navarre",39,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR481 - Earliest to 1281/1453",39,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT509-509.9 - Gambia",39,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT5320-6737 - Customs relative to special classes:GT5320-5690 - By birth, rank, etc.",39,"J - Political Science:JN - Political Institutions (Europe):JN6640-6649 - Belarus",39,"K - Law:KJ-KKZ - Europe:KJV-KJW - France:KJW51-4360 - Individual regions, provinces, departments, etc.",39,"K - Law:KQ-KTZ - Africa:KQT - Burkina Faso",39,"K - Law:KQ-KTZ - Africa:KRG - Congo",39,"K - Law:KQ-KTZ - Africa:KSH - Ivory Coast",39,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE11-13 - Central America",39,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE15-17 - West Indies",39,"M - Music:MT - Instruction and study:MT20-34 - Systems and methods",39,"P - Language & Literature:PN - Literature (General):PN4390 - Diaries",39,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9300-9326 - Individual authors, 2001-",39,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF315-315.5 - Ponies",39,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL630-632.5 - Religious organization",38,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL687 - Mediterranean region",38,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2380-2386 - Religious life.  Religious state",38,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy:CN750-753 - Early Christian inscriptions",38,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP161-272.4 - Modern Spain, 1479/1516-:DP201-232.6 - 1808-1886.  19th century:DP222-232.6 - 1868-1886",38,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1932-2125 - Serbia:DR2090-2101.5 - Vojvodina",38,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT545-545.9 - CÃ´te d'Ivoire.  Ivory Coast:DT545.42-545.45 - Ethnography",38,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K58 - Maxims.  Quotations",38,"K - Law:KD-KDK - The United Kingdom and Ireland:KD51-9500 - England and Wales:KD9400-9500 - Wales",38,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC5900-6101 - Correspondence schools",38,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4489-4491 - Iceland",38,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG55-57 - Taiwan",38,"N - Fine Arts:NE - Print Media:NE2800-2880 - Printing of engravings",38,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ991-995 - Afroasiatic languages",38,"P - Language & Literature:PN - Literature (General):PN1010-1525 - Poetry:PN1341-1347 - Folk poetry",38,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6269-6278 - Aphorisms.  Apothegms:PN6259-6268 - Anecdotes.  Table talk",38,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6000-6467.36 - Flemish literature since 1830:PT6000-6199 - Literary history and criticism",38,"R - Medicine:RB - Pathology:RB57 - Post-mortem examination.  Autopsies",38,"R - Medicine:RD - Surgery:RD49-52 - Surgical therapeutics.  Preoperative and postoperative care",38,"T - Technology:TF - Railroad Engineering & Operation:TF1300-1620 - High speed ground transporation",38,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1480-1496 - Agricultural machinery.  Farm machinery",38,"T - Technology:TS - Manufactures:TS800-937 - Wood technology.  Lumber:TS920-937 - Chemical processing of wood",38,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP167.5 - Heresy, heresies, heretics",37,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ4801-5450 - Tokens:CJ4901-5336 - By region or country",37,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB65.2-65.9 - 1521-1648",37,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB921-958.6 - History:DB927-958.6 - By period:DB927-932.9 - Early to 1792:DB929-929.8 - ÃrpÃ¡d dynasty, 896-1301",37,"D - World History:DA-DR - Europe:DE - The Greco-Roman World:DE23-31 - Geography",37,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-",37,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period",37,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History",37,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century",37,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR279-296 - Local history and description:DR286 - Bucharest",37,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR50-50.84 - Thrace",37,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3260-3272 - Polar regions.  Frigid Zone",37,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC150-182 - Physical oceanography:GC160-177 - Temperature",37,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG361-363 - Legal tender",37,"J - Political Science:JZ - International relations:JZ3674-3875 - State territory and its parts:JZ3686-3875 - International waters",37,"K - Law:KF-KFZ - The United States:KFZ8601-9199 - Confederate States of America",37,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL5001-5999 - British West Indies",37,"K - Law:KQ-KTZ - Africa:KSR - Madagascar",37,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC68-70 - Demographic aspects of education",37,"M - Music:MT - Instruction and study:MT9-15 - Printed pedagogical aids:MT10 - Teachers' and supervisors' manuals, etc.",37,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving:NE1634-1749 - History",37,"P - Language & Literature:PN - Literature (General):PN1551 - The dialogue",37,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6244-6246 - Literary extracts.  Commonplace books",37,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7945-8046 - Collections:PT7975-7994 - Poetry",37,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9950-9999 - Provincial, local, foreign",37,"R - Medicine:RD - Surgery:RD57 - Surgical pathology",37,"U - Military Science:UC - Maintenance & Transportation:UC400-440 - Barracks.  Quarters.  Camps",37,"U - Military Science:UD - Infantry:UD330-335 - Firing.  Military sharpshooting",37,"V - Naval Science:V - Naval Science (General):V720-743 - Naval life, manners and customs, antiquities, etc.",37,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM595-989 - Marine engineering:VM975-989 - Diving",37,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF2050-2055 - Contact between humans and extraterrestrials",36,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1300-1380 - Jainism:BL1379-1380 - Modifications, etc.",36,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV900-1450 - Religious societies, associations, etc.:BV1300-1395 - Religious societies of women",36,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX720-729 - Orthodox Eastern Church, Macedonian",36,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB65-99.2 - 1521-:DB80-99.2 - 19th-20th centuries:DB83 - Revolution, 1848",36,"D - World History:DA-DR - Europe:DD - Germany:DD301-454 - Prussia:DD325-339 - Antiquities.  Social life and customs.  Ethnography",36,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4600-4800 - Local history and description:DK4650-4685 - Gdansk (Danzig)",36,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-:DL1090-1105 - 1939-1945",36,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL971-991 - Local history and description:DL976 - Stockholm",36,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR57-60.2 - Description and travel",36,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT367-367.8 - Northeast Africa",36,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV750-770.27 - Air sports (Airplane flying, kiteflying, bungee jumping, etc.)",36,"J - Political Science:JZ - International relations:JZ24-38 - Societies, associations, academies, institutes, etc., for the study of international relations",36,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3289-3367 - Organs of government:K3290-3304 - The people.  Election law",36,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K94 - Legal composition and draftsmanship",36,"K - Law:KJ-KKZ - Europe:KJG - Albania",36,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVN - Fiji",36,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4451-4487 - Denmark",36,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT728-735 - Ensembles",36,"N - Fine Arts:NE - Print Media:NE2242-2246 - Monotype (Printmaking)",36,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6121-6129 - Old Persian",36,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN611-649 - Ancient",36,"R - Medicine:RJ - Pediatrics:RJ242-243 - Hospital care",36,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS355-356 - Pharmaceutical supplies",36,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture:SH138 - Mariculture",36,"T - Technology:TR - Photography:TR550-581 - Studio and laboratory",36,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA926-929 - Civil defense:UA929.5-929.95 - War damage in industry.  Industrial defense",36,"U - Military Science:UD - Infantry:UD480-485 - Airborne troops.  Parachute troops",36,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ221-249 - Antiquities.  Archaeology:BQ240-244 - Literary discoveries",35,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ5901-5975 - Missionary work",35,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV800-873 - Sacraments.  Ordinances:BV835-838 - Marriage",35,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV900-1450 - Religious societies, associations, etc.:BV1300-1395 - Religious societies of women:BV1300-1393 - Young Women's Christian Associations",35,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH51-92 - Antiquities.  Social life and customs.  Ethnography",35,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH141-207 - By period:DH171-184 - 1384-1555.  House of Burgundy",35,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR901-914.5 - General",35,"D - World History:DT - Africa:DT3291-3415 - Mozambique:DT3330-3398 - History",35,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.1-546.19 - Gabon (Gaboon, Gabun)",35,"H - Social Sciences:HE - Transportation & Communications:HE331-380 - Traffic engineering.  Roads and highways. Streets:HE374-377 - Bridges",35,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ803 - Temporary marriage.  Trial marriage. Companionate marriage",35,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV544 - Charity fairs, bazaars, etc.:HV544.5 - International social work",35,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM531-619 - Domestic relations. Family law",35,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEN5401-5999 - Northwest Territories",35,"K - Law:KLA-KLW - Eurasia:KLP1-4989 - Ukraine (1919-1991)",35,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMU - Syria",35,"K - Law:KQ-KTZ - Africa:KQW - Cameroon",35,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4203-4209 - Poland",35,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3780 - Music on particular topics",35,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3785 - Musical journalism",35,"M - Music:MT - Instruction and study:MT18 - Music in colleges and universities",35,"P - Language & Literature:PF - West Germanic Languages:PF1001-1184 - Flemish",35,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3310-3319 - 18th century:PG3318 - Sumarokov",35,"P - Language & Literature:PR - English Literature:PR921-928 - Essays",35,"R - Medicine:RG - Gynecology & Obstetrics:RG104-104.7 - Operative gynecology",35,"R - Medicine:RV - Botanic, Thomsonian, & Eclectic Medicine",35,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH360-363 - Seal fisheries.  Fur sealing",35,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG640-645 - Military aeronautical research",35,"V - Naval Science:VK - Navigation, Merchant Marine:VK401-529 - Study and teaching",35,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB440-482 - Relation to special topics:CB481 - War and civilization",34,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR4480-4485 - Royalty.  Insignia.  Regalia, crown and coronets, etc.",34,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-:DL1090-1105 - 1939-1945:DL1095-1105 - Russo-Finnish War, 1939-1940",34,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR201-296 - Romania:DR207-210 - Description and travel",34,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa:DT613-613.9 - Guinea-Bissau.  Portuguese Guinea:DT613.5-613.83 - History",34,"E-F - History of the Americas:E151-909 - United States:E838-889 - Later twentieth century, 1961-2000:E838-840.8 - General:E840.6-840.8 - Biography (General)",34,"J - Political Science:JQ - Political Institutions (Asia, Africa, Australia, Pacific Area, etc.):JQ21-1852 - Asia:JQ1758-1852 - Middle East (incl Turkey, Iran, Israel, Arabian Peninsula):JQ1852 - Islamic countries",34,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3615-3622 - Veterinary laws.  Veterinary medicine and hygiene.  Prevention of cruelty to animals",34,"K - Law:KQ-KTZ - Africa:KRL - East Africa Protectorate",34,"K - Law:KQ-KTZ - Africa:KSY - Namibia",34,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1036-1036.8 - Community education",34,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint:NE2120-2140 - General works",34,"P - Language & Literature:PR - English Literature:PR911-918 - Letters",34,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9201-9499 - Literary history and criticism:PT9375-9404 - Poetry",34,"Q - Science:QR - Microbiology:QR99.6-99.8 - Cyanobacteria",34,"R - Medicine:RS - Pharmacy & Materia Medica:RS151.2-151.9 - Dispensatories",34,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB419.5 - Roof gardening.  Balcony gardening",34,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1670-1672 - Canaanite",33,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL185-192.8 - 1523-1670",33,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL453-459 - Military, naval, and political history.  Foreign relations",33,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History:DL75-81 - 1387-1900",33,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT543-543.9 - Guinea:DT543.5-543.827 - History",33,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU300-330 - South Australia:DU320-322 - History",33,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E191 - 1607-1689",33,"H - Social Sciences:HE - Transportation & Communications:HE5751-5870 - Ferries",33,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG9301-9343 - Accident insurance",33,"H - Social Sciences:HM - Sociology:HM826 - Social institutions",33,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K970 - Compensation to victims of crime.  Reparation",33,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMX - Yemen",33,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements:KZ170-173 - 1920-",33,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH501-509 - Karelian",33,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language:PJ6950-7144 - South Arabian:PJ6950-6981 - Ancient",33,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA646-648.3 - War and public health",33,"S - Agriculture:SF - Animal Culture:SF84-84.64 - Economic zoology",33,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX140-149 - Ethiopic or Abyssinian Church",32,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2325-2333 - Saints.  Hagiology:BX2315-2324 - Relics.  Shrines.  Pilgrimages.  Processions",32,"C - Historical Sciences (Archaeology, Genealogy):CS - Genealogy:CS23-35 - Genealogical lists, etc., covering more than one country or continent",32,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP558-618 - Early and medieval to 1580:DP568-578 - House of Burgundy, 1095-1383",32,"D - World History:DT - Africa:DT3161-3257 - Malawi.  Nyasaland",32,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT365.5-365.78 - History",32,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT549-549.9 - Senegal:DT549.42-549.45 - Ethnography",32,"D - World History:DU - Oceania (South Seas):DU490 - Melanesia (General)",32,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809:E335 - War with Tripoli, 1801-1805",32,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E391-392 - William H. Harrison's administration, March 4-April 4, 1841",32,"K - Law:KL - History of Law in the Ancient Orient:KL147-177 - Ancient legal systems compared",32,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5637-5645 - Conventional arms control",32,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3551-3593 - Jews",32,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3950-4806.5 - Exceptional children and youth.  Special education:LC4001-4806.5 - Children and youth with disabilities.  Learning disabled children and youth:LC3991-4000 - Gifted children and youth",32,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC5701-5771 - Vacation schools.  Summer schools",32,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC6571-6581 - Radio and television extension courses.  Instruction by radio and television",32,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1330-1336 - Linoleum block prints",32,"P - Language & Literature:PH - Uralic & Basque Languages:PH91-98.5 - Finnic.  Baltic-Finnic",32,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5281-5289 - Neo-Aramaic",32,"R - Medicine:RL - Dermatology:RL110-120 - Therapeutics",32,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF914.5 - Veterinary acupuncture",32,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1615-1616 - Sumerian",31,"D - World History:DA-DR - Europe:DC - France:DC110-433 - Modern, 1515-:DC35-424 - History:DC60-424 - By period:DC111-120 - 1515-1589.  16th century:DC118 - Massacre of St. Bartholomew, 1572",31,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP285-402 - Local history and description:DP285-295 - Northern, Northwestern, Southern Spain",31,"D - World History:DT - Africa:DT2871-3025 - Zimbabwe.  Southern Rhodesia:DT2910-2913 - Ethnography",31,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT619-620.9 - Spanish West Africa",31,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E746 - Naval history",31,"E-F - History of the Americas:F1-975 - United States - Regional:F590.3-596.3 - The West.  Trans-Mississippi Region.  Great Plains:F576-590 - Wisconsin",31,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1046-1049.7 - Prince Edward Island",31,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV201-555 - Physical education and training:GV435-436.7 - Physical measurements.  Physical tests, etc.",31,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD8031 - Labor in politics.  Political activity of the working class",31,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ2035-2039 - Life skills.  Coping skills.  Everyday living skills",31,"J - Political Science:JS - Local & Municipal Government:JS2145-2219 - Central America",31,"J - Political Science:JZ - International relations:JZ63-1153 - Sources:JZ221-1153 - By region or country",31,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5900-5967 - Military pact systems for collective self-defense",31,"M - Music:ML - Literature on music:ML32-33 - Institutions",31,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN841 - Black literature (General)",31,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5600-5739 - 16th-18th centuries:PT5700-5732 - Vondel, Joost van den",31,"R - Medicine:RD - Surgery:RD130 - Prosthesis.  Artificial organs",31,"S - Agriculture:SD - Forestry:SD388 - Forestry machinery and engineering",31,"S - Agriculture:SF - Animal Culture:SF361-361.73 - Donkeys",31,"S - Agriculture:SK - Hunting Sports:SK590-593 - Wild animal trade",31,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD813-870 - Street cleaning.  Litter and its removal",31,"A - General:AZ - History of Scholarship & Learning, The Humanities:AZ191-193 - Evaluation",30,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS325 - African languages",30,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7020-7060 - Church of God",30,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD176-189 - 1519-1648.  Reformation and Counter-reformation:DD189 - Period of Thirty Years' War, 1618-1648",30,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1016-1022 - Antiquities.  Social life and customs.  Ethnography",30,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR996-998 - Local history and description",30,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.4-546.49 - Chad (Tchad):DT546.449-546.483 - History",30,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU300-330 - South Australia:DU328-330 - Local history and description",30,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8111-8123 - Government policy.  State supervision",30,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG8799-8830 - By class insured, by risk, by plan",30,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ4919-4936 - Capitation.  Poll tax",30,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K4360-4375 - Professions and occupations",30,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K68-70 - Directories",30,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP174-190.5 - Observances and practice of Islam",30,"K - Law:KDZ - North America:KDZ1-4999 - America.  North America:KDZ1101-1199 - Organization of American States (OAS)",30,"K - Law:KL - History of Law in the Ancient Orient:KL2800-3099 - Egypt",30,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNE - Regional organization and integration",30,"K - Law:KQ-KTZ - Africa:KQ2010-9000 - Law of indigenous peoples",30,"K - Law:KQ-KTZ - Africa:KRB - Central African Republic",30,"K - Law:KQ-KTZ - Africa:KTU - Togo",30,"K - Law:KZ - Law of nations:KZ6378-6795 - Law of war and neutrality.  Jus belli:KZ6350-6785 - Enforced settlement of international disputes:KZ6665-6714 - Air warfare",30,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1025-1027 - Collective education",30,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1000-1027 - General",30,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM101-2711 - American languages (Aboriginal):PM401-501 - American languages of the United States (and Mexico)",30,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1321-1329 - Oratory",30,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7945-8046 - Collections:PT8021-8046 - Prose",30,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT9100-9155 - Provincial, local, foreign",30,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9547-9639 - Collections:PT9580-9599 - Poetry",30,"T - Technology:TN - Mining Engineering, Metallurgy:TN799.5-948 - Nonmetallic minerals:TN600-799 - Metallurgy",30,"U - Military Science:U - Military Science (General):U250-255 - Maneuvers (combined arms)",30,"U - Military Science:UB - Military administration:UB407-409 - Warrant officers.  Noncommissioned officers",30,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z679-680 - Library buildings.  Library architecture:Z680.3-680.6 - Library communication systems",30,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV5099 - Quietism",29,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5148-5149 - Sacraments:BX5140.5-5147 - Liturgy and ritual",29,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant:BX4751-4793 - Old Catholics",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period:DG461-583.8 - History",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period:DG461-583.8 - History:DG401-583.8 - Medieval and modern Italy, 476-",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period:DG461-583.8 - History:DG401-583.8 - Medieval and modern Italy, 476-:DG550.5-564 - 19th century",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period:DG461-583.8 - History:DG401-583.8 - Medieval and modern Italy, 476-:DG550.5-564 - 19th century:DG552-554.5 - 1848-1871.  Risorgimento",29,"D - World History:DA-DR - Europe:DG - Italy:DG538-583.8 - Modern, 1492-:DG500-583.8 - By period:DG461-583.8 - History:DG401-583.8 - Medieval and modern Italy, 476-:DG550.5-564 - 19th century:DG552-554.5 - 1848-1871.  Risorgimento:DG553-553.5 - 1848-1849.  Austro-Sardinian War",29,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL480-502 - 1387-1814.  Union of Kalmar, 1397",29,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century:DP222-232.6 - 1868-1886",29,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT547-547.9 - Niger:DT547.42-547.45 - Ethnography",29,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E396-400 - Tyler's administration, April 4, 1841-1845:E398 - Northeastern boundary disputes, 1783-1845",29,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2201-3799 - South America:F2351 - Guiana",29,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB461-468.995 - Reefs",29,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEN1201-1799 - Newfoundland",29,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEP - Prince Edward Island",29,"K - Law:KLA-KLW - Eurasia:KLH - Georgia (Republic)",29,"K - Law:KQ-KTZ - Africa:KTK - Somalia",29,"K - Law:KZ - Law of nations:KZ2-5.5 - Bibliography",29,"K - Law:KZ - Law of nations:KZ3900-5490 - The international legal community and members:KZ3910-5490 - Subjects of the law of nations:KZ4110 - By region",29,"K - Law:KZA - Law of the Sea:KZA1040-1065 - Intergovernmental congresses and conferences",29,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC5451-5493 - Aged education",29,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE46-48 - Ecuador",29,"N - Fine Arts:NA - Architecture:NA4100-8480 - Special classes of buildings:NA4150-4160 - Classed by form",29,"P - Language & Literature:PA - Greek & Latin Language & Literature:PA6000-6971 - Roman literature:PA6141-6144 - Criticism, interpretation, etc.:PA6100-6140 - Collections",29,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2131-2193 - By period:PN2152-2160 - Medieval",29,"S - Agriculture:SK - Hunting Sports:SK281-293 - Special methods and types of hunting:SK284-287 - Fox hunting",29,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5127-5129.8 - Church of England and other churches",28,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB1-879 - Austria.  Austro-Hungarian Empire:DB35-99.2 - History:DB51-99.2 - By period:DB51-64 - Early and medieval to 1521:DB60-64 - Wars with the Turks",28,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB901-999 - Hungary:DB974.9-999 - Local history and description:DB981-997 - Budapest",28,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL503-526 - 1814-1905.  19th century",28,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1202-1218 - General",28,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1096-1100.5 - Mackenzie",28,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1600-1692 - West Indies",28,"G - Geography, Anthropology, Recreation:G - Geography (General):G905-910 - Tropics (General)",28,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA260-288 - Globe making.  Globes",28,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ961-967 - Free love",28,"J - Political Science:JA - Political Science (General):JA35.5 - Congresses",28,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K133 - Legal aid.  Legal assistance to the poor",28,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1150-1231 - Maritime law:K1195-1223 - Maritime social legislation",28,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3740-3762 - Education",28,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR160 - General works",28,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2310-3026 - Constitution of the Church",28,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL1-499 - Bahamas",28,"K - Law:KL - History of Law in the Ancient Orient:KL700-2215 - Mesopotamia.  Assyro-Babylonian law",28,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5687-5788.5 - Nuclear weapon free zones and zones of peace",28,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC5501-5560 - Evening schools",28,"M - Music:MT - Instruction and study:MT165 - Tuning",28,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6080-6095 - Quotations:PN6086-6089 - French",28,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6090-6110 - German:PN6080-6095 - Quotations:PN6086-6089 - French",28,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9097-9119 - Prose",28,"S - Agriculture:SF - Animal Culture:SF515-515.5 - Reptiles",28,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF910 - Other diseases and conditions:SF910.5 - Veterinary orthopedics",28,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE177-178.8 - Roadside development.  Landscaping",28,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM529 - Jewish tradition",27,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP191-253 - Branches, sects, etc.:BP251-253 - Nurculuk",27,"B - Philosophy, Psychology, Religion:BT - Doctrinal Theology:BT198-590 - Christology:BT580 - Miracles.  Apparitions.  Shrines, sanctuaries, images, processions, etc.",27,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6330-6331.2 - Doctrine:BX6329 - Baptists and other churches",27,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9884-9886 - United Church of Christ",27,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ5501-6661 - Medals and medallions:CJ5723-5793 - Medieval and modern",27,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB881-898 - Liechtenstein",27,"D - World History:DA-DR - Europe:DC - France:DC921-930 - Andorra",27,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU182-198 - Tasmania.  Van Diemen's Land",27,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV547 - Self-help groups",27,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV650-670 - Life saving",27,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMQ1001-1499 - Palestine (to 1948)",27,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC1390 - Men.  Boys",27,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6121-6129 - Orations:PN6110.5-6120 - Drama",27,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4064-4075 - Early to 1500:PQ4001-4063 - General",27,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism:PT5300-5348 - Prose",27,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6500-6593.36 - Afrikaans literature:PT6500-6530 - Literary history and criticism",27,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7900-7930 - Folk literature",27,"R - Medicine:RE - Ophthalmology:RE918-921 - Color vision tests, charts, etc.",27,"R - Medicine:RK - Dentistry:RK280 - Oral and dental anatomy and physiology",27,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB441-441.75 - Flower shows.  Exhibitions",27,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF311-312 - Draft horses",27,"V - Naval Science:VB - Naval Administration:VB320-325 - Minorities, women, etc. in navies",27,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z688 - Special collections:Z688.5-Z688.6 - Processing",27,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5140-5355 - Buddhist ministry.  Priesthood.  Organization:BQ5251-5305 - Education and training",26,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX720-729 - Orthodox Eastern Church, Macedonian:BX729.5 - Orthodox Eastern Church, Ukrainian",26,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF801-801.9 - Turkish rule, 1453-1821",26,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH540-569 - Military, naval, and political history.  Foreign relations",26,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP622-629 - 1580-1640.  Spanish dynasty (Sixty years( captivity)",26,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR485-555.7 - 1281/1453-1789.  Fall of Constantinople, 1453:DR511-529 - 1566-1640.  Period of decline:DR515-516 - Cyprian War, 1570-1571.  Holy League, 1571",26,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR921-926 - Antiquities.  Social life and customs.  Ethnography",26,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD6977-7080 - Cost and standard of living:HD6958.5-6976 - Industrial relations",26,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV541 - Women and charity",26,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV1449 - Gay men.  Lesbians",26,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1094-1096 - Loan of money",26,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7051-7054 - International unification, approximation, and harmonization",26,"K - Law:KQ-KTZ - Africa:KQV - Burundi",26,"K - Law:KQ-KTZ - Africa:KSZ - Niger",26,"K - Law:KZ - Law of nations:KZ1234-1236 - Legal research.  Legal bibliography",26,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5401-5809 - Syriac:PJ5801-5809 - Neo-Syriac dialects (Modern Syriac)",26,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2892-2892.95 - Siraiki",26,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9650-9651 - Medieval",26,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA405 - Death certification",26,"T - Technology:TH - Building Construction:TH8001-8581 - Decoration and decorative furnishings",26,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA910-915 - Mobilization",26,"V - Naval Science:VB - Naval Administration:VB170-187 - Civil department",26,"V - Naval Science:VC - Naval Maintenance:VC280-345 - Clothing and equipment",26,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL290 - The soul",25,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1660-1665 - Phoenician.  Carthaginian, etc.",25,"C - Historical Sciences (Archaeology, Genealogy):CE - Technical Chronology, Calendar:CE91-92 - Perpetual calendars.  Century calendars, etc.",25,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH141-207 - By period:DH141-162 - Early and medieval to 1384",25,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL192 - War with Sweden, 1657-1660",25,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL192 - War with Sweden, 1657-1660:DL185-192.8 - 1523-1670",25,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR73.7-80.8 - Early and medieval:DR74.5-77.8 - First Bulgarian Empire, 681-1018",25,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR927-946 - General",25,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR996-998 - Local history and description:DR998 - Other cities, towns, etc., A-Z",25,"D - World History:DT - Africa:DT1501-1685 - Namibia.  South-West Africa:DT1554-1558 - Ethnography",25,"D - World History:DT - Africa:DT2421-2525 - Botswana.  Bechuanaland:DT2454-2458 - Ethnography",25,"D - World History:DT - Africa:DT2421-2525 - Botswana.  Bechuanaland:DT2464-2502 - History",25,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT545-545.9 - CÃ´te d'Ivoire.  Ivory Coast:DT545.52-545.83 - History",25,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT554-554.9 - Mauritania:DT554.52-554.83 - History",25,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E195-199 - 1689-1775:E198 - King George's War, 1744-1748",25,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA109 - Aerial cartography",25,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC100-103 - Seawater",25,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation",25,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1700-1973 - Social legislation:K1960-1973 - Public welfare.  Public assistance",25,"K - Law:KQ-KTZ - Africa:KSX - Mozambique",25,"K - Law:KQ-KTZ - Africa:KTH - Seychelles",25,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVB - Australia and New Zealand",25,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVQ - Guam",25,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ781-841 - Folk literature",25,"R - Medicine:RJ - Pediatrics:RJ250-250.3 - Premature infants",25,"R - Medicine:RK - Dentistry:RK501-519 - Operative dentistry.  Restorative dentistry",25,"T - Technology:TH - Building Construction:TH7700-7975 - Illumination.  Lighting:TH7005-7699 - Heating and ventilation.  Air conditioning",25,"V - Naval Science:VK - Navigation, Merchant Marine:VK1500-1661 - Pilots and pilotage",25,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1595 - Yezidis",24,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4872-4924 - Pre-Reformation:BX4913-4924 - Hussites:BX4920-4924 - Bohemian Brethren",24,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics:CD501-511 - Study and teaching",24,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG268-269 - Second Triumvirate, 43-31",24,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1170-1180 - Local history and description",24,"D - World History:DT - Africa:DT2871-3025 - Zimbabwe.  Southern Rhodesia:DT3020-3025 - Local history and description",24,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.2-546.29 - Congo (Brazzaville).  Middle Congo:DT546.25-546.283 - History",24,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT619-620.9 - Spanish West Africa:DT620-620.9 - Equatorial Guinea (Spanish Guinea)",24,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU350-380 - Western Australia:DU370-372 - History",24,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E701-705 - Benjamin Harrison's administration, 1889-1893",24,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB651-2998 - Hydrology.  Water:GB980-2998 - Ground and surface waters:GB2801-2998 - Hydrometeorology",24,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC150-182 - Physical oceanography:GC177.6-182 - Optical oceanography",24,"J - Political Science:JN - Political Institutions (Europe):JN7390-7399 - Finland",24,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K170 - Biography",24,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7550-7582 - Intellectual property",24,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3780-3985 - Courts and procedure. De processibus",24,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936):KLS - Kyrgyzstan",24,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPJ - Mongolia",24,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG715-720 - Australia",24,"N - Fine Arts:NK - Decorative Arts:NK1700-2195 - Interior decoration.  House decoration:NK2190-2192 - Church decoration",24,"S - Agriculture:SB - Plant Culture:SB127 - Forcing",24,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE279.5-298 - Pedestrian facilities",24,"U - Military Science:UC - Maintenance & Transportation:UC600-695 - Horses.  Mules.  Remount service",24,"V - Naval Science:VC - Naval Maintenance:VC20-258 - Organization of service",24,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL220 - Pantheism",23,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1695 - Druses",23,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2295-2310 - Sacramentals",23,"C - Historical Sciences (Archaeology, Genealogy):CS - Genealogy:CS38-39 - Family history covering more than one country",23,"D - World History:DA-DR - Europe:DD - Germany:DD84-257.4 - History:DD175-257.4 - Modern, 1519-:DD176-189 - 1519-1648.  Reformation and Counter-reformation:DD184-184.7 - Schmalkaldic League and War, 1530-1547",23,"D - World History:DA-DR - Europe:DF - Greece:DF501-649 - Medieval Greece.  Byzantine Empire, 323-1453:DF550-649 - History:DF599.8-649 - 1057-1453:DF630-649 - 1261-1453.  Palaeologi:DF645-649 - 1453.  Fall of Constantinople",23,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR947-953 - Military, naval, and political history.  Foreign relations",23,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT1991-2054 - Cape Province.  Cape of Good Hope",23,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT411-411.9 - Djibouti.  French Territory of the Afars and Issas.  French Somaliland",23,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT541-541.9 - Benin.  Dahomey:DT541.5-541.845 - History",23,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT551-551.9 - Mali.  Mali Federation.  Sudanese Republic.  French Sudan:DT551.5-551.82 - History",23,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E691-695 - Arthur's administration, September 19, 1881-1885",23,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E706-710 - Cleveland's second administration, 1893-1897",23,"G - Geography, Anthropology, Recreation:G - Geography (General):G3160-3171 - Globes",23,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes:HS1525-1560 - Religious societies",23,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K321-474 - Schools of legal theory:K325-328 - Historical jurisprudence",23,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure:K5575-5582 - Juvenile criminal law and procedure",23,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons:K7155-7197 - Domestic relations.  Family law:K7157-7179 - Marriage.  Husband and wife",23,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law:K7510-7512 - Insolvency and bankruptcy.  Creditors' rights",23,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWP - Tonga",23,"M - Music:MT - Instruction and study:MT950 - Music to accompany instruction in ballet, folk dancing, gymnastics, etc.",23,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1220-1233 - General works",23,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2131-2193 - By period:PN2171-2179 - Renaissance",23,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9189 - Individual authors and works to 1500",23,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9189 - Individual authors and works to 1500:PQ9131-9188 - Collections",23,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9189 - Individual authors and works to 1500:PQ9131-9188 - Collections:PQ9172-9188 - Prose",23,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS185-231 - By period:PS229-231 - 21st century",23,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS400-408.2 - Oratory",23,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7420-7438 - Folk literature",23,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature:PT7598-7599 - Individual authors or works:PT7597 - Local",23,"R - Medicine:RM - Therapeutics, Pharmacology:RM146-146.7 - Misuse of therapeutic drugs.  Medication errors",23,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE279.5-298 - Pedestrian facilities:TE279 - Streets",23,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z716-716.15 - Library extension.  Library commissions.  Traveling libraries",23,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV895-896 - Shrines.  Holy places",22,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9999 - Independent churches, parishes, societies, etc.",22,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9999 - Independent churches, parishes, societies, etc.:BX9998 - Other beliefs and movements akin to Christianity",22,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD5001-6471 - Seals:CD5501-5557 - Medieval",22,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH95-207 - History:DH113-137 - Military, naval, and political history.  Foreign relations",22,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1024-1033 - General",22,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1036-1048 - Military, naval, and political history.  Foreign relations",22,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT516-516.9 - Sierra Leone:DT516.42-516.45 - Ethnography",22,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT555-555.9 - Burkina Faso.  Upper Volta:DT555.42-555.45 - Ethnography",22,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT582-582.9 - Togo.  Togoland:DT582.5-582.82 - History",22,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E766-783 - Wilson's administrations, 1913-1921:E780 - Internal history during World War I",22,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1059-1061 - Maritime atlases (General)",22,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS951-1179 - Odd Fellows",22,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT621-635 - Origin of social classes",22,"J - Political Science:JN - Political Institutions (Europe):JN6730-6739 - Latvia",22,"K - Law:KLA-KLW - Eurasia:KLM - Moldova",22,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2261-2270.9 - Lahnd",22,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6000-6467.36 - Flemish literature since 1830:PT6300-6397 - Collections",22,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8177-8177.36 - 2001-",22,"R - Medicine:RC - Internal Medicine:RC952-1245 - Special situations and conditions:RC1000-1020 - Submarine medicine",22,"R - Medicine:RL - Dermatology:RL760-785 - Diseases due to parasites",22,"R - Medicine:RZ - Other Systems of Medicine:RZ301-397.5 - Osteopathy",22,"S - Agriculture:SF - Animal Culture:SF511-511.5 - Ostrich",22,"U - Military Science:UB - Military administration:UB160-165 - Records, returns, muster rolls, etc.",22,"U - Military Science:UE - Cavalry, Armor:UE460-475 - Horses",22,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ100-102 - Congresses.  Conferences (General)",21,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX100-189 - Eastern churches.  Oriental churches:BX180-189 - Maronite Church",21,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9875-9877.1 - United Brethren in Christ.  Church of the United Brethren in Christ",21,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant:BX4795 - Other",21,"D - World History:DA-DR - Europe:DA - Great Britain:DA900-995 - Ireland:DA938-966.2 - Modern, 1603-:DA966-966.2 - 21st century",21,"D - World History:DA-DR - Europe:DB - Austria, Liechtenstein, Hungary, Czechoslovakia:DB2000-3150 - Czechoslovakia:DB2700-3150 - Slovakia:DB3100-3139 - Bratislava (Pressburg)",21,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH571-584 - Early and medieval to 1555",21,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ151-152 - Early and medieval to 1555",21,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK61-77 - Local history and description:DJK71-76 - Carpathian Mountain region",21,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL160-183.9 - Early and medieval to 1523:DL174-183.9 - 1241-1523.  Union of Kalmar, 1397",21,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL201-249 - 1808-1906.  19th century:DL236-239.6 - Schleswig-Holstein War, 1864",21,"D - World History:DT - Africa:DT3031-3145 - Zambia.  Northern Rhodesia:DT3054-3058 - Ethnography",21,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT547-547.9 - Niger:DT547.5-547.83 - History",21,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT639 - Congo (Kongo) River region",21,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E310-337 - 1789-1809.  Constitutional period:E331-337 - Jefferson's administrations, 1801-1809:E337.5 - Nineteenth century (General)",21,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3290-9880 - By region or country:G3290-5667 - America.  Western Hemisphere:G3300-5184 - North America:G3380-3384 - Greenland",21,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1651-1654 - Discount",21,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1722 - Bank mergers",21,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2326-2327 - Progressive taxation",21,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ805 - Desertion",21,"J - Political Science:JZ - International relations:JZ5511.2-6300 - Promotion of peace.  Peaceful change:JZ5527-5532 - Congresses and conferences:JZ5514-5526 - Societies, associations, academies, institutes, etc., for peace promotion, research and education",21,"J - Political Science:JZ - International relations:JZ6422-6422.5 - Neutrality.  Non-participation in wars.  Norms of neutrality",21,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1010-1014 - The merchant.  Business enterprises",21,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7200-7218 - Property",21,"K - Law:KHA-KHW - South America:KHS - Surinam",21,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPW - Vietnam.  South Vietnam",21,"K - Law:KQ-KTZ - Africa:KQH - Angola",21,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG481-505 - West Africa",21,"N - Fine Arts:N - Visual arts:N8554-8585 - Examination and conservation of works of art:N8510-8553 - Art studios, materials, etc.",21,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6098.7-6129 - Drama:PQ6075-6098 - Poetry",21,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6500-6593.36 - Afrikaans literature:PT6550-6575 - Collections",21,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7601-7869 - Literary history and criticism:PT7835-7869 - Prose",21,"Q - Science:QH - Natural History, Biology:QH301-705.5 - Biology (General):QH705-705.5 - Economic biology",21,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL350-385 - Classification of religions",20,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1680-1685 - Arabian (except Islam)",20,"B - Philosophy, Psychology, Religion:BS - The Bible:BS1901-2970 - New Testament:BS2260-2269 - Selections.  Quotations",20,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4400-4470 - Practical church work.  Social work.  Work of the layman:BV4390-4399 - Personal life of the clergy",20,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6334 - Controversial works",20,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6334 - Controversial works:BX6333 - Sermons.  Tracts",20,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6751-6793 - Christian Church",20,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF221.2-224 - ca. 1125-500 B.C.  Age of Tyrants:DF220-221 - Bronze Age, Minoan, and Mycenaean ages",20,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP645-669 - 1816-1908:DP650 - Revolution of 1820",20,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU422.8-424 - Maoris:DU422.5-424.5 - Ethnography:DU419-422 - History",20,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G3210-3221 - Northern and Southern Hemispheres",20,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8053.5-8054.45 - Insurance for professions.  Malpractice\tinsurance.  Professional liability insurance",20,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4720-4780 - National defense.  Military law:K4725-4734 - The military establishment.  Armed forces",20,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU160 - General works",20,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEY - Yukon Territory",20,"K - Law:KJ-KKZ - Europe:KKL - Monaco",20,"K - Law:KQ-KTZ - Africa:KRV - Gambia",20,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements:KZ119-165 - To 1920",20,"L - Education:L - Education (General):L797-898 - Educational exhibitions and museums",20,"M - Music:MT - Instruction and study:MT150 - Audio-visual aids",20,"N - Fine Arts:NK - Decorative Arts:NK3175-3296.3 - Upholstery.  Drapery",20,"P - Language & Literature:PH - Uralic & Basque Languages:PH3801-3820 - Samoyedic languages",20,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5251-5259 - Jewish Palestinian",20,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1471-1490 - Middle Indo-Aryan dialects",20,"P - Language & Literature:PN - Literature (General):PN4699-5650 - Journalism.  The periodical press, etc.:PN4825-4830 - Amateur journalism",20,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6249-6258 - Ana",20,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA396 - Regulation of medical education.  Licensure",20,"R - Medicine:RA - Public Aspects of Medicine:RA421-790.95 - Public health.  Hygiene.  Preventive medicine:RA428-428.5 - Public health laboratories, institutes, etc.",20,"R - Medicine:RM - Therapeutics, Pharmacology:RM138 - Drug prescribing",20,"U - Military Science:UB - Military administration:UB440-449.5 - Retired military personnel",20,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1001-1121 - General bibliography:Z1036 - Booksellers' general catalogs of modern books",20,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP168 - Apostasy from Islam",19,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ221-249 - Antiquities.  Archaeology:BQ246-249 - Inscriptions, etc.",19,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ5501-6661 - Medals and medallions:CJ5581-5690 - Ancient",19,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR4501-6305 - Chivalry and knighthood (Orders, decorations, etc.):CR4547-4553 - Ceremonials, pageants, tournaments, etc.",19,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK508-508.95 - Ukraine:DK508.92-508.939 - Kiev",19,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1002-1014.5 - General",19,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT371-390 - Ethiopia (Abyssinia):DT380-380.4 - Ethnography",19,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E195-199 - 1689-1775:E196 - King William's War, 1689-1697",19,"E-F - History of the Americas:F1-975 - United States - Regional:F901-951 - Alaska:F951 - Bering Sea and Aleutian Islands",19,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1000-1000.5 - Atlases of the moon, planets, etc.",19,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB447 - Climatic geomorphology",19,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV6001-7220.5 - Criminology:HV6250-6250.4 - Victims of crimes.  Victimology:HV6201-6249 - Criminal classes",19,"J - Political Science:JN - Political Institutions (Europe):JN2240 - Slovakia",19,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization:JV1-9 - Periodicals.  Serials",19,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3440-3460 - Civil service.  Government officials and employees",19,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4720-4780 - National defense.  Military law:K4740-4760 - Military criminal law and procedure",19,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7230-7245 - Succession upon death",19,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects",19,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3790-4855 - Criminal law and procedure",19,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3526-3705 - Public finance",19,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2310-3026 - Constitution of the Church",19,"K - Law:KDZ - North America:KDZ1-4999 - America.  North America:KDZ2001-2499.2 - Bermuda",19,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGA - Belize",19,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMV - United Arab Emirates",19,"K - Law:KQ-KTZ - Africa:KTR - Swaziland",19,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWL2001-2490 - Solomon Islands",19,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC951 - Other",19,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education:LC6601-6660.4 - Reading circles and correspondence clubs",19,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4831-4887 - Portugal",19,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG511 - Egypt",19,"M - Music:M - Music:M1495-2199 - Vocal music:M1999-2199 - Sacred vocal music:M2147-2188 - Liturgy and ritual:M2115-2146 - Hymnals. Hymn collections",19,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB2001-3029 - Brittanic group:PB3001-3029 - Gaulish",19,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5271-5279 - Samaritan",19,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6299-6308 - Maxims:PN6288.5-6298 - Epitaphs",19,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8600-8637 - Folk literature",19,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9201-9499 - Literary history and criticism:PT9460-9499 - Prose",19,"R - Medicine:RD - Surgery:RD91-91.5 - Asepsis and antisepsis.  Sterilization (Operative)",19,"R - Medicine:RJ - Pediatrics:RJ245-247 - Nursing of children.  Pediatric nursing",19,"U - Military Science:UF - Artillery:UF848-856 - Artillery instruments.  Fire control, etc.",19,"V - Naval Science:VB - Naval Administration:VB260-275 - Enlisted personnel",19,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1365-1385 - Positivist ethics",18,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5130-5137 - Temple.  Temple organization",18,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX1969 - Forms of worship.  Catholic practice",18,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ1-4625 - Coins:CJ161 - Symbols, devices, etc.",18,"D - World History:DA-DR - Europe:DD - Germany:DD701-901 - Local history and description:DD851-900 - Berlin:DD900.2-900.76 - Bonn",18,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH620-676 - 1794-1909:DH650-652 - Revolution of 1830",18,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK504-504.95 - Latvia:DK504.92-504.939 - Riga",18,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ124-191 - 19th century:DQ171-191 - 1848-1900",18,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1232-1321 - History:DR1259-1321 - By period:DR1273-1280 - 1800-1918",18,"D - World History:DT - Africa:DT3031-3145 - Zambia.  Northern Rhodesia:DT3064-3119 - History",18,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT450.5-450.95 - Burundi:DT450.66-450.855 - History",18,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT477 - Upper Guinea",18,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT541-541.9 - Benin.  Dahomey:DT541.42-541.45 - Ethnography",18,"H - Social Sciences:HC - Economic History & Conditions:HC92 - Economic geography of the oceans (General)",18,"H - Social Sciences:HE - Transportation & Communications:HE5746-5749 - Stage lines",18,"H - Social Sciences:HE - Transportation & Communications:HE8689-8700.95 - Radio and television broadcasting:HE7601-8700.9 - Telecommunication industry.  Telegraph:HE8660-8688 - Wireless telegraph.  Radiotelegraphy",18,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG381-395 - International coinage",18,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG9251-9262 - Industrial life insurance",18,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ1051-1057 - The church and marriage",18,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children:HV835-847 - Foundlings",18,"J - Political Science:JN - Political Institutions (Europe):JN6745 - Lithuania",18,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2210-2212 - The codes of canon law",18,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGZ1-499 - Virgin Islands of the United States",18,"K - Law:KJ-KKZ - Europe:KJV-KJW - France:KJW5201-9600 - Individual cities",18,"K - Law:KL - History of Law in the Ancient Orient:KL190-420 - Sources",18,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPG7001-9999 - States of East and West Malaysia (1957-    ) (Part 1)",18,"K - Law:KQ-KTZ - Africa:KRE - Comoros",18,"K - Law:KQ-KTZ - Africa:KSC - Guinea-Bissau",18,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG481-505 - West Africa:LG481-483 - Nigeria",18,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6490 - Jm",18,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3515 - Singapore literature",18,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM101-2711 - American languages (Aboriginal):PM231-355 - American languages of British North America",18,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6233-6238 - Anacreontic literature",18,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6340-6348 - Toasts",18,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9083-9095 - Drama",18,"P - Language & Literature:PR - English Literature:PR908 - Diaries",18,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism:PT5250-5295 - Drama",18,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature:PT7593-7596.5 - Collections",18,"R - Medicine:RD - Surgery:RD59 - Surgical shock.  Traumatic shock",18,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF810 - Veterinary parasitology:SF810.5-810.7 - Predatory animals and their control",18,"T - Technology:TH - Building Construction:TH900-915 - Construction equipment in building",18,"T - Technology:TR - Photography:TR504-508 - Transparencies.  Diapositives",18,"U - Military Science:UF - Artillery:UF450-455 - Seacoast artillery",18,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z681-681.3 - Reproduction of library materials. Storage media of library materials",18,"B - Philosophy, Psychology, Religion:BR - Christianity:BR140-1510 - History:BR160-481 - By period:BR280 - Renaissance.  Renaissance and Reformation",17,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH31-40 - Description and travel",17,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK503-503.95 - Estonia:DK503.92-503.939 - Tallinn",17,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR73.7-80.8 - Early and medieval:DR80-80.8 - Second Bulgarian Empire, 1185-1396",17,"G - Geography, Anthropology, Recreation:GB - Physical Geography:GB400-649 - Geomorphology.  Landforms.  Terrain:GB448 - Slopes",17,"G - Geography, Anthropology, Recreation:GF - Human ecology, Anthropogeography:GF101-127 - Settlements:GF127 - Rural settlements.  Rural geography",17,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV733-734.5 - Professionalism in sports.  Professional sports (General)",17,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1334-1335 - Consolidation of land holdings",17,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2337-2339 - Sweatshops:HD2331-2336 - Home labor.  Home-based businesses",17,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5717-5734.7 - Business communication:HF5691-5716 - Business mathematics.  Commercial arithmetic",17,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1655 - Acceptances",17,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8205-8220 - Government insurance",17,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2338 - Taxation of government property",17,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ2338 - Taxation of government property:HJ2336-2337 - Tax exemption",17,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT251-265 - Mental and moral life",17,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936):KLV - Turkmenistan",17,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KML - Jerusalem",17,"K - Law:KZD - Space Law, Law of Outer Space:KZD3489-4406 - Peaceful uses of outer space:KZD4030-4326 - Public order in space and outer space",17,"L - Education:LB - Theory & Practice of Education:LB3497-3499 - Hygiene in universities and colleges",17,"L - Education:LB - Theory & Practice of Education:LB3525-3575 - Special days",17,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF14-1257 - Great Britain:LF1140-1257 - Wales",17,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB1801-1867 - Manx",17,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN2000-3307 - Dramatic representation.  The theater:PN2131-2193 - By period:PN2131-2145 - Ancient",17,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8650-8733 - Collections:PT8675-8695 - Poetry",17,"R - Medicine:RX - Homeopathy:RX211-581 - Diseases, treatment, etc.",17,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF360-360.4 - Feral horses.  Wild horses",17,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF925 - Veterinary physical medicine",17,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE279 - Streets",17,"U - Military Science:UF - Artillery:UF157-302 - Tactics.  Maneuvers.  Drill regulations",17,"U - Military Science:UH - Other Military Services:UH700-705 - Public relations.  Press.  War correspondents",17,"V - Naval Science:VC - Naval Maintenance:VC350-410 - Subsistence.  Provisioning",17,"V - Naval Science:VF - Naval Ordnance:VF21-124 - By region or country",17,"V - Naval Science:VF - Naval Ordnance:VF346-348 - Naval weapons systems",17,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z681.5-681.7 - Trustees.  Library boards, committees, etc.",17,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX840 - Museums.  Exhibitions",16,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB156 - Terrestrial evidence of interplanetary voyages",16,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D284-297 - 1715-1789.  18th century:D297 - Seven Years' War, 1756-1763",16,"D - World History:DA-DR - Europe:DD - Germany:DD301-454 - Prussia:DD301-312 - General",16,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL43-87 - History:DL83-87 - 1900-    .  Period of World War I, 1914-1918",16,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP56-272.4 - History:DP91-272.4 - By period:DP97.3-160.8 - 711-1516.  Moorish domination and the Reconquest:DP145-152.8 - LeÃ³n (Asturias)",16,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR95-98 - Local history and description:DR97 - Sofia",16,"D - World History:DS - Asia:DS153-154.9 - Jordan.  Transjordan:DS153.5-153.55 - Ethnography",16,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.3-546.39 - Central African Republic.  Central African Empire. Ubangi-Shari:DT546.348-546.3852 - History",16,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT621-637 - Liberia:DT630-630.5 - Ethnography",16,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1050 - St. Lawrence Gulf, River and Valley (General)",16,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G3100-3102 - Antarctica",16,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA109 - Aerial cartography:GA109.5 - Cadastral mapping",16,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC200-376 - Dynamics of the ocean:GC297-299 - Water masses and oceanic mixing",16,"J - Political Science:JN - Political Institutions (Europe):JN6690-6699 - Russia (Federation):JN6680-6689 - Moldova",16,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1150-1231 - Maritime law:K1226-1231 - Marine insurance",16,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3370 - Constitutional courts and procedure",16,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons:K7155-7197 - Domestic relations.  Family law:K7181-7197 - Parent and child.  Guardian and ward",16,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law:K7485-7495 - Business associations.  Business corporations",16,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM520-523.72 - Halakah",16,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3098-3121.5 - Medical legislation",16,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2215-2308 - General norms and principles. De normis generalibus",16,"K - Law:KQ-KTZ - Africa:KRC - Chad",16,"K - Law:KZ - Law of nations:KZ1319-1327 - International legal regimes",16,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1541-1549 - Czech Republic",16,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1561-1697 - Hungary",16,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG351-357 - Lebanon",16,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ6001-8517 - Arabic:PJ6073-7144 - Language:PJ6950-7144 - South Arabian:PJ7051-7144 - Modern",16,"P - Language & Literature:PN - Literature (General):PN441-1009.5 - Literary history:PN610-779 - By period:PN661-694 - Medieval (to 1500):PN692-693 - Prose.  Prose fiction",16,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5001-5348 - Literary history and criticism:PT5201-5243 - Poetry",16,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8301-8574 - Literary history and criticism:PT8420-8456 - Special periods",16,"S - Agriculture:S - Agriculture (General):S770-790.3 - Agricultural structures.  Farm buildings",16,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB447 - Preservation and reproduction of flowers, fruits, etc.",16,"S - Agriculture:SF - Animal Culture:SF518 - Insect rearing",16,"U - Military Science:UB - Military administration:UB380-385 - Soldiers' and sailors' homes",16,"U - Military Science:UH - Other Military Services:UH750-769 - Military social work.  Social welfare services",16,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ5851-5899 - Benevolent work.  Social work.  Welfare work, etc.",15,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5183-5187 - Religious communities.  Conventual life.  Religious societies",15,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG461-583.8 - History:DG500-583.8 - By period:DG538-583.8 - Modern, 1492-:DG546-549 - 1792-1815.  Napoleonic period:DG548-549 - Kingdom of Italy",15,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH431-435 - Description and travel",15,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century:DP222-232.6 - 1868-1886:DP224-226 - Revolution, 1868-1870",15,"D - World History:DT - Africa:DT3161-3257 - Malawi.  Nyasaland:DT3194-3237 - History",15,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT555-555.9 - Burkina Faso.  Upper Volta:DT555.517-555.837 - History",15,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT582-582.9 - Togo.  Togoland:DT582.42-582.45 - Ethnography",15,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU422.5-424.5 - Ethnography",15,"D - World History:DU - Oceania (South Seas):DU400-430 - New Zealand:DU422.5-424.5 - Ethnography:DU419-422 - History",15,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1101-1105.7 - Franklin",15,"H - Social Sciences:HE - Transportation & Communications:HE331-380 - Traffic engineering.  Roads and highways. Streets:HE379-380 - Tunnels.  Vehicular tunnels",15,"H - Social Sciences:HE - Transportation & Communications:HE5601-5725 - Automotive transportation:HE1001-5600 - Railroads.  Rapid transit systems",15,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3025-3163 - Mariners",15,"J - Political Science:JA - Political Science (General):JA92 - Collective biography of political scientists",15,"J - Political Science:JS - Local & Municipal Government:JS1840-2058.9 - West Indies.  Caribbean Area",15,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV1-5397 - Colonies and colonization:JV10-19 - Societies",15,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7260-7338 - Obligations:K7315-7338 - Torts",15,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR3077-3165 - Sacraments. Administration of sacraments. De sacramentis et administratione",15,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNH - Bhutan",15,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWR - Vanuatu",15,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2574-2576 - Gays.  Lesbians.  Bisexuals",15,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC47-58.7 - Private school education:LC58-58.7 - Preparatory schools.  Preparatory school education",15,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG405-411 - South Africa",15,"M - Music:ML - Literature on music:ML159-3785 - History and criticism:ML3300-3351 - Program music",15,"M - Music:MT - Instruction and study:MT820-915 - Singing and vocal technique:MT898-915 - Vocal techniques for children",15,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG8001-9146 - Baltic:PG8201-8208 - Old Prussian",15,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ5061-5192 - Other languages used by Jews:PJ5001-5060 - Literature",15,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections:PQ9172-9188 - Prose",15,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8050 - Medieval",15,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8205-8260 - Provincial, local, foreign",15,"R - Medicine:RG - Gynecology & Obstetrics:RG484-485 - Urogynecology and obstetric urology.  Urogynecologic surgery",15,"R - Medicine:RM - Therapeutics, Pharmacology:RM259 - Vitamin therapy",15,"S - Agriculture:SF - Animal Culture:SF405.5-407 - Laboratory animals:SF402-405 - Fur-bearing animals",15,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH334 - Economic aspects.  Finance:SH334.5-334.7 - Fishery technology",15,"S - Agriculture:SK - Hunting Sports:SK650-664 - Wildlife-related recreation",15,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG360-390 - Field engineering",15,"V - Naval Science:VD - Naval Seamen",15,"V - Naval Science:VF - Naval Ordnance:VF390-510 - Ordnance material (Ordnance proper)",15,"B - Philosophy, Psychology, Religion:BF - Psychology:BF725-727 - Class psychology",14,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6801-6843 - Christian Reformed Church",14,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century:DP222-232.6 - 1868-1886:DP230-231.5 - First Republic, 1873-1875",14,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ124-191 - 19th century:DQ154-161 - 1815-1848.  Sonderbund, 1845-1847",14,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.1-546.19 - Gabon (Gaboon, Gabun):DT546.15-546.183 - History",14,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT561-581 - Cameroon (Cameroun, Kamerun):DT581 - Local history and description",14,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT619-620.9 - Spanish West Africa:DT620-620.9 - Equatorial Guinea (Spanish Guinea):DT620.46-620.83 - History",14,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR940-941 - Mythical places",14,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV200.6-200.66 - Caving.  Spelunking",14,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure:HD1290-1291 - Municipal ownership",14,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG9201-9245 - Mutual life insurance.  Assessment life\tinsurance.  Fraternal life insurance",14,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3926-3935 - Food processing industries",14,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7690 - Arbitration and award",14,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP2.2-8 - Bibliography",14,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP40 - Encyclopedias. Dictionaries",14,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGP2001-2499 - Dominica",14,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMF1-293.5 - Armenia (Republic)",14,"K - Law:KZ - Law of nations:KZ1284-1285.5 - Methodology",14,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements:KZ176-182.5 - Boundary treaties",14,"L - Education:LD - Individual Educational Institutions (U.S.):LD13-7251 - Universities.  Colleges:LD6501 - Community colleges.  Junior colleges",14,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH541-549 - Veps",14,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6141-6145 - Essays:PN6130-6140 - Letters",14,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS420-429 - Essays",14,"Q - Science:QC - Physics:QC501-766 - Electricity and magnetism:QC501-721 - Electricity:QC676-678.6 - Radio waves (Theory)",14,"R - Medicine:RD - Surgery:RD98-98.4 - Surgical complications",14,"R - Medicine:RJ - Pediatrics:RJ91 - Supposed prenatal influence.  Prenatal culture.  Stirpiculture",14,"R - Medicine:RM - Therapeutics, Pharmacology:RM950 - Rehabilitation technology",14,"T - Technology:TT - Handicrafts:TT201-203 - Lathework.  Turning",14,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z703.5 - Stack management. Disposition of books on shelves, etc.",14,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV700-707 - Parish.  Congregation.  The local church",13,"D - World History:DA-DR - Europe:DG - Italy:DG691-817.3 - Central Italy:DG691-694 - General",13,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ193 - Anglo-Dutch War, 1672-1674",13,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT2181-2278 - KwaZulu-Natal.  Natal",13,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT301-330 - Morocco:DT330 - Spanish Morocco",13,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E371-375 - Monroe's administrations, 1817-1825:E373 - Missouri Compromise, 1820",13,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC63 - Oceanographic expeditions",13,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ802 - Matrimonial bureaus.  Marriage brokerage",13,"H - Social Sciences:HT - Communities, Classes, Races:HT601-1445 - Classes:HT731 - Freedmen",13,"J - Political Science:JZ - International relations:JZ4835-5490 - International organizations and associations:JZ4850-5490 - Intergovernmental organizations.  IGOs:JZ4935-5160 - United Nations:JZ4853-4934 - League of Nations",13,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3098-3122 - Medical legislation",13,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGH9001-9499 - Panama Canal Zone",13,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMF1001-1490 - Bahrain",13,"K - Law:KQ-KTZ - Africa:KRN - Eritrea",13,"K - Law:KQ-KTZ - Africa:KSU - Mauritania",13,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5870-5893 - Mutual and balanced reduction of armed forces",13,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC3503-3520 - Romanies.  Gypsies",13,"N - Fine Arts:NB - Sculpture:NB1199-1200 - Restoration of sculptures",13,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5301-5329.5 - East Aramaic:PJ5321-5329.5 - Mandaean",13,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6309-6318 - Mottoes",13,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5410-5414 - Translations",13,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8750-8775 - 16th-18th centuries",13,"S - Agriculture:S - Agriculture (General):S403 - Agricultural missions, voyages, etc.",13,"S - Agriculture:SK - Hunting Sports:SK341 - Other game",13,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG335 - Bridges",13,"U - Military Science:UH - Other Military Services:UH800-910 - Recreation and information services",13,"V - Naval Science:VF - Naval Ordnance:VF160-302 - Ordnance instructions and drill books",13,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1388 - Socialist ethics",12,"B - Philosophy, Psychology, Religion:BM - Judaism:BM495-532 - Sources of Jewish religion.  Rabbinical literature:BM497-509 - Talmudic literature:BM507-507.5 - Baraita",12,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX660-669 - Georgian Church",12,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5200-5207 - Dissent and nonconformity:BX5197-5199 - Biography",12,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6335-6336 - Creeds.  Catechisms",12,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6551-6593 - Catholic Apostolic Church.  Irvingites",12,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9998 - Other beliefs and movements akin to Christianity",12,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy:CN805-865 - By language",12,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK4010-4800 - Poland:DK4348.5-4395 - 1795-1918.  19th century (General):DK4186-4348 - To 1795",12,"D - World History:DT - Africa:DT2541-2686 - Lesotho.  Basutoland",12,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU145 - Australian Capital Territory.  Canberra",12,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E415.6-440.5 - Middle nineteenth century, 1845/1848-1861:E415.6-415.9 - General:E415.8-415.9 - Biography",12,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E740-749 - General:E740.5 - Sources and documents",12,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1140 - The Labrador Peninsula",12,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1540-1542 - Latin America (General)",12,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR931-935 - Signs and symbols",12,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8031-8080 - Police duty.  Methods of protection:HV8073-8079.35 - Investigation of crimes.  Examination and identification of prisoners:HV8079.2-8079.35 - Police social work",12,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8031-8080 - Police duty.  Methods of protection:HV8079.5-8079.55 - Traffic control.  Traffic accident investigation",12,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3201 - Foreign relations administration",12,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3400-3431 - Administrative law:K3420-3431 - Administrative organization",12,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM1572-1942 - Courts and procedure",12,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR3780-3983 - Judiciary. Ecclesiastical courts and procedure. De processibus",12,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMQ1-490 - Oman",12,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVS1-490 - Marshall Islands",12,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVS501-990 - Micronesia (Federated States)",12,"K - Law:KZ - Law of nations:KZ1329-3085 - Early/Medieval development to ca. 1900.  Ius Naturae et Gentium:KZ1330-1339 - Peace of Westphalia to the French Revolution (1648-1789)",12,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2667-2698 - Latin Americans.  Hispanic Americans:LC2690-2698 - Puerto Ricans.  Puerto Ricans in the United States",12,"L - Education:LC - Special Aspects of Education:LC6681 - Education and travel",12,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4493-4537 - Norway",12,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG421-423 - Uganda",12,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG741-745 - New Zealand",12,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3922 - Music in the workplace",12,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6259-6268 - Anecdotes.  Table talk:PN6249-6258 - Ana",12,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6288.5-6298 - Epitaphs:PN6279-6288 - Epigrams",12,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS700-3576 - Individual authors:PS3550-3576 - 1961-2000:PS3500-3549 - 1900-1960",12,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8301-8574 - Literary history and criticism:PT8540-8574 - Prose",12,"S - Agriculture:S - Agriculture (General):S589.8-589.87 - Plant growing media.  Potting soils",12,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB442.5 - Care and preparation of cut flowers and ornamental plants for market",12,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE206-209.5 - Location engineering",12,"U - Military Science:UE - Cavalry, Armor:UE144-145 - Horse cavalry",12,"V - Naval Science:VG - Minor Services of Navies:VG70-85 - Naval communication by telegraphy, telephone, etc.",12,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM165-276 - Study and teaching",12,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4050-4480 - Electronic information resources:ZA4450-4460 - Databases",12,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP174-190 - The practice of Islam:BP188-190 - Islamic religious life:BP189.68-189.7 - Monasticism",11,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5360-5680 - Religious life:BQ5595-5633 - Devotion.  Meditation.  Prayer:BQ5535-5594 - Devotional literature.  Meditations.  Prayers",11,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9881-9882.95 - United Church of Canada",11,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB440-482 - Relation to special topics:CB482 - Water and civilization",11,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD921-4280 - Archives:CD995-4280 - History and statistics:CD997 - Biography of archivists",11,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ4801-5450 - Tokens:CJ4861-4889 - By period",11,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ4801-5450 - Tokens:CJ5350-5450 - Special uses of tokens",11,"D - World History:DA-DR - Europe:DG - Italy:DG401-583.8 - Medieval and modern Italy, 476-:DG421.5-430.2 - Description and travel:DG401-421 - General",11,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL576-596 - Local history and description:DL581 - Oslo (Christiania)",11,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR954-978.52 - By period:DR961-969 - 1501-1912.  Turkish rule",11,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT548 - West Sahara",11,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU182-198 - Tasmania.  Van Diemen's Land:DU190-195.3 - History",11,"E-F - History of the Americas:E151-909 - United States:E186-199 - Colonial history (1607-1775):E191-199 - By period:E195-199 - 1689-1775:E197 - Queen Anne's War, 1702-1713",11,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2016 - Islands along Venezuela coast",11,"G - Geography, Anthropology, Recreation:GR - Folklore:GR81 - Folk beliefs, superstitions, etc. (General)",11,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2330 - Rural industries",11,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2330 - Rural industries:HD2329 - Industrialization",11,"H - Social Sciences:HE - Transportation & Communications:HE9751-9756 - Messenger service",11,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7550-7582 - Intellectual property:K7570-7582 - Industrial property",11,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP15 - Congresses. Conferences",11,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP2000-2035 - Public law. The state and Islam",11,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR127-129.5 - Trials",11,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2160-2204 - Canonical jurisprudence. Theory and science of canon law",11,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU4112-4820 - Local Church government",11,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGW5001-5499 - Saint Vincent and the Grenadines",11,"K - Law:KQ-KTZ - Africa:KQJ - Benin",11,"K - Law:KQ-KTZ - Africa:KQX - Cape Verde",11,"K - Law:KZD - Space Law, Law of Outer Space:KZD1420-1455 - Boundaries",11,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE71-73 - Uruguay",11,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1705-1709 - Finland",11,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG961 - Pacific islands",11,"N - Fine Arts:NC - Drawing, Design, Illustration:NC1280-1284 - Printed ephemera.  Imagerie populaire",11,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint:NE2220-2225 - Dry point",11,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3477-3490 - 1961-2000:PG3475-3476 - 1917-1960",11,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG3990 - Carpatho-Rusyn",11,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH561-569 - Votic",11,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH581-589 - Livonian",11,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3512 - Malaysian literature",11,"P - Language & Literature:PN - Literature (General):PN1530 - The monologue",11,"P - Language & Literature:PR - English Literature:PR161-488 - By period:PR401-488 - Modern:PR481-488 - 21st century",11,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS501-689 - Collections of American literature:PS670-678.2 - Letters",11,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature:PT7088-7089 - Folk literature",11,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature:PT7581-7592 - Literary history and criticism",11,"R - Medicine:RE - Ophthalmology:RE986-988 - Artificial eyes and other prostheses",11,"R - Medicine:RL - Dermatology:RL793 - Congenital disorders of the skin.  Nevi.  Moles",11,"R - Medicine:RL - Dermatology:RL95 - Pathological anatomy",11,"S - Agriculture:SF - Animal Culture:SF561 - Lac-insects",11,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH337 - Packing, transportation, and storage",11,"S - Agriculture:SK - Hunting Sports:SK37-39.5 - Shooting",11,"V - Naval Science:VC - Naval Maintenance:VC270-279 - Equipment of vessels, supplies, allowances, etc.",11,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z687-718.85 - The collections.  The books:Z665-718.8 - Library science.  Information science:Z698 - Shelflisting.  Author notation",11,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1050 - Northern and Central Asia",10,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC140 - Forgeries of antiquities",10,"D - World History:D - History (General):D204-475 - Modern history, 1453-:D242-283.5 - 1601-1715.  17th century:D275-276 - War of Devolution, 1667-1668",10,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF802-832 - 1821-1913:DF816-818 - Kapodistrias, 1827-1831",10,"D - World History:DA-DR - Europe:DG - Italy:DG819-875 - Southern Italy:DG831 - Sicily and Malta",10,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK61-77 - Local history and description:DJK71-76 - Carpathian Mountain region:DJK76.2-76.8 - Danube River Valley",10,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-:DL1122-1135.5 - 1945-1981",10,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1170-1180 - Local history and description:DL1170 - Regions, provinces, historical regions, etc., A-Z",10,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1170-1180 - Local history and description:DL1180 - Other cities, towns, etc., A-Z",10,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL503-526 - 1814-1905.  19th century:DL525 - Dissolution of the Swedish-Norwegian union, 1905",10,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR915-918 - Description and travel",10,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT509-509.9 - Gambia:DT509.5-509.83 - History",10,"E-F - History of the Americas:E151-909 - United States:E660-738 - Late nineteenth century, 1865-1900:E666-670 - Andrew Johnson's administration, April 15, 1865-1869:E669 - Purchase of Alaska, 1867",10,"G - Geography, Anthropology, Recreation:G - Geography (General):G142 - Aerial geography",10,"G - Geography, Anthropology, Recreation:GA - Mathematical Geography, Cartography:GA101-1776 - Cartography:GA197.5-198 - Cartographers",10,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5482-5482.4 - Secondhand trade",10,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV9290-9470 - Pacific Ocean islands",10,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K175 - Congresses",10,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K176-177 - Collected works (nonserial)",10,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1021-1022 - Commercial agency",10,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law:K7449-7460 - Maritime law",10,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM2070-2614 - Constitutional law. Constitutional principles of the Jewish community",10,"K - Law:KL - History of Law in the Ancient Orient:KL4700-4999 - Hittite law",10,"K - Law:KLA-KLW - Eurasia:KLQ-KLW - Respublika (to 1936):KLT - Tadjikistan",10,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNV - French Indochina",10,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVU1-499 - Nauru",10,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWE - Pacific Islands (Trust Territory)",10,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWG - Palau",10,"K - Law:KZ - Law of nations:KZ63-1152 - Sources.  Fontes juris gentium:KZ118-194 - Treaties and other international agreements:KZ183-183.5 - Treaties of arbitration, investigation, etc.",10,"K - Law:KZD - Space Law, Law of Outer Space:KZD1118-1122 - Treaties and other international agreements",10,"K - Law:KZD - Space Law, Law of Outer Space:KZD5614-6715 - Un-peaceful uses of outer space",10,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF3211-3247 - Greece",10,"M - Music:M - Music:M5-1480 - Instrumental music:M176 - Motion picture music",10,"M - Music:MT - Instruction and study:MT17 - Music in special education",10,"M - Music:MT - Instruction and study:MT9-15 - Printed pedagogical aids:MT9 - Examinations, exercises, etc.",10,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint:NE1940-1975 - General",10,"N - Fine Arts:NE - Print Media:NE1940-2232.5 - Etching and aquatint:NE2141-2149 - Special subjects",10,"N - Fine Arts:NE - Print Media:NE3000-3002 - Copying art.  Copying machine art",10,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ1-3999 - French literature:PQ845 - Juvenile literature",10,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4205-4206 - Translations",10,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8650-8733 - Collections:PT8719-8723 - Prose",10,"Q - Science:QB - Astronomy:QB455-456 - Astrogeology",10,"R - Medicine:RD - Surgery:RD99-99.35 - Surgical nursing",10,"R - Medicine:RE - Ophthalmology:RE991-992 - Ocular therapeutics",10,"R - Medicine:RG - Gynecology & Obstetrics:RG138 - Sterilization of women",10,"R - Medicine:RL - Dermatology:RL701-751 - Diseases due to psychosomatic and nerve disorders.",10,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB406.7-406.83 - Plant propagation",10,"S - Agriculture:SF - Animal Culture:SF277-360.4 - Horses:SF304.5-307 - Driving",10,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG500-565 - Technical troops and other special corps",10,"V - Naval Science:VE - Marines:VE430-435 - Training camps",10,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1108.2-1108.7 - Religious education",9,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ6200-6240 - Asceticism.  Hermits.  Wayfaring life",9,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6051-6093 - Reformed Episcopal Church",9,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6340-6346.3 - Government.  Discipline",9,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7079-7097 - Churches of God",9,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX8799-8809 - Plymouth Brethren.  Darbyites",9,"D - World History:DA-DR - Europe:DC - France:DC35-424 - History:DC60-424 - By period:DC60-109 - Early and medieval to 1515:DC64.7-94 - 476-1328.  Merovingians.  Carlovingians.  Capetians:DC62-64 - Gauls.  Celts.  Franks",9,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL480-502 - 1387-1814.  Union of Kalmar, 1397:DL500-502 - Union with Sweden, 1814",9,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1350-2285 - Local history and description:DR1502-1645 - Croatia:DR1633-1636.5 - Slavonia",9,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT1754-1770 - Ethnography:DT1758-1760 - Blacks",9,"D - World History:DT - Africa:DT2701-2825 - Swaziland",9,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU390 - Central Australia",9,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G2800-3064 - Oceans (General):G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.",9,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G2800-3064 - Oceans (General):G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G2740-2799 - Australasia",9,"H - Social Sciences:HJ - Public Finance:HJ2240-5908 - Revenue.  Taxation.  Internal revenue:HJ3863-3925 - Direct taxation",9,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3220 - Public policy",9,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4700-4705 - Government measures in time of war, national emergency, or economic crisis",9,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K592-597 - Regional divisions.  Interregional comparative law",9,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7585-7595 - Social legislation",9,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGK1-499 - Antigua and Barbuda",9,"K - Law:KLA-KLW - Eurasia:KLE - Azerbaijan",9,"K - Law:KQ-KTZ - Africa:KQ2-197 - History of law",9,"K - Law:KQ-KTZ - Africa:KSA - Guinea",9,"K - Law:KQ-KTZ - Africa:KSE1-490 - Equatorial Guinea",9,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWC - Northern Mariana Islands",9,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG461-462 - Zimbabwe",9,"M - Music:MT - Instruction and study:MT155 - Music theory for children",9,"M - Music:MT - Instruction and study:MT170-810 - Instrumental techniques:MT737 - Motion picture accompanying",9,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms:NB1312-1313 - Equestrian statues",9,"N - Fine Arts:NB - Sculpture:NB1293-1895 - Special forms:NB1750-1793 - Religious monuments and shrines",9,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE965-965.3 - Tradesmen's cards",9,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ4501-5192 - Hebrew:PJ4951-4996 - Medieval Hebrew",9,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5241-5249 - Christian Palestinian",9,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK2892-2892.95 - Siraiki:PK2801-2891 - Sinhalese (Singhalese)",9,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6279-6288 - Epigrams:PN6269-6278 - Aphorisms.  Apothegms",9,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4201-4263 - Collections:PQ4205-4206 - Translations:PQ4201-4204 - General",9,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections:PQ9164-9170 - Drama",9,"P - Language & Literature:PR - English Literature:PR901-907.2 - Oratory",9,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5490-5515 - Drama",9,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5600-5739 - 16th-18th centuries:PT5620-5637 - Cats, Jacob",9,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9547-9639 - Collections:PT9626-9639 - Prose",9,"R - Medicine:RL - Dermatology:RL675 - Chronic ulcer of the skin.  Bedsores",9,"R - Medicine:RL - Dermatology:RL790 - Pigmentations.  Albinism",9,"S - Agriculture:SF - Animal Culture:SF362 - Mules",9,"S - Agriculture:SF - Animal Culture:SF409 - Small animal culture",9,"T - Technology:TS - Manufactures:TS1060-1070 - Furs",9,"T - Technology:TX - Home Economics:TX1100-1105 - Mobile home living",9,"U - Military Science:U - Military Science (General):U261 - Amphibious warfare",9,"U - Military Science:U - Military Science (General):U320-325 - Physical training of soldiers",9,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA920-925 - Plans for attack and defense",9,"V - Naval Science:V - Naval Science (General):V396-396.5 - Military oceanography",9,"V - Naval Science:VF - Naval Ordnance:VF350-375 - Ordnance and arms (General)",9,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL71.5-73 - Biography:BL70-71 - Sacred books (General)",8,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ210-219 - Research",8,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ4911-5720 - Practice of Buddhism.  Forms of worship:BQ5080-5085 - Vestments, altar cloths, etc.",8,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6335-6336 - Creeds.  Catechisms:BX6334 - Controversial works",8,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7901-7943 - German Evangelical Synod of North America",8,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9889 - United Missionary Church",8,"D - World History:DA-DR - Europe:DG - Italy:DG11-365 - Ancient Italy.  Rome to 476:DG201-365 - History:DG221-365 - By period:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG237-238 - Subjection of Italy, 343-290",8,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK507-507.95 - Belarus.  Byelorussian S.S.R.  White Russia:DK507.92-507.939 - Minsk",8,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century:DP212-220 - 1814-1868.  Bourbon restoration",8,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP161-272.4 - Modern Spain, 1479/1516-:DP91-272.4 - By period:DP56-272.4 - History:DP201-232.6 - 1808-1886.  19th century:DP212-220 - 1814-1868.  Bourbon restoration:DP219-219.2 - Carlist War, 1833-1840",8,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP1-402 - Spain:DP27.5-43.2 - Description and travel:DP1-27 - General",8,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ78-110 - Early and medieval to 1516:DQ79-84 - Early to 687.  Celts and Romans.  Teutonic tribes",8,"D - World History:DS - Asia:DS331-349.9 - Southern Asia.  Indian Ocean Region:DS349.8-349.9 - Islands of the Indian Ocean",8,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT2291-2378 - Transvaal.  South African Republic",8,"D - World History:DT - Africa:DT3291-3415 - Mozambique:DT3410-3415 - Local history and description",8,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E401-415.2 - Mexican War, 1846-1848:E408 - Mexican cessions of 1848",8,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1050-1052 - Northern and Southern Hemispheres",8,"G - Geography, Anthropology, Recreation:G - Geography (General):G3180-9980 - Maps:G9900-9980 - Unlocalized maps",8,"H - Social Sciences:HD - Industries, Land use, Labor:HD2321-4730.9 - Industry:HD2331-2336 - Home labor.  Home-based businesses:HD2330 - Rural industries",8,"H - Social Sciences:HE - Transportation & Communications:HE9723-9737 - Signaling",8,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5482-5482.4 - Secondhand trade:HF5469.7-5481 - Markets.  Fairs",8,"J - Political Science:JN - Political Institutions (Europe):JN6680-6689 - Moldova",8,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM524.6-530 - Persons",8,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3500-3774 - Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",8,"K - Law:KF-KFZ - The United States:KFZ1801-2399 - Northwest Territory",8,"K - Law:KJ-KKZ - Europe:KJH - Andorra",8,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPF - Macao",8,"K - Law:KQ-KTZ - Africa:KST - Mali",8,"K - Law:KQ-KTZ - Africa:KTF - SÃ£o TomÃ© and Principe",8,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVH1-490 - American Samoa",8,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWQ - Tuvalu",8,"K - Law:KZD - Space Law, Law of Outer Space:KZD3489-4406 - Peaceful uses of outer space:KZD4030-4326 - Public order in space and outer space:KZD4080-4210 - Space flight",8,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education:LC446-454 - Orthodox Eastern Church",8,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC921-929.7 - Buddhist education",8,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4440-4441 - Estonia",8,"M - Music:MT - Instruction and study:MT87 - Community music",8,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE380 - Conservation and restoration of prints",8,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving:NE1750-1775 - Copper engraving",8,"N - Fine Arts:NK - Decorative Arts:NK1700-2195 - Interior decoration.  House decoration:NK2140-2180 - Decorative painting",8,"P - Language & Literature:PF - West Germanic Languages:PF3001-5999 - German:PF3992-4010 - Old Saxon:PF3801-3991 - Old High German",8,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5239 - Nabataean inscriptions",8,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ601-989 - Special groups:PJ601-621 - Christian Oriental",8,"P - Language & Literature:PN - Literature (General):PN4001-4355 - Oratory.  Elocution, etc.:PN4331-4355 - Recitations in foreign languages",8,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4186-4199 - Folk literature:PQ4001-4199.5 - History and criticism:PQ4199.5 - Juvenile literature (General)",8,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9121-9128 - Folk literature",8,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism:PT7177-7211 - Prose:PT7170-7176 - Poetry",8,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8952-8952.36 - 2001-",8,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9544 - Juvenile literature (General)",8,"R - Medicine:RJ - Pediatrics:RJ47.3-47.4 - Genetic aspects",8,"R - Medicine:RL - Dermatology:RL391-489 - Atrophies.  Hypertrophies",8,"R - Medicine:RM - Therapeutics, Pharmacology:RM139 - Prescription writing",8,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB414.6-417 - Greenhouses and greenhouse culture:SB414 - Forcing",8,"S - Agriculture:SF - Animal Culture:SF89 - Transportation",8,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1425-1475 - Lifting and pressing machinery",8,"U - Military Science:UB - Military administration:UB170-175 - Adjutant generals' offices",8,"B - Philosophy, Psychology, Religion:BF - Psychology:BF1404-2055 - Occult sciences:BF1562.5-1584 - Witchcraft:BF1501-1562 - Demonology.  Satanism.  Possession",7,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7556 - Evangelical United Brethren Church",7,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics:CD80-81 - Formularies",7,"C - Historical Sciences (Archaeology, Genealogy):CJ - Numismatics:CJ1-4625 - Coins:CJ153 - Finds of coins",7,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR1101-1131 - Ecclesiastical and sacred heraldry",7,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF750-854.32 - History:DF801-854.32 - By period:DF833-854.32 - 20th century:DF848 - Republic, 1924-1935",7,"D - World History:DA-DR - Europe:DH - Low Countries, Benelux Countries:DH401-811 - Belgium:DH503-694 - History:DH571-694 - By period:DH620-676 - 1794-1909:DH631 - French rule, 1794-1813",7,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL201-249 - 1808-1906.  19th century:DL217-223 - Schleswig-Holstein War, 1848-1850",7,"D - World History:DT - Africa:DT1501-1685 - Namibia.  South-West Africa:DT1670-1685 - Local history and description",7,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan:DT155-155.2 - Ethnography",7,"D - World History:DT - Africa:DT1701-2405 - South Africa:DT2075-2145 - Orange Free State.  Oranje Vrystaat",7,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT543-543.9 - Guinea:DT543.42-543.45 - Ethnography",7,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa:DT615-615.9 - Sao Tome and Principe",7,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E371-375 - Monroe's administrations, 1817-1825:E374 - Diplomatic history.  Foreign relations",7,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2006 - Leeward islands",7,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG321-329 - Mints.  Assaying",7,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ1001-1006 - The state and marriage",7,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ997 - Polyandry",7,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV697-3024 - Special classes:HV701-1420.5 - Children:HV931-941 - Fresh-air funds",7,"J - Political Science:JJ - Political Institutions (North America)",7,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3375 - Colonial law",7,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7260-7338 - Obligations:K7310 - Restitution.  Quasi contracts.  Unjust enrichment",7,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2-19 - Bibliography",7,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR3500-3774 - Penal (Criminal) law. De lege poenali",7,"K - Law:KDZ - North America:KDZ1-4999 - America.  North America:KDZ3001-3499 - Greenland",7,"K - Law:KE-KEZ - Canada:KEA-KEZ - Individual provinces and territories:KEZ - Individual cities, A-Z",7,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGM1-499 - Cayman Islands",7,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGR1001-1499 - Dutch West Indies (Netherlands Antilles)",7,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGR4001-4499 - Grenada",7,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGW2001-2499 - Saint Christopher (Saint Kitts), Nevis, and Anguilla",7,"K - Law:KL - History of Law in the Ancient Orient:KL700-2215 - Mesopotamia.  Assyro-Babylonian law:KL1600-1899 - Assyria",7,"K - Law:KQ-KTZ - Africa:KRK - Djibouti",7,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVR - Kiribati",7,"K - Law:KZA - Law of the Sea:KZA1340-1417 - Concepts and principles:KZA1340 - Mare clausum doctrine",7,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC59 - Public school education",7,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG471-475 - Transvaal",7,"N - Fine Arts:ND - Painting:ND1115-1120 - Study and teaching",7,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving:NE1620-1630 - General works",7,"N - Fine Arts:NX - Arts in General:NX411-415 - Competitions",7,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK7001-7075 - Dardic (Pisacha):PK7040-7045 - Kohistani",7,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM9001-9021 - Secret languages",7,"P - Language & Literature:PR - English Literature:PR6050-6076 - 1961-2000:PR6000-6049 - 1900-1960",7,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS409 - Diaries",7,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5351-5395 - Folk literature",7,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature:PT7088-7089 - Folk literature:PT7001-7087 - Literary history and criticism",7,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS250-252 - Commercial preparations.  Patent medicines",7,"R - Medicine:RS - Pharmacy & Materia Medica:RS153-441 - Materia medica:RS441 - Microscopical examination of drugs",7,"S - Agriculture:SD - Forestry:SD389 - Forest roads",7,"S - Agriculture:SF - Animal Culture:SF111-113 - Cost, yield, and profit.  Accounting",7,"S - Agriculture:SF - Animal Culture:SF512-513 - Ornamental birds",7,"S - Agriculture:SF - Animal Culture:SF87 - Acclimatization",7,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH20.3-191 - Aquaculture:SH185-191 - Frogs, leeches, etc.",7,"T - Technology:TJ - Mechanical Engineering and Machinery:TJ1501-1519 - Sewing machines",7,"U - Military Science:U - Military Science (General):U56-59 - Army clubs",7,"V - Naval Science:VG - Minor Services of Navies:VG20-25 - Chaplains",7,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z686 - Branches.  Delivery stations.  Bookmobiles",7,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL218 - Dualism",6,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ128 - Encyclopedias (General)",6,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV590-1652 - Ecclesiastical theology:BV1620-1652 - Social life, recreation, etc., in the church",6,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject:CT9999 - Blank books for personal records, diaries, etc.",6,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT3200-9999 - Biography.  By subject:CT9999 - Blank books for personal records, diaries, etc.:CT9960-9998 - Other miscellaneous groups",6,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-:DL1140-1141.6 - 1981-",6,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP645-669 - 1816-1908:DP657 - Wars of succession, 1826-1840",6,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR1202-2285 - Yugoslavia:DR1220-1224 - Description and travel",6,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR954-978.52 - By period:DR954-960.5 - To 1501",6,"D - World History:DT - Africa:DT2541-2686 - Lesotho.  Basutoland:DT2604-2660 - History",6,"D - World History:DT - Africa:DT3031-3145 - Zambia.  Northern Rhodesia:DT3140-3145 - Local history and description",6,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT401-409 - Somalia.  Somaliland and adjacent territory:DT402.3-402.45 - Ethnography",6,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT401-409 - Somalia.  Somaliland and adjacent territory:DT409 - Local history and description",6,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT491-516.9 - British West Africa:DT509-509.9 - Gambia:DT509.42-509.45 - Ethnography",6,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1141-1145.2 - Nunavut",6,"E-F - History of the Americas:F1170 - French America - Saint Pierre and Miquelon",6,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1535-1537 - Caribbean area",6,"G - Geography, Anthropology, Recreation:GC - Oceanography:GC150-182 - Physical oceanography:GC151-155 - Density",6,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3165-3173 - Shop women, clerks, etc.",6,"J - Political Science:JC - Political Theory:JC47 - Oriental state",6,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB74-78 - Auxiliary sciences",6,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3098-3122 - Medical legislation:KBM3075-3097 - Public health",6,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM524 - General works:KBM524.12-524.26 - The concept of Jewish law",6,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP42-43 - Legal education. Study and teaching",6,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3075-3096.5 - Public health",6,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR4000-4090 - Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",6,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3320-3460 - Church property. Church economics and finance",6,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL4001-4499 - British Virgin Islands",6,"K - Law:KL - History of Law in the Ancient Orient:KL2-135 - General",6,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KME - Regional organization and integration",6,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMS - Qatar",6,"K - Law:KQ-KTZ - Africa:KTY1501-1599 - Zanzibar (to 1964)",6,"L - Education:LB - Theory & Practice of Education:LB2300-2430 - Higher education:LB2366-2367.75 - College examinations:LB2361-2365 - Curriculum",6,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4445-4446 - Lithuania",6,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG302.2-320 - Former Soviet republics in Asia",6,"M - Music:ML - Literature on music:ML3800-3923 - Philosophical, societal, and physiological aspects, physics and acoustics of music.:ML3919-3920 - Moral influence of music.  Therapeutic use of music:ML3916-3918 - Social and political aspects of music",6,"M - Music:MT - Instruction and study:MT960 - Music in the theater",6,"N - Fine Arts:ND - Painting:ND1288-1460 - Special subjects:ND1385-1388 - Sports.  Hunting, fishing, etc.",6,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH531-539 - Ludic",6,"P - Language & Literature:PR - English Literature:PR1098-1369 - Collections of English literature:PR1330 - Diaries",6,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7601-7869 - Literary history and criticism:PT7800-7832 - Drama",6,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9509-9542 - Folk literature",6,"R - Medicine:RA - Public Aspects of Medicine:RA1-418.5 - Medicine and the state:RA398 - Registration of physicians, pharmacists, etc.",6,"R - Medicine:RC - Internal Medicine:RC251 - Constitutional diseases (General)",6,"R - Medicine:RD - Surgery:RD58 - Reparative processes after operations (Physiological)",6,"S - Agriculture:SK - Hunting Sports:SK281-293 - Special methods and types of hunting:SK291-292 - Coursing",6,"V - Naval Science:VD - Naval Seamen:VD21-124 - By region or country",6,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z4-115.5 - Books (General).  Writing.  Paleography:Z40-104.5 - Writing:Z102.5-104.5 - Cryptography.  Ciphers.  Invisible writing:Z53-102 - Shorthand.  Stenography.  Phonography",6,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1650 - Hebrew (for Judaism, see BM)",5,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ107-109 - Museums.  Exhibitions",5,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV30-135 - Times and seasons.  The Church year:BV65-70 - Saints' days",5,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5596-5598 - Church in Wales",5,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5996-6030 - Protestant Episcopal Church outside the United States",5,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC710 - Hill figures",5,"C - Historical Sciences (Archaeology, Genealogy):CN - Inscriptions, Epigraphy:CN755 - Medieval inscriptions (General)",5,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK901-909.5 - Kazakhstan.  Kazakh S.S.R.:DK909.2-909.39 - Alma Ata",5,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK941-949.5 - Uzbekistan.  Uzbek S.S.R.:DK949.2-949.39 - Tashkent",5,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP558-618 - Early and medieval to 1580:DP580 - Interregnum, 1383-1385",5,"D - World History:DA-DR - Europe:DP - Iberian Peninsula:DP501-900.22 - Portugal:DP535-682.2 - History:DP558-682.2 - By period:DP620-682.2 - 1580-:DP670-682.2 - 20th century:DP674 - Revolution of October 1910",5,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR11.5-16 - Description and travel:DR1-11 - General",5,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR996-998 - Local history and description:DR996 - Provinces, regions, etc., A-Z",5,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT211-239 - Libya:DT223-223.2 - Ethnography",5,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.4-546.49 - Chad (Tchad):DT546.442-546.445 - Ethnography",5,"E-F - History of the Americas:F1-975 - United States - Regional:F350.5-355 - Mississippi River and Valley.  Middle West:F336-350 - Mississippi",5,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1054-1055 - Polar regions.  Frigid Zone",5,"G - Geography, Anthropology, Recreation:G - Geography (General):G912-922 - Northern and Southern Hemispheres",5,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1201.5 - Hobbies (General)",5,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV557-1198.995 - Sports:GV735 - Umpires.  Sports officiating",5,"H - Social Sciences:HG - Finance:HG1501-3550 - Banking:HG1723 - Bank stocks.  Banking as an investment",5,"H - Social Sciences:HJ - Public Finance:HJ8001-8899 - Public debts:HJ8052 - Sinking funds.  Amortization",5,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1355 - Other societies",5,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT231 - Effect of city life",5,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K201-487 - Jurisprudence.  Philosophy and theory of law:K202 - Periodicals",5,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP2730-2968 - Government and administration. Siyisah. Administrative process",5,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3127-3135 - Environmental law",5,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3190-3437 - Economic law",5,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2160-2204.5 - Canonical jurisprudence. Canonical science",5,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR42-54.5 - Decisions of ecclesiastical tribunals and courts, and related materials",5,"K - Law:KM-KPW - Asia:KMC-KMY - Middle East.  Southwest Asia:KMG - Gaza",5,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KPH5001-5490 - Maldives",5,"K - Law:KZD - Space Law, Law of Outer Space:KZD1340-1400 - Concepts and principles.  Theory",5,"L - Education:LB - Theory & Practice of Education:LB2799-2799.3 - Educational consultants and consulting",5,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2699-2913 - Blacks.  African Americans:LC2667-2698 - Latin Americans.  Hispanic Americans",5,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2699-2913 - Blacks.  African Americans:LC2667-2698 - Latin Americans.  Hispanic Americans:LC2690-2698 - Puerto Ricans.  Puerto Ricans in the United States",5,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE61-63 - Paraguay",5,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG418 - Kenya",5,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG521 - Algeria and Tunisia",5,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB1101-1200 - Goidelic.  Gaelic",5,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5201-5329.5 - Aramaic:PJ5211-5289 - West Aramaic:PJ5229 - Palmyrene inscriptions",5,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK7001-7075 - Dardic (Pisacha):PK7050-7065 - Nuristani (Kafiri) group",5,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL3518 - Languages of the Montagnards",5,"P - Language & Literature:PS - Americal Literature:PS1-3576 - American literature:PS410-419 - Letters",5,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7581-7599 - Faroese literature:PT7593-7596.5 - Collections:PT7581-7592 - Literary history and criticism",5,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education:S548-548.6 - Historic farms",5,"S - Agriculture:SB - Plant Culture:SB39 - Horticultural voyages, etc.",5,"S - Agriculture:SD - Forestry:SD388 - Forestry machinery and engineering:SD388.5 - Tools and implements",5,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH393 - Seagrasses",5,"T - Technology:TA - Engineering (General), Civil Engineering:TA197-198 - Engineering meteorology",5,"V - Naval Science:VC - Naval Maintenance:VC412-425 - Navy yards and stations.  Shore facilities",5,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL175-265 - Natural theology:BL217 - Polytheism",4,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1109.2-1109.7 - Antiquities.  Archaeology.  Inscriptions",4,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1100-1295 - Hinduism:BL1225.2-1243.58 - Religious life:BL1216-1225 - Hindu pantheon.  Deities",4,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS350 - Mixed languages",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX450-450.93 - Church of Cyprus",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX200-756 - Orthodox Eastern Church:BX400-756 - Divisions of the church:BX630-639 - Orthodox Church in Austria and Hungary",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6329 - Baptists and other churches",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6329 - Baptists and other churches:BX6231-6328 - History.  Local divisions",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7401-7430 - Dowieism.  Christian Catholic Church",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant:BX4737 - French schisms of the 19th century",4,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX845 - Directories.  Yearbooks",4,"C - Historical Sciences (Archaeology, Genealogy):CT - Biography:CT93-206 - General collective biography:CT206 - Portraits",4,"D - World History:DA-DR - Europe:DD - Germany:DD301-454 - Prussia:DD314-320 - Description and travel",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG269.5-274.3 - General",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG269.5-274.3 - General:DG235-269 - Republic, 509-27 B.C.",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG269.5-274.3 - General:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG269.5-274.3 - General:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG268-269 - Second Triumvirate, 43-31",4,"D - World History:DA-DR - Europe:DG - Italy:DG269.5-365 - Empire, 27 B.C. - 476 A.D.:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG269.5-274.3 - General:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG268-269 - Second Triumvirate, 43-31:DG231-269 - Kings and Republic, 753-27 B.C.",4,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK690-699.5 - Azerbaijan.  Azerbaijan S.S.R.:DK699.2-699.39 - Baku",4,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1015-1015.4 - Description and travel",4,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1055-1141.6 - Modern, 1523-:DL1070-1078 - Revolution, 1917-1918.  Civil War",4,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1170-1180 - Local history and description:DL1175-1175.95 - Helsinki (Helsingfors)",4,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL101-291 - Denmark:DL143-263.3 - History:DL160-263.3 - By period:DL184-263.3 - Modern, 1523-:DL185-192.8 - 1523-1670:DL190 - War with Sweden, 1643-1645",4,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL747-805 - 1718-1818:DL790 - Revolution and loss of Finland, 1809",4,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR401-741 - Turkey:DR436-605 - History:DR481-605 - By period:DR485-555.7 - 1281/1453-1789.  Fall of Constantinople, 1453:DR531-555.7 - 1640-1789:DR534.2-534.5 - War of Candia, 1644-1669",4,"D - World History:DT - Africa:DT1251-1465 - Angola:DT1304-1308 - Ethnography",4,"D - World History:DT - Africa:DT179.2-179.9 - Northwest Africa",4,"D - World History:DT - Africa:DT2871-3025 - Zimbabwe.  Southern Rhodesia:DT2914-3000 - History:DT2910-2913 - Ethnography",4,"D - World History:DT - Africa:DT3161-3257 - Malawi.  Nyasaland:DT3189-3192 - Ethnography",4,"D - World History:DT - Africa:DT3291-3415 - Mozambique:DT3324-3328 - Ethnography",4,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT411-411.9 - Djibouti.  French Territory of the Afars and Issas.  French Somaliland:DT411.5-411.83 - History",4,"E-F - History of the Americas:F1001-1145.2 - British America - Canada:F1106-1110.5 - Keewatin",4,"G - Geography, Anthropology, Recreation:GR - Folklore:GR420-950 - By subject:GR865-874 - Transportation, travel, commerce, etc.",4,"H - Social Sciences:HE - Transportation & Communications:HE7511-7549 - Pneumatic service",4,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG9291-9295 - Maternity insurance",4,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ804 - Breach of promise",4,"H - Social Sciences:HT - Communities, Classes, Races:HT101-395 - Urban groups.  The city.  Urban sociology:HT281 - Recreation.  Amusements",4,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3025-3163 - Mariners:HV697-3024 - Special classes",4,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3025-3163 - Mariners:HV697-3024 - Special classes:HV1551-3024 - People with disabilities",4,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3174 - Other.  By occupation",4,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV697-4959 - Protection, assistance and relief:HV3025-3174 - Special classes.  By occupation:HV3174 - Other.  By occupation:HV3165-3173 - Shop women, clerks, etc.",4,"J - Political Science:JS - Local & Municipal Government:JS221-227 - Elections.  Local elections.  Municipal elections",4,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K1000-1395 - Commercial law:K1024-1132 - Commercial contracts:K1130-1132 - Carriage of goods and passengers.  Carriers",4,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K4430-4675 - Public finance:K4650-4675 - State and local finance",4,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K524-525 - Treaties and other international agreements",4,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7085 - Retroactive law.  Intertemporal law",4,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3040.5-3072 - Public property. Government property",4,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3123-3123.5 - Animal protection. Animal welfare. Animal rights",4,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP500-509.8 - General concepts",4,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR150 - Conferences. Symposia",4,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL6001-6499 - British Windward Islands",4,"K - Law:KQ-KTZ - Africa:KQM - British Central Africa Protectorate",4,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVL - Cook Islands",4,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVW - New Caledonia",4,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5687-5788.5 - Nuclear weapon free zones and zones of peace:KZ5647-5686 - Nuclear (Strategic) arms limitation",4,"K - Law:KZ - Law of nations:KZ5510-6299 - International law of peace and peace enforcement:KZ5586-5893 - The system of collective security:KZ5615-5893 - Arms control and disarmament regimes:KZ5834-5865 - Other weapons of mass destruction",4,"K - Law:KZ - Law of nations:KZ60-62.5 - Intergovernmental congresses and conferences",4,"K - Law:KZD - Space Law, Law of Outer Space:KZD3489-4406 - Peaceful uses of outer space:KZD3489.5-3608 - Space resources",4,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC184-188 - Taxation of schools and colleges",4,"L - Education:LC - Special Aspects of Education:LC65-245 - Social aspects of education:LC215-238.4 - Community and the school:LC223 - Schools as community centers",4,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4449.2-4449.5 - Ukraine",4,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG621 - Liberia",4,"M - Music:MT - Instruction and study:MT82 - Memorizing",4,"N - Fine Arts:NB - Sculpture:NB1134-1134.4 - Competitions",4,"N - Fine Arts:NE - Print Media:NE2685-2685.8 - Lumiprints",4,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4471-4471.5 - Nicobarese",4,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4471-4471.5 - Nicobarese:PL4301-4470 - Mon-Khmer (Mon-Anam) languages",4,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL4281-4587 - Austroasiatic languages:PL4471-4471.5 - Nicobarese:PL4301-4470 - Mon-Khmer (Mon-Anam) languages:PL4423-4470 - Bru, Chrau, Khasi, Muong, etc.",4,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6361 - Paradoxes",4,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6168 - Juvenile literature (General)",4,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ6001-8929 - Spanish literature:PQ6001-6168 - History and criticism:PQ6168 - Juvenile literature (General):PQ6155-6167 - Folk literature",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7351-7550 - Modern Icelandic literature:PT7442 - Juvenile literature (General)",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7945-8046 - Collections:PT7999-8020 - Drama",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7945-8046 - Collections:PT8021-8046 - Prose:PT7999-8020 - Drama",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8301-8574 - Literary history and criticism:PT8460-8489 - Poetry",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8301-8574 - Literary history and criticism:PT8500-8534 - Drama",4,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT9000-9094 - Landsmaal or New Norwegian:PT9025-9055 - Collections",4,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB414 - Forcing",4,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB950-990.5 - Pest control and treatment of diseases.  Plant protection:SB973-973.5 - Soil disinfection",4,"S - Agriculture:SD - Forestry:SD119 - Voyages, etc.",4,"S - Agriculture:SF - Animal Culture:SF92 - Equipment and supplies",4,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH400-400.8 - Seafood gathering",4,"T - Technology:TA - Engineering (General), Civil Engineering:TA495 - Disasters and engineering",4,"U - Military Science:UD - Infantry:UD490-495 - Airmobile operations",4,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG160-302 - Tactics and regulations",4,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1392 - Totalitarian ethics",3,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1630 - Chaldean",3,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL685 - Ural-Altaic",3,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ104-105 - Directories (General)",3,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1600-1609 - Persecution.  Martyrs:BR1609.5 - Dissent",3,"B - Philosophy, Psychology, Religion:BR - Christianity:BR1620 - Sacrilege (History)",3,"B - Philosophy, Psychology, Religion:BS - The Bible:BS125-355 - Modern texts and versions:BS315-355 - Non-European languages:BS355 - Artificial languages",3,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6651-6693 - Christadelphians.  Brothers of Christ",3,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7451-7493 - Evangelical and Reformed Church",3,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9675 - River Brethren.  Brethren in Christ",3,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9980 - Walloon Church",3,"C - Historical Sciences (Archaeology, Genealogy):CB - History of Civilization:CB440-482 - Relation to special topics:CB450 - Geography and civilization",3,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC600-605 - Boundary stones",3,"D - World History:DA-DR - Europe:DD - Germany:DD21.5-43 - Description and travel:DD1-21 - General",3,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG241-253 - Conquest of Mediterranean world.  264-133",3,"D - World History:DA-DR - Europe:DG - Italy:DG221-365 - By period:DG201-365 - History:DG11-365 - Ancient Italy.  Rome to 476:DG231-269 - Kings and Republic, 753-27 B.C.:DG235-269 - Republic, 509-27 B.C.:DG253.5-269 - Fall of the Republic and establishment of the Empire.  133-27:DG241-253 - Conquest of Mediterranean world.  264-133:DG250-253 - Wars in the East and in the West. 200-133",3,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ211 - 1795-1806.  Batavian Republic",3,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK509 - Southern Soviet Union:DK509.1-509.95 - Moldova.  Moldovian S.S.R.  Bessarabia:DK509.92-509.939 - Chisinau.  Kishinev",3,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK670-679.5 - Georgia (Republic).  Georgian S.S.R.  Georgian Sakartvelo:DK679.2-679.39 - Tbilisi.  Tiflis",3,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK911-919.5 - Kyrgyzstan.  Kirghiz S.S.R.  Kirghizia:DK919.2-919.39 - Frunze",3,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL401-596 - Norway:DL443-537 - History:DL460-537 - By period:DL480-502 - 1387-1814.  Union of Kalmar, 1397:DL499 - War of 1807-1814",3,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ20.5-26 - Description and travel:DQ1-20 - General",3,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR73.7-80.8 - Early and medieval:DR70-73 - Military and political history.  Foreign relations",3,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR901-998 - Albania:DR927-978.52 - History:DR954-978.52 - By period:DR969.8-978.52 - 20th century:DR961-969 - 1501-1912.  Turkish rule",3,"D - World History:DT - Africa:DT1001-1190 - Southern Africa:DT1190 - Local history and description",3,"D - World History:DT - Africa:DT181-346 - Maghrib.  Barbary States:DT241-269 - Tunisia (Tunis):DT253-253.2 - Ethnography",3,"D - World History:DT - Africa:DT2831-2864 - British Central Africa.  Federation of Rhodesia and Nyasaland",3,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT450-450.49 - Rwanda.  Ruanda-Urundi:DT450.24-450.25 - Ethnography",3,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.3-546.39 - Central African Republic.  Central African Empire. Ubangi-Shari:DT546.342-546.345 - Ethnography",3,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT554-554.9 - Mauritania:DT554.42-554.45 - Ethnography",3,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa:DT613-613.9 - Guinea-Bissau.  Portuguese Guinea:DT613.42-613.45 - Ethnography",3,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT591-615.9 - Portuguese-speaking West Africa:DT615-615.9 - Sao Tome and Principe:DT615.5-615.8 - History",3,"E-F - History of the Americas:E151-909 - United States:E300-453 - Revolution to the Civil War, 1775/1783-1861:E303-440.5 - By period:E337.8-400 - Early nineteenth century, 1801/1809-1845:E341-370 - Madison's administrations, 1809-1817:E365 - War with Algeria, 1815",3,"E-F - History of the Americas:E151-909 - United States:E740-837.7 - Twentieth century:E751 - McKinley's second administration, March 4-September 14, 1901",3,"E-F - History of the Americas:F1-975 - United States - Regional:F965 - The territories of the United States (General)",3,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F2001-2151 - Lesser Antilles:F2011 - Windward Islands",3,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1580 - Reclamation of agricultural land.  Melioration",3,"H - Social Sciences:HF - Commerce:HF5001-6182 - Business:HF5460-5469.5 - Department stores.  Mail order business. Supermarkets.  Convenience stores:HF5446-5459 - Canvassing.  Peddling",3,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV8760 - Arab countries",3,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3840-4375 - Regulation of industry, trade, and commerce.  Occupational law:K3926-3935 - Food processing industries:K3921-3925 - Manufacturing industries",3,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7222 - Trust and trustees",3,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7340-7512 - Commercial law:K7470 - Insurance",3,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7550-7582 - Intellectual property:K7555-7557 - Copyright",3,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB531-619 - Domestic relations. Family law",3,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM1468-1547 - Social laws and legislation",3,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3190-3436 - Economic law",3,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM632-636.2 - Inheritance and succession",3,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3000-3037 - Police and public safety",3,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR22 - Monographic series",3,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3184-3256 - Other acts of divine worship. De ceteris actibus Cultus Divini",3,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGJ7001-7499 - Anguilla",3,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGT1001-1499 - Martinique",3,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGY1-499 - Turks and Caicos Islands",3,"K - Law:KL - History of Law in the Ancient Orient:KL5300-5599 - Persia",3,"K - Law:KL - History of Law in the Ancient Orient:KL700-2215 - Mesopotamia.  Assyro-Babylonian law:KL1000-1299 - Sumer",3,"K - Law:KLA-KLW - Eurasia:KLD - Armenian S.S.R. (to 1991)",3,"K - Law:KQ-KTZ - Africa:KQP1-499 - British Indian Ocean Territory",3,"K - Law:KU-KUN - Australia:KUN499.2-999.24 - External territories",3,"K - Law:KU-KUN - Australia:KUN499.2-999.24 - External territories:KUN501-599 - Norfolk Island",3,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWL1-499 - Pitcairn Island",3,"K - Law:KZ - Law of nations:KZ1329-3085 - Early/Medieval development to ca. 1900.  Ius Naturae et Gentium:KZ1373-1387.2 - American Civil War to the First Conference of the Hague (1861-1899)",3,"K - Law:KZD - Space Law, Law of Outer Space:KZD1340-1400 - Concepts and principles.  Theory:KZD1390-1400 - Regulated use theory",3,"K - Law:KZD - Space Law, Law of Outer Space:KZD1410 - The source of the law of space",3,"K - Law:KZD - Space Law, Law of Outer Space:KZD5614-6715 - Un-peaceful uses of outer space:KZD5648-5680.2 - Disarmament and demilitarization regimes in outer space",3,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF3248-3897 - Italy:LF3211-3247 - Greece",3,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4443-4444 - Latvia",3,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG338 - Iraq",3,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG431-438 - Natal",3,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG468 - Tanzania",3,"M - Music:M - Music:M5000 - Unidentified compositions",3,"N - Fine Arts:NB - Sculpture:NB1120-1133 - Study and teaching",3,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE970-973 - Study and teaching",3,"N - Fine Arts:NE - Print Media:NE1400-1879 - Metal engraving:NE1400-1422 - General",3,"P - Language & Literature:PH - Uralic & Basque Languages:PH501-1109 - Other Finnic languages and dialects:PH551-559 - Ingrian",3,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4186-4199 - Folk literature:PQ4001-4199.5 - History and criticism:PQ4161-4185 - Prose",3,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7001-7099 - Scandinavian literature:PT7090-7099 - Collections:PT7088-7089 - Folk literature",3,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8650-8733 - Collections:PT8699-8718 - Drama",3,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9201-9499 - Literary history and criticism:PT9415-9449 - Drama",3,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9547-9639 - Collections:PT9605-9625 - Drama",3,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB446-446.6 - Horticultural service industry",3,"S - Agriculture:SB - Plant Culture:SB403-450.87 - Flowers and flower culture.  Ornamental plants:SB447 - Preservation and reproduction of flowers, fruits, etc.:SB447.5 - Bonkei.  Tray landscapes",3,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH334.9-336.5 - Fishery processing:SH334 - Economic aspects.  Finance",3,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH387 - Porpoises.  Dolphins",3,"T - Technology:TX - Home Economics:TX1110 - Recreational vehicle living",3,"U - Military Science:UD - Infantry:UD340-345 - Bayonet drill",3,"U - Military Science:UD - Infantry:UD470-475 - Ski troops",3,"U - Military Science:UF - Artillery:UF460-465 - Siege artillery",3,"U - Military Science:UF - Artillery:UF470-475 - Howitzer artillery.  Mortar batteries",3,"V - Naval Science:V - Naval Science (General):V66-69 - Navy clubs",3,"V - Naval Science:VD - Naval Seamen:VD330-335 - Shooting",3,"V - Naval Science:VF - Naval Ordnance:VF310-315 - Target practice",3,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z116-659 - Book industries and trade:Z231-234 - Printers and printing establishments:Z234 - Medallic history of printing.  Tokens",3,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4550-4575 - Motion pictures. Video recordings",3,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4650-4675 - Pictures. Photographs",3,"A - General:AY - Yearbooks, Almanacs, Directories:AY2001 - Directories",2,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL2670 - Arctic regions",2,"B - Philosophy, Psychology, Religion:BP - Islam, Bahai Faith, Theosophy, etc.:BP1-253 - Islam:BP191-253 - Branches, sects, etc.:BP232 - Moorish Science Temple of America",2,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ5725-5845 - Folklore:BQ5821-5845 - Miracle literature",2,"B - Philosophy, Psychology, Religion:BQ - Buddhism:BQ800-829 - Persecutions",2,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV5-530 - Worship (Public and private):BV200 - Family worship",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX4929-4951 - Post-Reformation:BX4950-4951 - Plain People",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5011-5207 - Church of England:BX5127-5129.8 - Church of England and other churches:BX5115-5126 - Special parties and movements",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5996-6030 - Protestant Episcopal Church outside the United States:BX5800-5995 - Protestant Episcopal Church in the United States of America",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6337 - Service.  Ritual.  Liturgy",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6337 - Service.  Ritual.  Liturgy:BX6335-6336 - Creeds.  Catechisms",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6340-6346.3 - Government.  Discipline:BX6338-6339 - Sacraments",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX7580-7583 - Free Congregations (Germany).  Freie Gemeinden",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9887 - United Evangelical Church",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9887 - United Evangelical Church:BX9884-9886 - United Church of Christ",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX2312 - Images",2,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX847 - Atlases",2,"C - Historical Sciences (Archaeology, Genealogy):CR - Heraldry:CR91-93 - Shields and supporters",2,"D - World History:DA-DR - Europe:DF - Greece:DF701-951 - Modern Greece:DF720.5-728 - Description and travel:DF701-720 - General",2,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ190-191 - War with France, 1672-1678",2,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ196-199.2 - Stadtholders, 1702-1747",2,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ205-206 - Anglo-Dutch War, 1780-1784",2,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK921-929.5 - Tajikistan.  Tajik S.S.R.  Tadzhikistan:DK929.2-929.39 - Dushanbe",2,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL701-719.9 - Vasa dynasty, 1523-1654.  Gustaf II Adolf, 1611-1632:DL710-712 - Wars with Denmark, Russia, Poland",2,"D - World History:DA-DR - Europe:DR - Balkan Peninsula:DR51-98 - Bulgaria:DR65-93.47 - History:DR73.7-93.47 - By period:DR73.7-80.8 - Early and medieval:DR79-79.25 - Greek rule, 1018-1185",2,"D - World History:DT - Africa:DT2701-2825 - Swaziland:DT2744-2746 - Ethnography",2,"D - World History:DT - Africa:DT2701-2825 - Swaziland:DT2754-2806 - History",2,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT521-555.9 - French West Africa.  French Sahara.  West Sahara.  Sahel:DT546.1-546.49 - French-speaking Equatorial Africa:DT546.1-546.19 - Gabon (Gaboon, Gabun):DT546.142-546.145 - Ethnography",2,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT619-620.9 - Spanish West Africa:DT620-620.9 - Equatorial Guinea (Spanish Guinea):DT620.42-620.45 - Ethnography",2,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV1199-1570 - Games and amusements:GV1564-1565 - Darts",2,"G - Geography, Anthropology, Recreation:GV - Recreation, Leisure:GV191.2-200.66 - Outdoor life.  Outdoor recreation:GV191.68-198.975 - Camping:GV198.945-198.975 - Farm vacations, dude ranches, etc.",2,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture:HD1549 - Gleaning",2,"H - Social Sciences:HG - Finance:HG8011-9999 - Insurance:HG8751-9295 - Life insurance:HG9271 - Child insurance.  Life insurance for children",2,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1201-1350 - Knights of Pythias",2,"H - Social Sciences:HS - Societies (Secret, Benevolent, etc.):HS1501-2460.7 - Other societies.  By classes:HS2275 - Occupation societies",2,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV9029-9036 - Atlantic Ocean islands",2,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3154-3370 - Constitutional law:K3195 - National territory",2,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7090 - Juristic acts",2,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7120-7197 - Persons:K7145-7148 - Juristic persons.  Associations",2,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB160 - General works.  Treatises",2,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB1572-1690 - Courts and procedure",2,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB3790-4855 - Criminal law and procedure",2,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB524-530 - Persons",2,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB632-636.2 - Inheritance and succession",2,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM2000-2024 - Public law. The state and the Jewish community. Kehillah",2,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3124-3125 - Birth control. Family planning",2,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3127-3134 - Environmental law",2,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3137-3183 - Cultural affairs",2,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM524 - General works:KBM524.5 - Assistance in emergencies",2,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP100-136.8 - Sources",2,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP470 - Law reform. Criticism. Tanzim",2,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP480-485 - Conflict of laws. Tanazuâ€™ al-qawanin",2,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3124-3125 - Birth control. Family planning",2,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR105.A-Z - Formularies. Clauses and forms. Formularia",2,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR27-41.7 - Official acts of the Holy See",2,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR56 - Encyclopedias. Law dictionaries. Terms and phrases. Vocabularia",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU150 - Conferences. Symposia",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU180.A-Z - Works on diverse aspects of a particular subject and falling within several branches of the law. By subject, A-Z",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU195-1565 - Collections. Compilations. Selections",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2-19 - Bibliography",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2155-2157 - Canon law and other disciplines or subjects",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2207 - Law reform and policies. Criticism",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU26.8-41.5 - Official acts of the Holy See",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3040-3070 - The teaching office of the Church. Magisterium. De ecclesiae munere docendi",2,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU56 - Encyclopedias",2,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGL3001-3499 - British Leeward Islands",2,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGR1-499 - Dutch Leeward Islands (General)",2,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGR3001-3499 - French West Indies (General)",2,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGT2001-2499 - Montserrat",2,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGW3001-3499 - Saint Lucia",2,"K - Law:KQ-KTZ - Africa:KRS - French West Africa",2,"K - Law:KQ-KTZ - Africa:KRY - Gibraltar",2,"K - Law:KZ - Law of nations:KZ1329-3085 - Early/Medieval development to ca. 1900.  Ius Naturae et Gentium:KZ1345-1369 - French Revolution to the American Civil War (1789-1861)",2,"L - Education:LC - Special Aspects of Education:LC1390-5160.3 - Education of special classes of persons:LC2580-2582 - Student-athletes",2,"L - Education:LC - Special Aspects of Education:LC6691 - Traveling educational exhibits",2,"L - Education:LC - Special Aspects of Education:LC980-1099.5 - Types of education:LC1001-1024 - Humanistic education.  Liberal education:LC1022-1022.25 - Computer-assisted education",2,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG291 - Iran",2,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG451 - Orange Free State",2,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG481-505 - West Africa:LG497-499 - Ghana",2,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1350-1352 - Other materials used in relief printing",2,"P - Language & Literature:PD - Germanic Languages:PD1501-7159 - North Germanic.  Scandinavian:PD6000-7159 - Scandinavian dialects, Modern",2,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG2900-3190 - History and criticism:PG3100-3155 - Folk literature (incl texts):PG3091-3099 - Prose",2,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3300-3493.96 - Individual authors and works:PG3320-3447 - 1800-1870:PG3310-3319 - 18th century",2,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ2340-2399 - Libyco-Berber languages.  Berber languages:PJ2353-2367 - Libyan group",2,"P - Language & Literature:PJ - Oriental Philology and Literature:PJ5901-5909 - South Semitic languages",2,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK6001-6996 - Iranian philology and literature:PK6201-6599.7 - New Persian:PK6400-6599.7 - Literature:PK6450.9-6562.35 - Individual authors or works:PK6475 - Ibn Yamn, Fakhr al-Dn Mamd",2,"P - Language & Literature:PM - Hyperborean, Indian, & Artificial Languages:PM8999 - Picture languages",2,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6130-6140 - Letters:PN6121-6129 - Orations",2,"P - Language & Literature:PN - Literature (General):PN6010-6790 - Collections of general literature:PN6309-6318 - Mottoes:PN6299-6308 - Maxims",2,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5400-5547 - Collections:PT5410-5414 - Translations:PT5400-5409 - General",2,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5555-5881.36 - Individual authors or works:PT5881-5881.36 - 1961-2000:PT5800-5880 - 1800-1960",2,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6000-6467.36 - Flemish literature since 1830:PT6200-6230 - Folk literature",2,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT6500-6593.36 - Afrikaans literature:PT6580 - Local",2,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT9000-9094 - Landsmaal or New Norwegian:PT9000-9019 - Literary history and criticism",2,"R - Medicine:RE - Ophthalmology:RE89 - Eye banks",2,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH364 - Sea otter",2,"T - Technology:TS - Manufactures:TS2284-2288 - Animal feeds and feed mills.  Pet food industry",2,"U - Military Science:U - Military Science (General):U300-305 - Artillery and rifle ranges",2,"U - Military Science:UA - Armies (Organization, Distribution, Military Situation):UA950-979 - Routes of travel.  Distances",2,"U - Military Science:UB - Military administration:UB273-274 - Sabotage",2,"U - Military Science:UD - Infantry:UD320-325 - Manual of arms",2,"U - Military Science:UD - Infantry:UD460-464 - Mountain troops",2,"U - Military Science:UE - Cavalry, Armor:UE147 - Armored cavalry",2,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG622-1435 - Air forces.  Air warfare:UG1097 - Air bases",2,"V - Naval Science:VB - Naval Administration:VB307-309 - Warrant officers",2,"V - Naval Science:VD - Naval Seamen:VD360-390 - Small arms",2,"V - Naval Science:VD - Naval Seamen:VD400-405 - Small boat service",2,"V - Naval Science:VE - Marines:VE330-335 - Shooting",2,"Z - Bibliography, Library Science, Information Resources:ZA - Information Resources:ZA4050-4775 - Information in specific formats or media:ZA4750-4775 - Sound recordings",2,"A - General:AC - Collections, Series, Collected works:AC200 - Collections for Jewish readers",1,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1801-2195 - Social usages.  Etiquette:BJ2139-2156 - Etiquette of travel",1,"B - Philosophy, Psychology, Religion:BJ - Ethics:BJ1801-2195 - Social usages.  Etiquette:BJ2195 - Telephone etiquette",1,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1600-1695 - Semitic religions:BL1675 - Moabite.  Philistine",1,"B - Philosophy, Psychology, Religion:BL - Religions, Mythology, Rationalism:BL660-2680 - History and principles of religions:BL1000-2370 - Asian.  Oriental:BL1710 - Ethiopian",1,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4000-4470 - Pastoral theology:BV4019-4180 - Education:BV4168-4180 - Training for lay workers",1,"B - Philosophy, Psychology, Religion:BV - Practical Theology:BV4485-5099 - Practical religion.  The Christian life:BV4912-4950 - Conversion literature:BV4900-4911 - Works of consolation and cheer",1,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX5596-5598 - Church in Wales:BX5410-5595 - Church of Ireland",1,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6338-6339 - Sacraments",1,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX6201-6495 - Baptists:BX6338-6339 - Sacraments:BX6337 - Service.  Ritual.  Liturgy",1,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX4800-9999 - Protestantism:BX6101-9999 - Other Protestant denominations:BX9975 - Volunteers of America",1,"B - Philosophy, Psychology, Religion:BX - Christian Denominations:BX800-4795 - Catholic Church:BX4716.4-4795 - Dissenting sects other than Protestant:BX4793.5-4794.25 - Independent Catholic Churches",1,"C - Historical Sciences (Archaeology, Genealogy):CC - Archaeology:CC960 - Lanterns of the dead",1,"C - Historical Sciences (Archaeology, Genealogy):CD - Diplomatics, Archives, Seals:CD1-511 - Diplomatics:CD87 - Forgeries of documents",1,"D - World History:D - History (General):D890-893 - Eastern Hemisphere",1,"D - World History:DA-DR - Europe:DF - Greece:DF10-289 - Ancient Greece:DF207-241 - History:DF220-241 - By period:DF230.9-231.9 - Spartan and Theban supremacies, 404-362 B.C.:DF229-230 - Peloponnesian War, 431-404 B.C.",1,"D - World History:DA-DR - Europe:DJ - Netherlands (Holland):DJ95-292 - History:DJ151-292 - By period:DJ154-210 - 1555-1795.  United provinces:DJ208-209 - War with France, 1793-1795",1,"D - World History:DA-DR - Europe:DJK - Eastern Europe (General):DJK61-77 - Local history and description:DJK77 - Pannonia",1,"D - World History:DA-DR - Europe:DK - Russia, Soviet Union, Former Soviet Republics:DK501-949.5 - Local history and description:DK680-689.5 - Armenia (Republic).  Armenian S.S.R.:DK689.2-689.39 - Yerevan.  Erevan",1,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL1002-1180 - Finland:DL1024-1141.6 - History:DL1050-1141.6 - By period:DL1050-1052.9 - Early to 1523",1,"D - World History:DA-DR - Europe:DL - Northern Europe, Scandinavia:DL601-991 - Sweden:DL643-879 - History:DL660-879 - By period:DL701-879 - Modern, 1523-:DL747-805 - 1718-1818:DL805 - Union with Norway, 1814",1,"D - World History:DA-DR - Europe:DQ - Switzerland:DQ51-210 - History:DQ78-210 - By period:DQ78-110 - Early and medieval to 1516:DQ85-87 - 687-1291.  Carolingian and German rule",1,"D - World History:DT - Africa:DT1251-1465 - Angola:DT1450-1465 - Local history and description",1,"D - World History:DT - Africa:DT154.1-159.9 - Sudan.  Anglo-Egyptian Sudan:DT159.6-159.9 - Local history and description",1,"D - World History:DT - Africa:DT2541-2686 - Lesotho.  Basutoland:DT2592-2596 - Ethnography",1,"D - World History:DT - Africa:DT2701-2825 - Swaziland:DT2820-2825 - Local history and description",1,"D - World History:DT - Africa:DT3161-3257 - Malawi.  Nyasaland:DT3252-3257 - Local history and description",1,"D - World History:DT - Africa:DT365-469 - Eastern Africa:DT411-411.9 - Djibouti.  French Territory of the Afars and Issas.  French Somaliland:DT411.42-411.45 - Ethnography",1,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT479 - Lower Guinea",1,"D - World History:DT - Africa:DT470-671 - West Africa.  West Coast:DT641-665 - Zaire.  Congo (Democratic Republic).  Belgian Congo:DT650.2-663 - History:DT649.5-650 - Ethnography",1,"D - World History:DU - Oceania (South Seas):DU80-398 - Australia:DU391 - Northern Australia",1,"E-F - History of the Americas:F1-975 - United States - Regional:F975 - Central American, West Indian, and other countries protected by and having close political affiliations with the United States (General)",1,"E-F - History of the Americas:F1201-3799 - Latin America. Spanish America:F1741-1991 - Greater Antilles:F1991 - Navassa",1,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1100-1779 - America.  Western Hemisphere:G1105-1692 - North America:G1110-1114 - Greenland",1,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G1100-3102 - By region or country:G1780-2799 - Eastern Hemisphere.  Eurasia, Africa, etc.:G2740-2799 - Australasia:G2445-2739 - Africa",1,"G - Geography, Anthropology, Recreation:G - Geography (General):G1000-3122 - Atlases:G3122 - Atlases of imaginary, literary, and mythological regions, etc., A-Z",1,"G - Geography, Anthropology, Recreation:GT - Manners & Customs:GT485 - Churches and church going",1,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE380.8-560 - Waterways:HE331-380 - Traffic engineering.  Roads and highways. Streets",1,"H - Social Sciences:HE - Transportation & Communications:HE380.8-971 - Water transportation:HE380.8-560 - Waterways:HE331-380 - Traffic engineering.  Roads and highways. Streets:HE379-380 - Tunnels.  Vehicular tunnels",1,"H - Social Sciences:HQ - The Family, Marriage, Women:HQ503-1064 - The family.  Marriage.  Home:HQ802 - Matrimonial bureaus.  Marriage brokerage:HQ802.5 - Matrimonial advertisements",1,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV7231-9960 - Criminal justice administration:HV7551-8280.7 - Police.  Detectives.  Constabulary:HV8081-8099 - Private detectives.  Detective bureaus:HV8031-8080 - Police duty.  Methods of protection",1,"J - Political Science:JN - Political Institutions (Europe):JN7370-7379 - Greenland",1,"J - Political Science:JS - Local & Municipal Government:JS171 - Legislative branch",1,"J - Political Science:JS - Local & Municipal Government:JS6950-7520 - Asia:JS7510 - Arab countries",1,"J - Political Science:JS - Local & Municipal Government:JS7820-7827.9 - Atlantic Ocean islands",1,"J - Political Science:JV - Colonies & Colonization, Emigration & Immigration:JV6001-9480 - Emigration and immigration.  International migration:JV9040-9047 - Indian Ocean islands",1,"J - Political Science:JZ - International relations:JZ6530 - Humanitarian aspects of war",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K3651-3654 - Alcohol.  Alcoholic beverages",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K7000-7720 - Private international law.  Conflict of laws:K7720 - Recognition of foreign administrative acts",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB150 - Conferences.  Symposia",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB270-280 - Theory, philosophy, and science of religious law",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB2101-2862 - Constitutions and religion. Constitutional and  administrative law",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB3098-3121.7 - Medical legislation",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB479 - Private law (General)",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB480-482 - Private international law. Conflict of laws",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB400-4855 - Interdisciplinary discussion of subjects:KB810-962.8 - Obligations. Contracts and transactions",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB73 - Collections.  Compilations (General and comprehensive)",1,"K - Law:KB-KBU - Religious Law:KB - Religious law (general) - comparative, jurisprudence:KB90 - Encyclopedias.  Law dictionaries.  Terms and phrases. Vocabularies.",1,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM3738-3785 - Community defense. Military law",1,"K - Law:KB-KBU - Religious Law:KBM - Jewish law.  Halakah:KBM523.8-4855 - Mishpat Ivri:KBM524.6-530 - Persons:KBM524 - General works",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP41 - Legal research",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP1155-1194 - Intellectual and industrial property",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP1270-1467 - Labor laws and legislation",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP1468-1569 - Social laws and legislation",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3123-3123.5 - Animal protection. Animal welfare. Animal rights:KBP3122 - Veterinary medicine and hygiene. Veterinary public health",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3137-3183.3 - Cultural affairs",1,"K - Law:KB-KBU - Religious Law:KBP - Islamic law. SharÄ«Ê»ah.  Fiqh:KBP490-4860 - Furu' al-fiqh. Substantive law. Branches of law:KBP3440-3512 - Transportation and communication",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR133-134 - Legal education. Study and teaching",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2207 - Law reform and policies. Criticism",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2207 - Law reform and policies. Criticism:KBR2208.A-Z - General concepts and principles, A-Z",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR2224-2295 - Ius ecclesiasticum privatum",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR3264-3280 - Social work of the Church. Public welfare. Caritas",1,"K - Law:KB-KBU - Religious Law:KBR - History of canon law:KBR3320-3460 - Church property. Church economics and finance. Administration",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2207 - Law reform and policies. Criticism:KBU2205-2206 - Influence of other legal systems on canon law",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU2207 - Law reform and policies. Criticism:KBU2208.A-Z - Concepts applying to several branches of the law, A-Z",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU25-26 - Official gazette of the Holy See",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3264-3280 - Social work of the Church. Public welfare. Caritas",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU3282-3310 - Medical ethics and legislation. Church policy",1,"K - Law:KB-KBU - Religious Law:KBU - Law of the Roman Catholic Church. The Holy See:KBU56 - Encyclopedias:KBU56.5 - Dictionaries. Terms and phrases. Vocabularies",1,"K - Law:KD-KDK - The United Kingdom and Ireland:KD51-9500 - England and Wales:KD9320-9355 - Local laws of Wales",1,"K - Law:KG-KGZ - Latin and Central America & the Caribbean:KGJ-KGZ - West Indies. Caribbean area:KGK1001-1499 - Aruba",1,"K - Law:KHA-KHW - South America:KHM - French Guiana",1,"K - Law:KM-KPW - Asia:KN-KPW - South Asia.  Southeast Asia.  East Asia:KNY - Cities, etc.",1,"K - Law:KQ-KTZ - Africa:KRR - French Equatorial Africa",1,"K - Law:KQ-KTZ - Africa:KSG1-499 - Italian East Africa",1,"K - Law:KU-KUN - Australia:KUN3001-3050 - Cities, communities, etc.",1,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVH1001-1499 - British New Guinea (Territory of Papua)",1,"K - Law:KV-KWW - Pacific Area Jurisdictions:KVP1-100 - French Polynesia",1,"K - Law:KV-KWW - Pacific Area Jurisdictions:KWA - Niue",1,"K - Law:KZA - Law of the Sea:KZA3481-3900 - Marine resources conservation and development",1,"K - Law:KZD - Space Law, Law of Outer Space:KZD3489-4406 - Peaceful uses of outer space:KZD4030-4326 - Public order in space and outer space:KZD4320.2-4326 - Rescue operations in outer space",1,"L - Education:LC - Special Aspects of Education:LC8-59 - Forms of education:LC15 - Conversation and culture",1,"L - Education:LE - Individual Educational Institutions (America (except U.S.)):LE21-78 - South America:LE51-59 - Guianas",1,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF1550-1550.8 - Slovakia",1,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4069 - Luxembourg",1,"L - Education:LF - Individual Educational Institutions (Europe, Africa, Oceania):LF4445-4446 - Lithuania:LF4443-4444 - Latvia",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG185-187 - Papua-New Guinea (Ter.)",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG331-331.5 - Armenia (Republic)",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG358 - Qatar",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG359 - Saudi Arabia",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG21-395 - Asia:LG370 - Yeman (Yemen Arab Republic)",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG416 - Botswana",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG441-443 - Malawi",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG469 - Zambia",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG513-514 - Sudan",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG581-593 - German Africa (Former)",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG631-632 - Morocco",1,"L - Education:LG - Individual Educational Institutions (Asia, Africa, Oceania):LG401-681 - Africa:LG681 - Libya",1,"M - Music:MT - Instruction and study:MT9-15 - Printed pedagogical aids:MT15 - Charts, diagrams, etc.",1,"M - Music:MT - Instruction and study:MT918-948 - School music:MT920-925 - Kindergarten",1,"M - Music:MT - Instruction and study:MT949.5 - Whistling",1,"N - Fine Arts:NC - Drawing, Design, Illustration:NC673-677 - Competitions",1,"N - Fine Arts:NC - Drawing, Design, Illustration:NC930 - Conservation and restoration of drawings",1,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE390-395 - Collected works",1,"N - Fine Arts:NE - Print Media:NE1-978 - Printmaking and engraving:NE975-975.4 - Competitions",1,"N - Fine Arts:NE - Print Media:NE1000-1352 - Wood engraving:NE1340 - Fish prints",1,"N - Fine Arts:NX - Arts in General:NX775-777 - Voluntarism in the arts",1,"P - Language & Literature:PB - Modern Languages, Celtic & Pict Languages:PB1001-3029 - Celtic languages and literature:PB1950 - Pict",1,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG2900-3698 - Russian literature:PG3651-3698 - Special subjects",1,"P - Language & Literature:PG - Slavic, Baltic, Albanian Languages, Russian Language & Literature:PG1-7925 - Slavic:PG771-799 - Bulgarian Church Slavic",1,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL8000-8844 - African languages and literature:PL8015-8021 - Languages.  By region or country:PL8009.5-8014 - Literature",1,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ4001-5999 - Italian literature:PQ4001-4199.5 - History and criticism:PQ4161-4185 - Prose:PQ4133-4160 - Drama",1,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9129 - Juvenile literature (General)",1,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9000-9129 - History and criticism:PQ9129 - Juvenile literature (General):PQ9121-9128 - Folk literature",1,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9131-9188 - Collections:PQ9131-9144 - General:PQ9137 - Translations",1,"P - Language & Literature:PQ - French, Italian, Spanish & Portuguese Literature:PQ9000-9999 - Portuguese literature:PQ9262-9288 - Individual authors, 1961-2000:PQ9261 - Individual authors, 1701-1960",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT5001-5980 - Dutch literature:PT5398 - Juvenile literature (General)",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7101-7338 - Old Norse literature (Old Icelandic and Old Norwegian):PT7101-7211 - Literary history and criticism:PT7177-7211 - Prose:PT7195-7211 - Scientific and learned literature",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT7935 - Juvenile literature (General)",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT7601-8260 - Danish literature:PT8050-8177.36 - Individual authors or works:PT8176-8176.36 - 1961-2000:PT8174-8175 - 1900-1960",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT8301-9155 - Norwegian literature:PT8750-8952.36 - Individual authors or works:PT8951-8951.36 - 1961-2000:PT8949-8950 - 1900-1960",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9547-9639 - Collections:PT9565-9570 - Translations",1,"P - Language & Literature:PT - Germanic & Scandinavian Literature:PT9201-9999 - Swedish literature:PT9650-9877.36 - Individual authors or works:PT9876-9876.36 - 1961-2000:PT9870-9875 - 1900-1960",1,"R - Medicine:RE - Ophthalmology:RE88 - Ophthalmic nursing",1,"R - Medicine:RK - Dentistry:RK60.7-60.8 - Preventive dentistry",1,"R - Medicine:RZ - Other Systems of Medicine:RZ399 - Osteo-magnetics, neuropathy, etc., A-Z",1,"S - Agriculture:SB - Plant Culture:SB109.7-111 - Methods for special areas:SB107-109 - Economic botany",1,"S - Agriculture:SH - Aquaculture, Fisheries, Angling:SH201-399 - Fisheries:SH396 - Sponge fisheries",1,"S - Agriculture:SK - Hunting Sports:SK281-293 - Special methods and types of hunting:SK293 - Ferreting",1,"T - Technology:TD - Environmental Technology, Sanitary Engineering:TD940-949 - Low temperature sanitary engineering",1,"T - Technology:TE - Highway Engineering, Roads & Pavements:TE279.5-298 - Pedestrian facilities:TE280-295 - Sidewalks.  Footpaths.  Flagging",1,"T - Technology:TS - Manufactures:TS2284-2288 - Animal feeds and feed mills.  Pet food industry:TS2220-2283 - Tobacco industry",1,"U - Military Science:U - Military Science (General):U45 - Historiography",1,"U - Military Science:UB - Military administration:UB420-425 - Furloughs",1,"U - Military Science:UD - Infantry:UD450-455 - Mounted infantry",1,"U - Military Science:UE - Cavalry, Armor:UE420-425 - Cavalry sword exercises",1,"U - Military Science:UG - Military Engineering, Air Forces, Military Astronautics:UG1-620 - Military engineering:UG340 - Tunnels",1,"V - Naval Science:VE - Marines:VE160-302 - Drill regulations",1,"V - Naval Science:VE - Marines:VE420-425 - Barracks, quarters, etc.",1,"V - Naval Science:VG - Minor Services of Navies:VG2020-2029 - Recreation and information service",1,"V - Naval Science:VG - Minor Services of Navies:VG500-505 - Public relations.  Press.  War  correspondents",1,"V - Naval Science:VK - Navigation, Merchant Marine:VK1250-1299 - Shipwrecks and fires:VK1299.5-1299.6 - Icebreaking operations",1,"V - Naval Science:VM - Naval Architecture, Shipbuilding, Marine engineering:VM295-296 - Contracts and specifications",1,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z1975 - Eastern Hemisphere",1,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z665-718.8 - Library science.  Information science:Z678.89-678.892 - Library service agencies",1],"collection":["Law Library",334450]},"facet_ranges":{},"facet_intervals":{},"facet_heatmaps":{}},"stats":{"stats_fields":{"pub_date_facet":{"min":600.0,"max":2020.0,"count":7897750,"missing":90664,"sum":1.54118497E10,"sumOfSquares":3.0128008102274E13,"mean":1951.4228356177393,"stddev":81.89817446120183}}}}

    http_version: 
  recorded_at: Thu, 18 Jul 2019 12:44:44 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=%22pl480%22&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&spellcheck.q=%22pl480%22&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 18 Jul 2019 12:44:47 GMT
      Last-Modified:
      - Thu, 18 Jul 2019 12:40:27 GMT
      Etag:
      - '"NmFjMzQ2MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr7.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '9315'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {"responseHeader":{"zkConnected":true,"status":0,"QTime":2060,"params":{"f.subject_content_facet.facet.limit":"6","f.fast_geo_facet.facet.limit":"6","f.lc_alpha_facet.facet.limit":"6","f.location.facet.sort":"index","f.online.facet.limit":"3","facet.query":["acquired_dt:[NOW-14DAY TO NOW-7DAY ]","acquired_dt:[NOW-30DAY TO NOW-7DAY ]","acquired_dt:[NOW-1YEAR TO NOW-7DAY]"],"defType":"edismax","spellcheck.q":"\"pl480\"","f.lc_callnum_facet.facet.sort":"count","stats":"true","f.fast_genre_facet.facet.limit":"6","wt":"json","f.format.facet.limit":"11","stats.field":"pub_date_facet","mm":"1","f.author_facet.facet.limit":"6","facet.field":["online","format","author_facet","pub_date_facet","workid_facet","language_facet","fast_topic_facet","fast_geo_facet","fast_era_facet","fast_genre_facet","subject_content_facet","lc_alpha_facet","location","hierarchy_facet","authortitle_facet","lc_callnum_facet","collection"],"qt":"search","f.lc_callnum_facet.facet.limit":"-1","sort":"score desc, pub_date_sort desc, title_sort asc","rows":"20","f.location.facet.limit":"101","q":"\"pl480\"","f.fast_era_facet.facet.limit":"6","f.fast_topic_facet.facet.limit":"6","facet":"true","f.language_facet.facet.limit":"6"}},"response":{"numFound":136,"start":0,"maxScore":1275501.0,"docs":[{"author_display":"Gupta, S. C. (Sulekh Chandra), 1928-","title_display":"Freedom from foreign food","fulltitle_display":"Freedom from foreign food: pernicious effects of PL480","subtitle_display":"pernicious effects of PL480","pub_info_display":["Delhi, Blitz National Forum [1965]"],"pub_date_display":["[1965]"],"language_display":["English."],"id":"1460226","holdings_record_display":["{\"id\":\"1781500\",\"modified_date\":\"20130814090253\",\"copy_number\":null,\"callnos\":[\"HC435 .G98\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"2973172\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"1781500\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924013710334\",\"modify_date\":\"2013-06-16 16:55:40.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["11763953"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HC435 .G98\"}}","pub_date_facet":1965,"format":["Book"],"online":["At the Library"],"score":1275501.0},{"author_display":"Wenger, Paul N.","title_display":"Sri Lanka PL-480 food aid vulnerability assessment","fulltitle_display":"Sri Lanka PL-480 food aid vulnerability assessment","subtitle_display":"","pub_info_display":["Washington, DC : International Science and Technology Institute, [1991]"],"pub_date_display":["[1991]"],"language_display":["English."],"id":"2438893","holdings_record_display":["{\"id\":\"2926595\",\"modified_date\":\"20070131090714\",\"copy_number\":null,\"callnos\":[\"Oversize S471.S745 W47 1991 +\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"4331041\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2926595\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924074599477\",\"modify_date\":\"2004-07-26 10:56:40.0\",\"perm_location\":{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["63985865"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"Oversize S471.S745 W47 1991 +\"}}","pub_date_facet":1991,"format":["Book"],"online":["At the Library"],"score":1261515.0},{"title_display":"Selected multivolume monographic sets distributed by the Israel PL-480 project through October, 1970","fulltitle_display":"Selected multivolume monographic sets distributed by the Israel PL-480 project through October, 1970","subtitle_display":"","pub_info_display":["Tel-Aviv, Israel : Library of Congress, American Libraries Book Procurement Center, [1971?]"],"pub_date_display":["[1971?]"],"language_display":["English."],"id":"1683055","holdings_record_display":["{\"id\":\"2036184\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"++ Z3476 .S46\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin,anx\",\"number\":101,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"3272404\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2036184\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924063424919\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin,anx\",\"number\":101,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["63979710"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"++ Z3476 .S46\"}}","pub_date_facet":1971,"format":["Book"],"online":["At the Library"],"score":1156312.6},{"author_display":"Garst, Rachel.","title_display":"PL-480, título I.","fulltitle_display":"PL-480, título I : ayuda alimentaria, guerra y ajuste estructural en El Salvador","subtitle_display":"ayuda alimentaria, guerra y ajuste estructural en El Salvador","pub_info_display":["Albuquerque, NM : Resource Center ; [San Salvador, El Salvador : CINAS, Centro de Investigación y Acción Social], 1990."],"pub_date_display":["1990"],"language_display":["Spanish."],"id":"2109041","holdings_record_display":["{\"id\":\"2548097\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"Oversize HD1827 .P69 1990 +\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"3931202\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2548097\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924063693075\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["29496001"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin Library\":\"Oversize HD1827 .P69 1990 +\"}}","pub_date_facet":1990,"format":["Book"],"online":["At the Library"],"score":1119805.0},{"author_display":"DeVoretz, Don J., 1942-","title_display":"P.L. 480 and Southeast Asia","fulltitle_display":"P.L. 480 and Southeast Asia. Pt. I.","subtitle_display":"Pt. I.","pub_info_display":["[Madison? WI], 1965."],"pub_date_display":["1965"],"language_display":["English."],"id":"2558936","holdings_record_display":["{\"id\":\"3055060\",\"modified_date\":\"20070201090833\",\"copy_number\":null,\"callnos\":[\"Oversize Pamphlet HC 212 +\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"ech,anx\",\"number\":14,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"4467923\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"3055060\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924023585650\",\"modify_date\":\"2004-07-15 18:06:17.0\",\"perm_location\":{\"code\":\"ech,anx\",\"number\":14,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["63852173"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"Oversize Pamphlet HC 212 +\"}}","pub_date_facet":1965,"format":["Book"],"online":["At the Library"],"score":1081686.5},{"author_display":"Shenoy, Bellikoth Raghunath, 1908-","title_display":"PL 480 aid and India's food problem","fulltitle_display":"PL 480 aid and India's food problem","subtitle_display":"","pub_info_display":["New Delhi : Affiliated East-West Press, [1974]"],"pub_date_display":["[1974]"],"language_display":["English."],"id":"158104","holdings_record_display":["{\"id\":\"201680\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"HC60 .S54\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}","{\"id\":\"201681\",\"modified_date\":\"20120830082741\",\"copy_number\":null,\"callnos\":[\"HC60 .S54x 1974\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"sasa\",\"number\":122,\"name\":\"Kroch Library Asia\",\"library\":\"Kroch Library Asia\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"307910\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"201680\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924006027712\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}","{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"307911\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"201681\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924081428249\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"sasa\",\"number\":122,\"name\":\"Kroch Library Asia\",\"library\":\"Kroch Library Asia\"}}"],"oclc_id_display":["1913483"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin Library\":\"HC60 .S54\",\"Kroch Library Asia\":\"HC60 .S54x 1974\"}}","pub_date_facet":1974,"format":["Book"],"online":["At the Library"],"score":1079236.8},{"author_display":"Welsh, Joseph Rick.","title_display":"P.L. 480 Title I and market development","fulltitle_display":"P.L. 480 Title I and market development","subtitle_display":"","pub_info_display":["Washington, D.C. : U.S. Dept. of Agriculture, Foreign Agricultural Service, [1992]"],"pub_date_display":["[1992]"],"language_display":["English."],"id":"2186982","holdings_record_display":["{\"id\":\"2633838\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"HD9006 .W46 1992\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann\",\"number\":69,\"name\":\"Mann Library\",\"library\":\"Mann Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"4026566\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2633838\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924059261564\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mann\",\"number\":69,\"name\":\"Mann Library\",\"library\":\"Mann Library\"}}"],"oclc_id_display":["43748981"],"availability_json":"{\"available\":true,\"availAt\":{\"Mann Library\":\"HD9006 .W46 1992\"}}","pub_date_facet":1992,"format":["Book"],"online":["At the Library"],"score":1063220.4},{"author_display":"Rath, Nilakanth, 1929-","title_display":"Impact of assistance under P.L. 480 on Indian economy","fulltitle_display":"Impact of assistance under P.L. 480 on Indian economy","subtitle_display":"","pub_info_display":["Poona, Gokhale Institute of Politics and Economics; Bombay, New York, Asia Pub. House [1967]"],"pub_date_display":["[1967]"],"language_display":["English."],"id":"644959","holdings_record_display":["{\"id\":\"788160\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"HD9016.I42 .R23\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"1818322\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"788160\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924008895264\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["474696"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HD9016.I42 .R23\"}}","pub_date_facet":1967,"format":["Book"],"online":["At the Library"],"score":986294.06},{"title_display":"Taxonomic studies of Indian tabanids (Diptera : Tabanidae)","fulltitle_display":"Taxonomic studies of Indian tabanids (Diptera : Tabanidae) : final report of the work done in the PL-480 research project no. FG-IN-684 (IN-AES-328)","subtitle_display":"final report of the work done in the PL-480 research project no. FG-IN-684 (IN-AES-328)","pub_info_display":["Ludhiana, India : Dept. of Zoology, Punjab Agricultural University, [1990?]"],"pub_date_display":["[1990?]"],"language_display":["English."],"id":"2711402","holdings_record_display":["{\"id\":\"3223215\",\"modified_date\":\"20130703090512\",\"copy_number\":null,\"callnos\":[\"QL537.T25 T23 1990\"],\"notes\":[\"Part of original Comstock Memorial Library of Entomology (CMLE)\"],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"4633541\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"3223215\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924074117866\",\"modify_date\":\"2013-06-17 10:41:01.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["21880219"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"QL537.T25 T23 1990\"}}","pub_date_facet":1990,"format":["Book"],"online":["At the Library"],"score":939208.44},{"author_display":"Abdulrazak, Fawzi.","title_display":"Arabic historical writing, 1973","fulltitle_display":"Arabic historical writing, 1973 : an annotated bibliography of books received through PL-480, supplemented with a list of books in history from all parts of the Arab world","subtitle_display":"an annotated bibliography of books received through PL-480, supplemented with a list of books in history from all parts of the Arab world","pub_info_display":["Cambridge : Harvard University Library, 1974."],"pub_date_display":["1974"],"language_display":["English."],"id":"128402","holdings_record_display":["{\"id\":\"167301\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"+ Z3014.H55 A13\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin,anx\",\"number\":101,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"273177\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"167301\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924005816677\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin,anx\",\"number\":101,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["1207114"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"+ Z3014.H55 A13\"}}","pub_date_facet":1974,"format":["Book"],"online":["At the Library"],"score":939208.44},{"author_display":"Chaudhri, Saeed Ahmed.","title_display":"Agricultural research in Pakistan","fulltitle_display":"Agricultural research in Pakistan : bibliography of important PL 480 research publications","subtitle_display":"bibliography of important PL 480 research publications","pub_info_display":["[Washington, D.C.] : U.S. Dept. of Agriculture ; [Islamabad] : Pakistan Agricultural Research Council, [1986?]"],"pub_date_display":["[1986?]"],"language_display":["English."],"id":"2105797","holdings_record_display":["{\"id\":\"2544434\",\"modified_date\":\"20120111090233\",\"copy_number\":null,\"callnos\":[\"S471.P16 C49 1986\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"3927221\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2544434\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924059241012\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["20131891"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"S471.P16 C49 1986\"}}","pub_date_facet":1986,"format":["Book"],"online":["At the Library"],"score":837570.56},{"author_display":"Robert R. Nathan Associates.","title_display":"PL 480 Title II activities in El Salvador","fulltitle_display":"PL 480 Title II activities in El Salvador; a program evaluation","subtitle_display":"a program evaluation","pub_info_display":["Washington : Robert R. Nathan Associates, Inc., 1971."],"pub_date_display":["1971"],"language_display":["English."],"id":"5054125","holdings_record_display":["{\"id\":\"5577181\",\"modified_date\":\"20120223114327\",\"copy_number\":null,\"callnos\":[\"HC148 R63 1971\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"7226986\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"5577181\",\"recalls_placed\":\"0\",\"create_date\":\"2004-10-25 15:29:30.0\",\"item_barcode\":\"31924089472090\",\"modify_date\":\"2012-02-23 11:43:21.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["1408161"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HC148 R63 1971\"}}","pub_date_facet":1971,"format":["Book"],"online":["At the Library"],"score":837401.06},{"author_display":"Srivastava, Uma K.","title_display":"Impact of P.L. 480 aid on India's money supply and external debt-service obligations","fulltitle_display":"Impact of P.L. 480 aid on India's money supply and external debt-service obligations: a look ahead","subtitle_display":"a look ahead","pub_info_display":["Ames, Center for Agricultural and Rural Development, Iowa State University, 1972."],"pub_date_display":["1972"],"language_display":["English."],"id":"629456","holdings_record_display":["{\"id\":\"767556\",\"modified_date\":\"20090508073313\",\"copy_number\":null,\"callnos\":[\"HD1761 .I642 no.44\"],\"notes\":[\"Also cataloged as part of the serial: CARD report.\"],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"9617971\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"Bound with\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"767556\",\"recalls_placed\":\"0\",\"create_date\":\"2014-12-15 15:57:17.0\",\"item_barcode\":\"\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["669156"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HD1761 .I642 no.44\"}}","pub_date_facet":1972,"format":["Book"],"online":["At the Library"],"score":836422.7},{"author_display":"Coutsoumaris, George, 1915-","title_display":"Analysis and assessment of the economic effects of the U.S. PL 480 program in Greece","fulltitle_display":"Analysis and assessment of the economic effects of the U.S. PL 480 program in Greece","subtitle_display":"","pub_info_display":["Athens [Center of Planning and Economic Research] 1965."],"pub_date_display":["1965"],"language_display":["English."],"id":"1777851","holdings_record_display":["{\"id\":\"2178965\",\"modified_date\":\"20101112192605\",\"copy_number\":null,\"callnos\":[\"HC295 .C87\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}","{\"id\":\"2178966\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"HC295.C87 A5\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"3423764\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2178965\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924013908052\",\"modify_date\":\"2010-11-12 19:26:05.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}","{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"3423765\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2178966\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924026420327\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["432969"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HC295 .C87\",\"Olin Library\":\"HC295.C87 A5\"}}","pub_date_facet":1965,"format":["Book"],"online":["At the Library"],"score":835016.25},{"author_display":"Mehra, Pran Nath.","title_display":"Evaluation of 325 USDA funded projects under the PL 480 Program","fulltitle_display":"Evaluation of 325 USDA funded projects under the PL 480 Program","subtitle_display":"","pub_info_display":["New Delhi, India : U.S. Dept. of Agriculture, Far Eastern Regional Research Office, [1985?]"],"pub_date_display":["[1985?]"],"language_display":["English."],"id":"2190847","holdings_record_display":["{\"id\":\"2638096\",\"modified_date\":\"20130816090304\",\"copy_number\":null,\"callnos\":[\"S542.I4 M44x 1985\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"4031271\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"2638096\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924062819804\",\"modify_date\":\"2013-06-17 11:48:23.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["21908398"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"S542.I4 M44x 1985\"}}","pub_date_facet":1985,"format":["Book"],"online":["At the Library"],"score":827632.3},{"author_display":"Plocki, Joachim von.","title_display":"Auswirkungen der Nahrungsmittelhilfe unter P.L. 480 auf den Agrarsektor der Entwicklungsländer","fulltitle_display":"Auswirkungen der Nahrungsmittelhilfe unter P.L. 480 auf den Agrarsektor der Entwicklungsländer : dargestellt am Beispiel Indiens","subtitle_display":"dargestellt am Beispiel Indiens","pub_info_display":["Wiesbaden : Steiner, 1979."],"pub_date_display":["1979"],"language_display":["German, English."],"id":"565206","holdings_record_display":["{\"id\":\"685348\",\"modified_date\":null,\"copy_number\":null,\"callnos\":[\"HD9016.I42 P72\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"1709214\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"685348\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924008400008\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"sasa,anx\",\"number\":123,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["5893577"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HD9016.I42 P72\"}}","pub_date_facet":1979,"format":["Book"],"online":["At the Library"],"score":826953.94},{"author_display":"Sahn, David E.","title_display":"Principles and guidelines for the evaluation of P.L. 480 Title II (Food-for-Peace) programs and policies","fulltitle_display":"Principles and guidelines for the evaluation of P.L. 480 Title II (Food-for-Peace) programs and policies","subtitle_display":"","pub_info_display":["Ann Arbor, Mich. : Community Systems Foundation, 1981."],"pub_date_display":["1981"],"language_display":["English."],"id":"6320574","holdings_record_display":["{\"id\":\"6771478\",\"modified_date\":\"20120125090537\",\"copy_number\":null,\"callnos\":[\"HV696.F6 S34 1981\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"8349341\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"6771478\",\"recalls_placed\":\"0\",\"create_date\":\"2008-07-23 13:06:26.0\",\"item_barcode\":\"31924109610570\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["25319736"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HV696.F6 S34 1981\"}}","pub_date_facet":1981,"format":["Book"],"online":["At the Library"],"score":805551.06},{"author_display":"Foti, John A.","title_display":"A look at some of the operational and administrative problems involved in implementing P.L. 480, Title II, in South Vietnam","fulltitle_display":"A look at some of the operational and administrative problems involved in implementing P.L. 480, Title II, in South Vietnam","subtitle_display":"","pub_info_display":["1973."],"pub_date_display":["1973"],"language_display":["English."],"id":"3042467","holdings_record_display":["{\"id\":\"3576872\",\"modified_date\":\"20180126140554\",\"copy_number\":null,\"callnos\":[\"S418 1973 .F761\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"rmc,anx\",\"number\":203,\"name\":\"Kroch Library Rare & Manuscripts (Request in advance)\",\"library\":\"Kroch Library Rare & Manuscripts\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"nocirc\",\"item_id\":\"5021821\",\"year\":\"\",\"item_type_id\":\"9\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"3576872\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924073896049\",\"modify_date\":\"2018-01-26 14:05:54.0\",\"perm_location\":{\"code\":\"rmc,anx\",\"number\":203,\"name\":\"Kroch Library Rare & Manuscripts (Request in advance)\",\"library\":\"Kroch Library Rare & Manuscripts\"}}"],"oclc_id_display":["64652334"],"availability_json":"{\"available\":true,\"availAt\":{\"Kroch Library Rare & Manuscripts (Request in advance)\":\"S418 1973 .F761\"}}","pub_date_facet":1973,"format":["Book","Thesis"],"online":["At the Library"],"score":800229.25},{"title_display":"Study of interaction of factors such as variety and harvest temperature or other environmental conditions on the composition of the milling, baking, and rheological properties of wheat","fulltitle_display":"Study of interaction of factors such as variety and harvest temperature or other environmental conditions on the composition of the milling, baking, and rheological properties of wheat : PL-480 project, March  1974-April 1977 : final report","subtitle_display":"PL-480 project, March  1974-April 1977 : final report","pub_info_display":["Mysore, India : Flour Milling and Baking Technology Discipline, Central Food Technological Research Institute, [1977?]"],"pub_date_display":["[1977?]"],"language_display":["English."],"id":"273154","holdings_record_display":["{\"id\":\"331968\",\"modified_date\":\"20080903112657\",\"copy_number\":null,\"callnos\":[\"SB191.W5 S93\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"445166\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"331968\",\"recalls_placed\":\"0\",\"create_date\":\"2000-05-31 00:00:00.0\",\"item_barcode\":\"31924000655070\",\"modify_date\":\"2008-09-03 11:26:57.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["6479887"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"SB191.W5 S93\"}}","pub_date_facet":1977,"format":["Book"],"online":["At the Library"],"score":789792.5},{"title_display":"PL 480 Title II","fulltitle_display":"PL 480 Title II : a study of the impact of a food assistance program in the Philippines","subtitle_display":"a study of the impact of a food assistance program in the Philippines","pub_info_display":["[Washington, D.C.?] : Bureau for Asia, U.S. Agency for International Development, [1982]"],"pub_date_display":["[1982]"],"language_display":["English."],"id":"5040039","holdings_record_display":["{\"id\":\"5561970\",\"modified_date\":\"20120224113412\",\"copy_number\":null,\"callnos\":[\"HV696.F6 P57x 1982\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"7077703\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"5561970\",\"recalls_placed\":\"0\",\"create_date\":\"2004-04-02 11:56:01.0\",\"item_barcode\":\"31924089444172\",\"modify_date\":\"2012-02-24 11:34:06.0\",\"perm_location\":{\"code\":\"mann,anx\",\"number\":71,\"name\":\"Library Annex\",\"library\":\"Library Annex\"}}"],"oclc_id_display":["8937954"],"availability_json":"{\"available\":true,\"availAt\":{\"Library Annex\":\"HV696.F6 P57x 1982\"}}","pub_date_facet":1982,"format":["Book"],"online":["At the Library"],"score":753984.8}]},"facet_counts":{"facet_queries":{"acquired_dt:[NOW-1YEAR TO NOW-7DAY]":1},"facet_fields":{"online":["At the Library",134,"Online",2],"format":["Book",79,"Video",51,"Journal/Periodical",5,"Musical Recording",1,"Thesis",1],"author_facet":["LC Purchase Collection (Library of Congress)",51,"Panjab University. Botany Department",5,"Seden, Osman Fahir, 1924-1998",4,"Akdilek, Murat",3,"Aşan, Hülya",3,"Eğilmez, Ferdi",3],"pub_date_facet":["2000",16,"2007",10,"1970",7,"2006",7,"1965",6,"1969",6,"1992",6,"1962",4,"1963",4,"1971",4],"workid_facet":["1251416",1,"135521971",1,"2334091",1,"43418294",1,"477119867",1,"501717633",1,"54216723",1,"974428209",1],"language_facet":["English",84,"Arabic",19,"Turkish",17,"Spanish",11,"Urdu",6,"French",5],"fast_topic_facet":["Education",9,"Agriculture > Economic aspects",6,"Feature films",6,"Surplus agricultural commodities, American",6,"Food relief, American",4,"Agricultural assistance, American",3],"fast_geo_facet":["India",27,"Egypt",9,"Bolivia",8,"Pakistan",5,"Bangladesh",4,"Turkey",4],"fast_era_facet":["1914 - 1918",1,"1918-1974",1,"1986",1,"2000 - 2099",1,"Since 1982",1],"fast_genre_facet":["Drama",15,"Feature films",7,"History",6,"Fiction films",5,"Documentary television programs",4,"Nonfiction television programs",4],"subject_content_facet":["Non-Fiction (books)",79],"lc_alpha_facet":[],"location":["Bailey Hortorium",1,"Bailey Hortorium > Main Collection",1,"Kroch Library Asia",3,"Kroch Library Asia > Main Collection",3,"Kroch Library Rare & Manuscripts",2,"Kroch Library Rare & Manuscripts > Request in Advance",2,"Law Library",1,"Law Library > Main Collection",1,"Library Annex",70,"Mann Library",3,"Mann Library > Main Collection",3,"Music Library",2,"Music Library > A/V",2,"Olin Library",19,"Olin Library > Main Collection",19,"Uris Library",36,"Uris Library > Asia A/V",14,"Uris Library > Asia A/V > South Asia",13,"Uris Library > Main Collection",22],"hierarchy_facet":[],"authortitle_facet":["Chaudhri, Saeed Ahmed. | Agricultural research in Pakistan",2,"Abdulrazak, Fawzi. | Arabic historical writing, 1973",1,"Abū Ḥayyān al-Tawḥīdī, ʻAlī ibn Muḥammad, active 10th century. | ʼIlmulkitābat",1,"Agrawal, Binod C., 1942- | Women, television, and rural development",1,"Amerasinghe, A. Ranjit B. | Adultery as an injuria in South African and Ceylon law",1,"Atwal, A. S. | Biology, ecology and utilization of insects other than honeybees in the pollination of crops",1,"Bajoi, Abdul Hameed. | Final technical report",1,"Berger, Stanisław. | Studies on availability and mechanism of carotene and vitamin A utilization from different dietary sources and under different experimental conditions",1,"Bourchenin, Daniel. | Ètude sur les académies protestantes en France au XVIe et au XVIIe siècle",1,"Chaudhri, Wali M. | Studies on the predatory leaf inhabiting mites of Pakistan",1],"lc_callnum_facet":["H - Social Sciences",24,"S - Agriculture",20,"Q - Science",15,"L - Education",11,"H - Social Sciences:HD - Industries, Land use, Labor",10,"S - Agriculture:S - Agriculture (General)",9,"Q - Science:QK - Botany",8,"S - Agriculture:SB - Plant Culture",8,"L - Education:LA - History of education",7,"H - Social Sciences:HC - Economic History & Conditions",6,"L - Education:LA - History of education:LA410-2284 - Other regions or countries",6,"Q - Science:QK - Botany:QK504-638 - Cryptogams",6,"H - Social Sciences:HC - Economic History & Conditions:HC94-1085 - By region or country",5,"H - Social Sciences:HD - Industries, Land use, Labor:HD1401-2210 - Agriculture",5,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology",5,"P - Language & Literature",5,"D - World History",4,"K - Law",4,"Q - Science:QL - Zoology",4,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases",4,"Z - Bibliography, Library Science, Information Resources",4,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources",4,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades",3,"H - Social Sciences:HD - Industries, Land use, Labor:HD9000-9999 - Special industries and trades:HD9000-9495 - Agricultural industries",3,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV680-696 - Free professional services",3,"K - Law:KF-KFZ - The United States",3,"K - Law:KF-KFZ - The United States:KF - Federal law.  Common and collective state law",3,"Q - Science:QL - Zoology:QL360-599.82 - Invertebrates",3,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education",3,"S - Agriculture:S - Agriculture (General):S530-559 - Agricultural education:S539.5-542.3 - Research.  Experimentation",3,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB608 - Individual or types of plants or trees",3,"D - World History:DS - Asia",2,"H - Social Sciences:HG - Finance",2,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform",2,"H - Social Sciences:HN - Social History & Conditions, Problems & Reform:HN50-995 - By region or country",2,"H - Social Sciences:HV - Social Pathologym Social & Public Welfare, Criminology:HV5800-5840 - Drug habits.  Drug abuse",2,"L - Education:LB - Theory & Practice of Education",2,"L - Education:LB - Theory & Practice of Education:LB51-885 - Systems of individual educators and writers",2,"L - Education:LC - Special Aspects of Education",2,"P - Language & Literature:PN - Literature (General)",2,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama",2,"Q - Science:QH - Natural History, Biology",2,"Q - Science:QH - Natural History, Biology:QH1-278.5 - Natural history (General)",2,"Q - Science:QH - Natural History, Biology:QH1-278.5 - Natural history (General):QH1-199.5 - General (incl nature conservation, geographical distribution)",2,"Q - Science:QL - Zoology:QL360-599.82 - Invertebrates:QL461-599.82 - Insects",2,"S - Agriculture:S - Agriculture (General):S419-482 - History",2,"S - Agriculture:S - Agriculture (General):S590-599.9 - Soils.  Soil science",2,"S - Agriculture:SB - Plant Culture:SB183-317 - Field crops",2,"S - Agriculture:SF - Animal Culture",2,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography",2,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z1201-4980 - National bibliography:Z3001-3496 - Asia",2,"A - General",1,"A - General:AS - Academies & Learned Societies",1,"B - Philosophy, Psychology, Religion",1,"B - Philosophy, Psychology, Religion:B - Philosophy (General)",1,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period",1,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern",1,"B - Philosophy, Psychology, Religion:B - Philosophy (General):B108-5802 - By period:B790-5802 - Modern:B850-5739 - By region or country",1,"D - World History:D - History (General)",1,"D - World History:D - History (General):D501-680 - World War I (1914-1918)",1,"D - World History:DS - Asia:DS401-486.8 - India (Bharat)",1,"D - World History:DS - Asia:DS401-486.8 - India (Bharat):DS433-481 - History",1,"D - World History:DS - Asia:DS80-90 - Lebanon (Phenicia)",1,"D - World History:DS - Asia:DS80-90 - Lebanon (Phenicia):DS80.7-87.6 - History",1,"D - World History:DT - Africa",1,"D - World History:DT - Africa:DT43-154 - Egypt",1,"D - World History:DT - Africa:DT43-154 - Egypt:DT74-107.87 - History",1,"H - Social Sciences:HD - Industries, Land use, Labor:HD101-1395.5 - Land use, Land tenure",1,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class",1,"H - Social Sciences:HD - Industries, Land use, Labor:HD4801-8943 - Labor.  Work.  Working class:HD7255-7256 - Vocational rehabilitation.  Employment of people with disabilities",1,"H - Social Sciences:HG - Finance:HG178 - Liquidity",1,"H - Social Sciences:HG - Finance:HG201-1496 - Money",1,"H - Social Sciences:HG - Finance:HG201-1496 - Money:HG451-1496 - By region or country",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure",1,"K - Law:K - Law in general, Comparative and uniform law, Jurisprudence:K520-5582 - Comparative law.  International uniform law:K5000-5582 - Criminal law and procedure:K5015.4-5350 - Criminal law",1,"K - Law:KHA-KHW - South America",1,"K - Law:KHA-KHW - South America:KHC - Bolivia",1,"L - Education:LA - History of education:LA31-135 - By period",1,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education",1,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control",1,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education",1,"L - Education:LC - Special Aspects of Education:LC251-951 - Moral and religious education:LC321-951 - Religion and education.  Education under church control:LC361-629 - Christian education.  Church education:LC531-629 - Protestant",1,"L - Education:LC - Special Aspects of Education:LC5201-6660.4 - Education extension.  Adult education.  Continuing education",1,"M - Music",1,"M - Music:M - Music",1,"M - Music:M - Music:M1495-2199 - Vocal music",1,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music",1,"M - Music:M - Music:M1495-2199 - Vocal music:M1497-1998 - Secular vocal music:M1627-1853 - Folk, national and ethnic music",1,"N - Fine Arts",1,"N - Fine Arts:NK - Decorative Arts",1,"N - Fine Arts:NK - Decorative Arts:NK3600-9990 - Other arts and art industries",1,"P - Language & Literature:P - Philology & Linguistics",1,"P - Language & Literature:P - Philology & Linguistics:P87-96 - Communication.  Mass media",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures",1,"P - Language & Literature:PK - Indo-Iranian Philology and Literature:PK101-2899 - Indo-Aryan languages:PK1501-2899 - Modern Indo-Aryan languages:PK1550-2899 - Particular languages and dialects:PK1931-2212 - Hindi, Urdu, Hindustani languages and literatures:PK2151-2212 - Urdu literature",1,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania",1,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages",1,"P - Language & Literature:PL - Languages of Eastern Asia, Africa, Oceania:PL1-481 - Ural-Altaic languages:PL450-481 - Tungus Manchu languages",1,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1990-1992.92 - Broadcasting",1,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1990-1992.92 - Broadcasting:PN1992-1992.92 - Television broadcasts",1,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures",1,"P - Language & Literature:PN - Literature (General):PN1600-3307 - Drama:PN1993-1999 - Motion pictures:PN1997-1997.85 - Plays, scenarios, etc.",1,"Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams",1,"Q - Science:QK - Botany:QK474.8-495 - Spermatophyta.  Phanerogams:QK495 - Angiosperms",1,"Q - Science:QK - Botany:QK900-989 - Plant ecology",1,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates",1,"Q - Science:QL - Zoology:QL605-739.8 - Chordates.  Vertebrates:QL671-699 - Birds",1,"Q - Science:QP - Physiology",1,"Q - Science:QP - Physiology:QP501-801 - Animal biochemistry",1,"S - Agriculture:S - Agriculture (General):S671-760.5 - Farm machinery and farm engineering",1,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture",1,"S - Agriculture:SB - Plant Culture:SB354-402 - Fruit and fruit culture:SB387-399 - Grape culture.  Viticulture",1,"S - Agriculture:SB - Plant Culture:SB599-990.5 - Pests and diseases:SB818-945 - Economic entomology",1,"S - Agriculture:SD - Forestry",1,"S - Agriculture:SD - Forestry:SD131-247.5 - History of forestry.  Forest conditions",1,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine",1,"S - Agriculture:SF - Animal Culture:SF600-1100 - Veterinary medicine:SF781-809 - Communicable diseases of animals (General)",1,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z5051-7999 - Subject bibliography",1,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries",1,"Z - Bibliography, Library Science, Information Resources:Z - Bibliography, Library Science, Information Resources:Z662-1000.5 - Libraries:Z881-977 - Library catalogs and bulletins",1],"collection":["Law Library",1]},"facet_ranges":{},"facet_intervals":{},"facet_heatmaps":{}},"stats":{"stats_fields":{"pub_date_facet":{"min":1882.0,"max":2011.0,"count":135,"missing":1,"sum":267771.0,"sumOfSquares":5.31180597E8,"mean":1983.4888888888888,"stddev":21.1239648396617}}}}

    http_version: 
  recorded_at: Thu, 18 Jul 2019 12:44:49 GMT
recorded_with: VCR 4.0.0
