---
http_interactions:
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 14 May 2019 17:57:05 GMT
      Last-Modified:
      - Tue, 14 May 2019 17:56:43 GMT
      Etag:
      - '"ZjM1MTEyMDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr9.library.cornell.edu
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 14 May 2019 17:57:06 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?rows=10&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 15 May 2019 14:19:48 GMT
      Last-Modified:
      - Wed, 15 May 2019 14:19:44 GMT
      Etag:
      - '"YWU4YTYyMDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr8.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '3025'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: '{"responseHeader":{"zkConnected":true,"status":0,"QTime":994,"params":{"rows":"10","wt":"json"}},"response":{"numFound":8051109,"start":0,"maxScore":1.5185139,"docs":[{"author_display":"Vaughan,
        Elaine","title_display":"Community and Identity in Teacher Professional Talk:
        Applying Corpus Methodologies","fulltitle_display":"Community and Identity
        in Teacher Professional Talk: Applying Corpus Methodologies","subtitle_display":"","pub_info_display":["London
        Routledge 2020"],"pub_date_display":["2020"],"language_display":["English."],"id":"10429314","acquired_dt":"2018-07-26T00:00:00Z","holdings_record_display":["{\"id\":\"10731588\",\"modified_date\":\"20180726085224\",\"copy_number\":null,\"callnos\":[\"Available
        for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library
        Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1046544858"],"availability_json":"{\"available\":true,\"availAt\":{\"Library
        Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Baglione,
        Lisa A., 1962- author","title_display":"Writing a research paper in political
        science","fulltitle_display":"Writing a research paper in political science
        : a practical guide to inquiry, structure, and methods","subtitle_display":"a
        practical guide to inquiry, structure, and methods","pub_info_display":["Thousand
        Oaks, California : CQ Press, an Imprint of SAGE Publications, Inc., [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10602789","edition_display":["Fourth
        Edition."],"acquired_dt":"2019-02-21T00:00:00Z","holdings_record_display":["{\"id\":\"10900292\",\"modified_date\":\"20190221123650\",\"copy_number\":null,\"callnos\":[\"JA86
        .B24 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10630615\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"10900292\",\"recalls_placed\":\"0\",\"create_date\":\"2019-02-21
        12:42:50.0\",\"item_barcode\":\"31924126363724\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1049577395"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Olin
        Library\":\"JA86 .B24 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139},{"author_display":"Yin, Kun., author","title_display":"Design
        of Novel Biosensors for Optical Sensing and Their Applications in Environmental
        Analysis","fulltitle_display":"Design of Novel Biosensors for Optical Sensing
        and Their Applications in Environmental Analysis","subtitle_display":"","pub_info_display":["Singapore
        : Springer Singapore : Imprint: Springer, 2020."],"pub_date_display":["2020"],"language_display":["English."],"id":"10832037","url_access_display":["http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-981-13-6488-4|Full
        text available from SpringerLink ebooks - Earth and Environmental Science
        (Contemporary) Connect to text."],"url_access_json":["{\"providercode\":\"PRVAVX\",\"dbcode\":\"0D8\",\"description\":\"Full
        text available from SpringerLink ebooks - Earth and Environmental Science
        (Contemporary) Connect to text.\",\"ssid\":\"ssj0002135574\",\"url\":\"http://proxy.library.cornell.edu/login?url=https://link.springer.com/openurl?genre=book&isbn=978-981-13-6488-4\"}"],"acquired_dt":"2019-05-14T00:00:00Z","holdings_record_display":["{\"id\":\"11127410\",\"modified_date\":\"20190514145312\",\"copy_number\":null,\"callnos\":null,\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"serv,remo\",\"number\":128,\"name\":\"*Networked
        Resource\",\"library\":null}]}"],"availability_json":"{\"online\":true}","pub_date_facet":2020,"format":["Book"],"online":["Online"],"score":1.5185139},{"author_display":"Mio,
        Jeffery Scott, 1954- author","title_display":"Multicultural psychology","fulltitle_display":"Multicultural
        psychology : understanding our diverse communities","subtitle_display":"understanding
        our diverse communities","pub_info_display":["New York, New York : Oxford
        University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10746975","edition_display":["Fifth
        edition."],"acquired_dt":"2019-03-20T00:00:00Z","holdings_record_display":["{\"id\":\"11043368\",\"modified_date\":\"20190320073721\",\"copy_number\":null,\"callnos\":[\"HM1271
        .M555 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10641553\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11043368\",\"recalls_placed\":\"0\",\"create_date\":\"2019-03-20
        07:37:21.0\",\"item_barcode\":\"31924126190671\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1076461020"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin
        Library\":\"HM1271 .M555 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139},{"author_display":"Schwalbe, Michael, 1956-
        author","title_display":"Making a difference","fulltitle_display":"Making
        a difference : using sociology to create a better world","subtitle_display":"using
        sociology to create a better world","pub_info_display":["New York, NY : Oxford
        University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10752548","acquired_dt":"2019-03-27T00:00:00Z","holdings_record_display":["{\"id\":\"11049443\",\"modified_date\":\"20190327104646\",\"copy_number\":null,\"callnos\":[\"HM585
        .S377 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10645881\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11049443\",\"recalls_placed\":\"0\",\"create_date\":\"2019-03-27
        10:46:46.0\",\"item_barcode\":\"31924126199904\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1055569849"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin
        Library\":\"HM585 .S377 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139},{"author_display":"Smith, Gene A., 1963-
        author","title_display":"In harm''s way","fulltitle_display":"In harm''s way
        : a history of the American military experience","subtitle_display":"a history
        of the American military experience","pub_info_display":["New York : Oxford
        University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10762030","acquired_dt":"2019-04-10T00:00:00Z","holdings_record_display":["{\"id\":\"11058450\",\"modified_date\":\"20190410121341\",\"copy_number\":null,\"callnos\":[\"E181
        .S564 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10651929\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11058450\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-10
        12:13:42.0\",\"item_barcode\":\"31924126207277\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"olin\",\"number\":99,\"name\":\"Olin
        Library\",\"library\":\"Olin Library\"}}"],"oclc_id_display":["1061864106"],"availability_json":"{\"available\":true,\"availAt\":{\"Olin
        Library\":\"E181 .S564 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139},{"author_display":"Wen, Eric, 1953- author","title_display":"Graphic
        music analysis","fulltitle_display":"Graphic music analysis","subtitle_display":"","pub_info_display":["Lanham
        : Rowman & Littlefield Publishers, Inc., [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10762019","acquired_dt":"2019-04-10T00:00:00Z","holdings_record_display":["{\"id\":\"11058439\",\"modified_date\":\"20190410121336\",\"copy_number\":null,\"callnos\":[\"MT6
        .W3337 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"mus\",\"number\":88,\"name\":\"Cox
        Library of Music (Lincoln Hall)\",\"library\":\"Music Library\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10651918\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11058439\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-10
        12:13:36.0\",\"item_barcode\":\"31924126208028\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"mus\",\"number\":88,\"name\":\"Cox
        Library of Music (Lincoln Hall)\",\"library\":\"Music Library\"}}"],"oclc_id_display":["1037884442"],"availability_json":"{\"available\":true,\"availAt\":{\"Cox
        Library of Music (Lincoln Hall)\":\"MT6 .W3337 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139},{"author_display":"Eder, W. E. (Wolfgang
        Ernst), author","title_display":"Systematic engineering design","fulltitle_display":"Systematic
        engineering design : general model of procedures for systematic and methodical
        engineering designing","subtitle_display":"general model of procedures for
        systematic and methodical engineering designing","pub_info_display":["Boca
        Raton, FL : Taylor & Francis Group, [2020]"],"pub_date_display":["[2020]"],"language_display":["English."],"id":"10638996","edition_display":["First
        edition."],"acquired_dt":"2019-02-08T00:00:00Z","holdings_record_display":["{\"id\":\"10936343\",\"modified_date\":\"20190208152520\",\"copy_number\":null,\"callnos\":[\"Available
        for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library
        Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1029770202"],"availability_json":"{\"available\":true,\"availAt\":{\"Library
        Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Newnan,
        Donald G., author","title_display":"Engineering economic analysis","fulltitle_display":"Engineering
        economic analysis","subtitle_display":"","pub_info_display":["New York : Oxford
        University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10825474","edition_display":["Fourteenth
        Edition."],"acquired_dt":"2019-05-03T00:00:00Z","holdings_record_display":["{\"id\":\"11121156\",\"modified_date\":\"20190503145827\",\"copy_number\":null,\"callnos\":[\"Available
        for the Library to Purchase\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"cts,rev\",\"number\":120,\"name\":\"Library
        Technical Services Review Shelves\",\"library\":null}]}"],"oclc_id_display":["1080553809"],"availability_json":"{\"available\":true,\"availAt\":{\"Library
        Technical Services Review Shelves\":\"Available for the Library to Purchase\"}}","pub_date_facet":2020,"format":["Book"],"score":1.5185139},{"author_display":"Desnoyers,
        Charles, 1952- author","title_display":"Patterns of East Asian history","fulltitle_display":"Patterns
        of East Asian history","subtitle_display":"","pub_info_display":["New York
        : Oxford University Press, [2020]"],"pub_date_display":["2020"],"language_display":["English."],"id":"10814793","acquired_dt":"2019-04-24T00:00:00Z","holdings_record_display":["{\"id\":\"11110796\",\"modified_date\":\"20190424142307\",\"copy_number\":null,\"callnos\":[\"DS511
        .D47 2020\"],\"notes\":[],\"holdings_desc\":[],\"recent_holdings_desc\":[],\"supplemental_holdings_desc\":[],\"index_holdings_desc\":[],\"locations\":[{\"code\":\"was\",\"number\":139,\"name\":\"Kroch
        Library Asia\",\"library\":\"Kroch Library Asia\"}]}"],"item_record_display":["{\"copy_number\":\"1\",\"item_type_name\":\"book\",\"item_id\":\"10666269\",\"year\":\"\",\"item_type_id\":\"3\",\"chron\":\"\",\"caption\":\"\",\"holds_placed\":\"0\",\"temp_location\":\"0\",\"on_reserve\":\"N\",\"item_enum\":\"\",\"item_sequence_number\":\"1\",\"temp_item_type_id\":\"0\",\"mfhd_id\":\"11110796\",\"recalls_placed\":\"0\",\"create_date\":\"2019-04-24
        14:23:07.0\",\"item_barcode\":\"31924126214620\",\"modify_date\":\"\",\"perm_location\":{\"code\":\"was\",\"number\":139,\"name\":\"Kroch
        Library Asia\",\"library\":\"Kroch Library Asia\"}}"],"oclc_id_display":["1099201203"],"availability_json":"{\"available\":false,\"unavailAt\":{\"Kroch
        Library Asia\":\"DS511 .D47 2020\"}}","pub_date_facet":2020,"format":["Book"],"online":["At
        the Library"],"score":1.5185139}]},"facet_counts":{"facet_queries":{},"facet_fields":{"format":["Book",7076095,"Journal/Periodical",398370,"Microform",355715,"Musical
        Recording",234635,"Thesis",202257,"Video",106347,"Musical Score",101833,"Map",64940,"Manuscript/Archive",17005,"Non-musical
        Recording",10330],"online":["At the Library",5949741,"Online",2252180],"language_facet":["English",4971715,"German",548031,"French",344845,"Spanish",293985,"Chinese",272394,"Russian",187646,"Italian",154478,"Indonesian",142158,"Japanese",105519,"Latin",80718],"location_facet":["Library
        Annex",2427499,"Olin Library",1713132,"Kroch Library Asia",627089,"Kroch Library
        Rare & Manuscripts",512498,"Music Library",202797,"Law Library",201765,"Mann
        Library",166925,"Uris Library",152650,"ILR Library",111043,"Mathematics Library",52727]},"facet_ranges":{},"facet_intervals":{},"facet_heatmaps":{}}}

'
    http_version: 
  recorded_at: Wed, 15 May 2019 14:19:49 GMT
recorded_with: VCR 4.0.0
