---
http_interactions:
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/get?ids=1630516&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Jul 2019 17:45:30 GMT
      Last-Modified:
      - Fri, 19 Jul 2019 17:44:37 GMT
      Etag:
      - '"N2FlN2EwMDAwMDAwMDAwU29scg=="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr8.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '2464'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 19 Jul 2019 17:45:30 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=%22English%20poetry%22&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Jul 2019 17:45:31 GMT
      Last-Modified:
      - Fri, 19 Jul 2019 17:44:37 GMT
      Etag:
      - '"N2FlN2EwMDAwMDAwMDAwU29scg=="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr8.library.cornell.edu
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 19 Jul 2019 17:45:34 GMT
- request:
    method: get
    uri: http://da-prod-solr.library.cornell.edu/solr/blacklight/select?defType=edismax&f.author_facet.facet.limit=6&f.fast_era_facet.facet.limit=6&f.fast_genre_facet.facet.limit=6&f.fast_geo_facet.facet.limit=6&f.fast_topic_facet.facet.limit=6&f.format.facet.limit=11&f.language_facet.facet.limit=6&f.lc_alpha_facet.facet.limit=6&f.lc_callnum_facet.facet.limit=-1&f.lc_callnum_facet.facet.sort=count&f.location.facet.limit=101&f.location.facet.sort=index&f.online.facet.limit=3&f.subject_content_facet.facet.limit=6&facet=true&facet.field=collection&facet.query=acquired_dt:%5BNOW-1YEAR%20TO%20NOW-7DAY%5D&mm=1&q=%22English%20poetry%20%3E%2019th%20century.%22&qt=search&rows=20&sort=score%20desc,%20pub_date_sort%20desc,%20title_sort%20asc&stats=true&stats.field=pub_date_facet&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 19 Jul 2019 17:45:40 GMT
      Last-Modified:
      - Fri, 19 Jul 2019 17:45:22 GMT
      Etag:
      - '"M2ZhYjQ2MDAwMDAwMDAwMFNvbHI="'
      Content-Type:
      - application/json; charset=UTF-8
      Via:
      - 1.1 da-prod-solr7.library.cornell.edu
      Vary:
      - Accept-Encoding
      Content-Length:
      - '8119'
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 19 Jul 2019 17:45:44 GMT
recorded_with: VCR 4.0.0
